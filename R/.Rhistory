report_varbp <- function(runs, folder, reference_bam) {
out = list()
for (file in seq_len(runs)){
out[[ file ]] <- list()
message("started file: ", file)
bam <- paste0(folder, file, "/", file, "_golden.bam")
b <- scanBam(bam)
b <- b[[1]]
s = b$seq |>
as.character() |>
str_to_upper()
r = read.fasta(reference_bam)
r = r[[1]] |> str_to_upper() |> paste(collapse = "")
message("started main function")
aln = mapply(function(x, y, z) {
a = cigarRangesAlongReferenceSpace(x, with.ops = TRUE)[[1]] |> as.data.frame() |> setDT()
b = cigarRangesAlongQuerySpace(x, with.ops = TRUE)[[1]] |> as.data.frame() |> setDT()
b$POS = z - a$start + 1
b$REF = r |> str_sub(
start = z + a$start - 1,
end   = z + a$end - 1
)
b$ALT = y |> str_sub(
start = b$start,
end   = b$end
)
return(b)
}, b$cigar, s, b$pos, SIMPLIFY = FALSE, USE.NAMES = FALSE)
message("finished main function")
aln = aln |> rbindlist(idcol = "SequenceID")
r = aln$REF |> str_split("")
a = aln$ALT |> str_split("")
aln$ALT2 = mapply(function(x, y) {
if( length(x) != length(y) ) return(NA)
out = ifelse(x == y, "-", y) |> paste(collapse = "")
return(out)
}, r, a, SIMPLIFY = FALSE, USE.NAMES = FALSE) |> unlist()
out[[ file ]][["report"]] <- aln
# fwrite(
#     aln, paste0(folder, file, "/", file, "_position_report.csv"),
#     row.names = FALSE, quote = TRUE, sep = ","
# )
aln$ALT2 = ifelse(aln$names == "I", aln$ALT, aln$ALT2)
aln$ALT = NULL
aln = aln |> split(aln$names)
aln2 = list()
# alt ---------------------------------------------------------------------
message("alt")
x = aln$M
ref = x$REF |> str_split("")
alt = x$ALT2 |> str_split("")
paste0(x$SequenceID, ":", x$start) |> duplicated() |> any()
names(ref) = paste(x$SequenceID, x$POS, x$start, sep = ":")
names(alt) = paste(x$SequenceID, x$POS, x$start, sep = ":")
y = mapply(function(r, a) {
out = data.table(
"pos" = r |> length() |> seq_len(),
"REF" = r,
"ALT" = a
)
out = out[which(ALT != "-")]
return(out)
}, ref, alt, SIMPLIFY = FALSE, USE.NAMES = TRUE)
y = y |> rbindlist(idcol = "id")
y$pos_chromosomal = as.numeric( str_split( y$id, "\\:", simplify = TRUE )[, 2] ) + y$pos - 1
y$pos_read        = as.numeric( str_split( y$id, "\\:", simplify = TRUE )[, 3] ) + y$pos - 1
y$id              = str_split( y$id, "\\:", simplify = TRUE )[, 1]
y$pos = NULL
y = y[, by = .(pos_chromosomal, pos_read, REF, ALT), .(
`No. of sequences` = id |> unique() |> length()
)]
y = y[order(pos_chromosomal, pos_read, -`No. of sequences`)]
aln2[[ "alt" ]] = y
# deletions ---------------------------------------------------------------
message("deletions")
x = aln$D
y = data.table(
"pos_chromosomal" = x$POS,
"pos_read"        = x$end,
"REF"             = x$REF,
"ALT"             = x$ALT2,
"id"              = x$SequenceID
)
y = y[, by = .(pos_chromosomal, pos_read, REF, ALT), .(
`No. of sequences` = id |> unique() |> length()
)]
y = y[order(pos_chromosomal, pos_read, -`No. of sequences`)]
aln2[[ "deletion" ]] = y
# insertions --------------------------------------------------------------
message("insertions")
x = aln$I
y = data.table(
"pos_chromosomal" = x$POS,
"pos_read"        = x$start,
"REF"             = x$REF,
"ALT"             = x$ALT2,
"id"              = x$SequenceID
)
y = y[, by = .(pos_chromosomal, pos_read, REF, ALT), .(
`No. of sequences` = id |> unique() |> length()
)]
y = y[order(pos_chromosomal, pos_read, -`No. of sequences`)]
aln2[[ "insertion" ]] = y
# merge -------------------------------------------------------------------
message("merge")
aln2 = rbindlist(aln2, idcol = "names")
out[[ file ]][["report2"]] <- aln2
# fwrite(
#     aln2, paste0(folder, file, "/", file, "_position_report2.csv"),
#     row.names = FALSE, quote = TRUE, sep = ","
# )
paste0("finished file: ", file)
}
return(out)
}
report_varbp <- function(runs, folder, reference) {
out = list()
for (file in seq_len(runs)){
out[[ file ]] <- list()
message("started file: ", file)
bam <- paste0(folder, file, "/", file, "_golden.bam")
b <- scanBam(bam)
b <- b[[1]]
s = b$seq |>
as.character() |>
str_to_upper()
r = read.fasta(reference)
r = r[[1]] |> str_to_upper() |> paste(collapse = "")
message("started main function")
aln = mapply(function(x, y, z) {
a = cigarRangesAlongReferenceSpace(x, with.ops = TRUE)[[1]] |> as.data.frame() |> setDT()
b = cigarRangesAlongQuerySpace(x, with.ops = TRUE)[[1]] |> as.data.frame() |> setDT()
b$POS = z - a$start + 1
b$REF = r |> str_sub(
start = z + a$start - 1,
end   = z + a$end - 1
)
b$ALT = y |> str_sub(
start = b$start,
end   = b$end
)
return(b)
}, b$cigar, s, b$pos, SIMPLIFY = FALSE, USE.NAMES = FALSE)
message("finished main function")
aln = aln |> rbindlist(idcol = "SequenceID")
r = aln$REF |> str_split("")
a = aln$ALT |> str_split("")
aln$ALT2 = mapply(function(x, y) {
if( length(x) != length(y) ) return(NA)
out = ifelse(x == y, "-", y) |> paste(collapse = "")
return(out)
}, r, a, SIMPLIFY = FALSE, USE.NAMES = FALSE) |> unlist()
out[[ file ]][["report"]] <- aln
# fwrite(
#     aln, paste0(folder, file, "/", file, "_position_report.csv"),
#     row.names = FALSE, quote = TRUE, sep = ","
# )
aln$ALT2 = ifelse(aln$names == "I", aln$ALT, aln$ALT2)
aln$ALT = NULL
aln = aln |> split(aln$names)
aln2 = list()
# alt ---------------------------------------------------------------------
message("alt")
x = aln$M
ref = x$REF |> str_split("")
alt = x$ALT2 |> str_split("")
paste0(x$SequenceID, ":", x$start) |> duplicated() |> any()
names(ref) = paste(x$SequenceID, x$POS, x$start, sep = ":")
names(alt) = paste(x$SequenceID, x$POS, x$start, sep = ":")
y = mapply(function(r, a) {
out = data.table(
"pos" = r |> length() |> seq_len(),
"REF" = r,
"ALT" = a
)
out = out[which(ALT != "-")]
return(out)
}, ref, alt, SIMPLIFY = FALSE, USE.NAMES = TRUE)
y = y |> rbindlist(idcol = "id")
y$pos_chromosomal = as.numeric( str_split( y$id, "\\:", simplify = TRUE )[, 2] ) + y$pos - 1
y$pos_read        = as.numeric( str_split( y$id, "\\:", simplify = TRUE )[, 3] ) + y$pos - 1
y$id              = str_split( y$id, "\\:", simplify = TRUE )[, 1]
y$pos = NULL
y = y[, by = .(pos_chromosomal, pos_read, REF, ALT), .(
`No. of sequences` = id |> unique() |> length()
)]
y = y[order(pos_chromosomal, pos_read, -`No. of sequences`)]
aln2[[ "alt" ]] = y
# deletions ---------------------------------------------------------------
message("deletions")
x = aln$D
y = data.table(
"pos_chromosomal" = x$POS,
"pos_read"        = x$end,
"REF"             = x$REF,
"ALT"             = x$ALT2,
"id"              = x$SequenceID
)
y = y[, by = .(pos_chromosomal, pos_read, REF, ALT), .(
`No. of sequences` = id |> unique() |> length()
)]
y = y[order(pos_chromosomal, pos_read, -`No. of sequences`)]
aln2[[ "deletion" ]] = y
# insertions --------------------------------------------------------------
message("insertions")
x = aln$I
y = data.table(
"pos_chromosomal" = x$POS,
"pos_read"        = x$start,
"REF"             = x$REF,
"ALT"             = x$ALT2,
"id"              = x$SequenceID
)
y = y[, by = .(pos_chromosomal, pos_read, REF, ALT), .(
`No. of sequences` = id |> unique() |> length()
)]
y = y[order(pos_chromosomal, pos_read, -`No. of sequences`)]
aln2[[ "insertion" ]] = y
# merge -------------------------------------------------------------------
message("merge")
aln2 = rbindlist(aln2, idcol = "names")
out[[ file ]][["report2"]] <- aln2
# fwrite(
#     aln2, paste0(folder, file, "/", file, "_position_report2.csv"),
#     row.names = FALSE, quote = TRUE, sep = ","
# )
paste0("finished file: ", file)
}
return(out)
}
# fwrite(
#     aln, paste0(folder, file, "/", file, "_position_report.csv"),
#     row.names = FALSE, quote = TRUE, sep = ","
# )
explore_mut_pos <- function(runs, folder, caller) {
found = list()
not_found = list()
for (file in seq_len(runs)){
#file= "1"
message(paste0("working on file ", file))
# input parameters --------------------------------------------------------
qv = paste0(folder, "/Ground_truth_vs_", caller, ".clean_norm.tsv")
gb = paste0(folder, file, "/", file, "_position_report2.csv")
# golden alignments -------------------------------------------------------
gb = gb |> fread()
gb$key = paste(gb$pos_chromosomal, gb$REF, gb$ALT, sep = ":")
# VarScan missing variants ----------------------
qv = qv |> fread()
qv$key = paste(qv$POS, qv$`Ground Truth REF`, qv$`Ground Truth ALT`, sep = ":")
# filtering common mutations ----------------------------
gb_filtered = gb[which(key %in% qv$key)]
qv_filtered = qv[which(key %in% gb_filtered$key)]
q1 = qv_filtered[which(is.na(`VarScan AF`))]
q2 = gb_filtered[which(key %in% q1$key)]
q2$bin = floor(q2$pos_read / 10) + 1
q2 = q2[order(q2$bin), ]
q2$Found = "No"
not_found[[file]] = q2
# fwrite(
#     q2, paste0(folder, file, "/", file, "_VarScan_read_pos_bins_not_found.tsv"),
#     row.names = FALSE, quote = FALSE, sep = "\t"
# )
#boxplot-------------------------------------------------------------------
#q2$bin = paste0("bin", q2$bin)
#q2$bin = q2$bin |> factor(levels = unique(q2$bin))
#gr1 = ggplot(data = q2) +
# geom_point(aes(x = `bin`, y = `No. of sequences`, color = `bin`))
#   geom_violin(aes(x = bin, y = `No. of sequences`, fill = bin)) +
#   ggtitle("Not Found")
#ggsave(
#    plot = gr1, filename = paste0(folder, file, "/", file, "_Box_plots_not_found.jpeg"),
#    width = 8, height = 8, units = "in", dpi = 600
#)
#FOUND---------------------------------------------------------------------
q1 = qv_filtered[which(!is.na(`VarScan AF`))]
q2 = gb_filtered[which(key %in% q1$key)]
q2$bin = floor(q2$pos_read / 10) + 1
q2 = q2[order(q2$bin), ]
q2$Found = "Yes"
found[[file]] = q2
# fwrite(
#     q2, paste0(folder, file, "/", file, "_VarScan_read_pos_bins_found.tsv"),
#     row.names = FALSE, quote = FALSE, sep = "\t"
# )
#q2$bin = paste0("bin", q2$bin)
#q2$bin = q2$bin |> factor(levels = unique(q2$bin))
#gr1 = ggplot(data = q2) +
#   geom_violin(aes(x = bin, y = `No. of sequences`, fill = bin)) +
#  ggtitle("Found")
# ggsave(
#    plot = gr1, filename = paste0(folder, file, "/", file, "_Box_plots_found.jpeg"),
#     width = 8, height = 8, units = "in", dpi = 600
# )
}
found = found |> rbindlist(idcol = "Run")
not_found = not_found |> rbindlist(idcol = "Run")
out = rbind(found, not_found)
return(out)
}
gsub('Rscripts', '', getwd())
knitr::opts_chunk$set(echo = F)
knitr::opts_chunk$set(results = 'asis')
library(dplyr)
library(rstatix)
library(ggplot2)
library(pROC)
library(cutpointr)
library(glmnet)
library(caret)
myfile_wd = gsub('Rscripts', 'Desktop/', getwd())
df = read.csv(paste0(myfile_wd, '1000_100_10_All_Freebayes_read_pos_bins_report.csv'))
# myfile_wd = gsub('Rscripts', 'Desktop/', getwd())
df = read.csv('1000_100_10_All_Freebayes_read_pos_bins_report.csv')
# myfile_wd = gsub('Rscripts', 'Desktop/', getwd())
df = read.csv('1000_100_10_All_Freebayes_position_report.csv')
colnames(df)[6] = 'sequences'
df$ref_alt = paste(df$REF, df$ALT)
df$outcome = ifelse(df$Found == 'Yes', 1, 0)
tmp = df %>%
select(REF, ALT, bin, Found) %>%
gather(., key = 'RiskFactor', value = 'RF_Value', -Found) %>%
freq_table(RiskFactor, RF_Value, Found) %>%
mutate(
result = paste0(n, ' (', prop, '%', ')')
) %>%
select(-n, -prop) %>%
spread(., key = 'Found', value = 'result')
tmp$p_value = NA
tmp$p_value[which(tmp$RiskFactor == 'REF')] = chisq.test(df$Found, df$REF)$p.value
tmp$p_value[which(tmp$RiskFactor == 'ALT')] = chisq.test(df$Found, df$ALT)$p.value
a = glm(ifelse(Found == 'Yes', 1, 0) ~ bin, data = df, family = 'binomial') %>%
summary() %>%
coefficients()
tmp$p_value[which(tmp$RiskFactor == 'bin')] = a[2,4]
tmp$p_value = ifelse(
tmp$p_value < 0.001,
'<0.001',
as.character(round(tmp$p_value, 3))
)
tmp$p_value[which(duplicated(tmp$RiskFactor))] = ''
knitr::kable(tmp)
df_long = df %>%
select(pos_chromosomal, pos_read, sequences, Found) %>%
gather(., key = 'RiskFactor', value = 'RF_Value', -Found)
ggplot(data = df_long,
aes(
x = as.factor(Found),
fill = as.factor(Found),
y = RF_Value)) +
geom_boxplot() +
labs(
fill = 'Found',
x = 'Found') +
facet_wrap(~RiskFactor, scales = 'free_y')
tmp = df %>%
select(pos_chromosomal, pos_read, sequences, Found) %>%
group_by(Found) %>%
get_summary_stats() %>%
select(-iqr, -mad, -se, -ci, -min, -max) %>%
arrange(variable) %>%
rename('RiskFactor' = 'variable')
tmp$p_value = NA
a = glm(ifelse(Found == 'Yes', 1, 0) ~ pos_chromosomal, data = df, family = 'binomial') %>%
summary() %>%
coefficients()
tmp$p_value[which(tmp$RiskFactor == 'pos_chromosomal')] = a[2,4]
a = glm(ifelse(Found == 'Yes', 1, 0) ~ pos_read, data = df, family = 'binomial') %>%
summary() %>%
coefficients()
tmp$p_value[which(tmp$RiskFactor == 'pos_read')] = a[2,4]
a = glm(ifelse(Found == 'Yes', 1, 0) ~ sequences, data = df, family = 'binomial') %>%
summary() %>%
coefficients()
tmp$p_value[which(tmp$RiskFactor == 'sequences')] = a[2,4]
tmp$p_value = ifelse(
tmp$p_value < 0.001,
'<0.001',
as.character(round(tmp$p_value, 3))
)
tmp$p_value[which(duplicated(tmp$RiskFactor))] = ''
knitr::kable(tmp)
df_scale = df %>%
select(outcome, pos_chromosomal, sequences, pos_read) %>%
mutate_at(c('pos_chromosomal', 'pos_read', 'sequences'), scale)
tmp = matrix(nrow = 3, ncol = 5) %>%
as.data.frame()
colnames(tmp) = c('RiskFactor', 'optimal_cutpoint', 'acc', 'sensitivity', 'specificity')
cutpointr(df_scale,
x = pos_chromosomal,
class = outcome,
pos_class = 1,
neg_class = 0,
method = maximize_metric,
metric = youden) -> cp
a = summary(cp)
tmp[1, ]= a$cutpointr %>%
as.data.frame() %>%
mutate(RiskFactor = 'pos_chromosomal') %>%
select(all_of(colnames(tmp)))
cat('Pos_Chromosomal')
plot(cp)
cutpointr(df_scale,
x = pos_read,
class = outcome,
pos_class = 1,
neg_class = 0,
method = maximize_metric,
metric = youden) -> cp
a = summary(cp)
tmp[2, ]= a$cutpointr %>%
as.data.frame() %>%
mutate(RiskFactor = 'pos_read') %>%
select(all_of(colnames(tmp)))
cat('Pos_read')
plot(cp)
cutpointr(df_scale,
x = sequences,
class = outcome,
pos_class = 1,
neg_class = 0,
method = maximize_metric,
metric = youden) -> cp
a = summary(cp)
tmp[3, ]= a$cutpointr %>%
as.data.frame() %>%
mutate(RiskFactor = 'sequences') %>%
select(all_of(colnames(tmp)))
cat('Number of Sequences')
plot(cp)
knitr::kable(tmp)
library(data.table)
library(stringr)
library(vcfR)
library(ggplot2)
library(ggforce)
library(ggsci)
library(ggvenn)
library(patchwork)
library(optparse)
library(GenomicAlignments)
library(Rsamtools)
library(seqinr)
install.packages("data.table", dependencies=TRUE)
