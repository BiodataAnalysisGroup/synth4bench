} else if (nchar(`Ground Truth ALT`) != nchar(caller[POS == .SD$POS]$ALT[1])) {
"Different_ALT_Length"
} else {
"Uncategorized"
}
), by = .(POS, `Ground Truth REF`, `Ground Truth ALT`)]
return(categorized_fns)
}
define_tp <- function(caller, gt){
#TP Variants
tp_var = caller[which(caller$mut %in% gt$mut)]
tp_var$type = "TP"
return(tp_var)
}
#GT----------------------------------------------------------------------------
gt_all = load_gt_report_indels("results", "Merged")$all
gt_indels = load_gt_report_indels("results/", "Merged")$indels
pick_gt = load_gt_vcf_indels("results/", "Merged")
#Mutect2-----------------------------------------------------------------------
load_gatk_vcf <- function(path, merged_file){
#function to load caller vcf
Mutect2_somatic_vcf <- read.vcfR( paste0(path, merged_file,
"_Mutect2_norm.vcf"), verbose = FALSE )
Mutect2_s0  = Mutect2_somatic_vcf |> vcfR::getFIX() |> as.data.frame() |> setDT()
Mutect2_s1  = Mutect2_somatic_vcf |> extract_gt_tidy() |> setDT()
Mutect2gatk_s21 = Mutect2_somatic_vcf |> extract_info_tidy() |> setDT()
Mutect2_somatic = cbind(Mutect2_s0[Mutect2_s1$Key, ], Mutect2_s1)
return(Mutect2_somatic)
}
#FP
fp_snvs_gatk <- function(Mutect2_somatic_snvs, pick_gt, gt_all){#term snvs is redundant
#find MUtect2 FP variants
fp_var = define_fp(Mutect2_somatic_snvs, pick_gt)
fp_var$gt_AF = as.numeric(fp_var$gt_AF)
colnames(fp_var) = c("CHROM", "POS","ID", "Mutect2 REF",
"Mutect2 ALT", "Mutect2 QUAL",	"Mutect2 FILTER",
"key", "Indiv", "Mutect2 AD", "Mutect2 AF",
"Mutect2 DP", "gt_F1R2", "gt_F2R1", "gt_FAD",
"gt_GQ", "gt_GT",	"gt_PGT",	"gt_PID",	"gt_PL",
"gt_PS",	"gt_SB",	"gt_GT_alleles", "mut")
#find DP of FP variants'  location in GT
tmp = gt_all[which(POS %in% unique(fp_var$POS))]
a = unique(tmp, by = "POS")
#to include the presence multiple variants in a POS
index = match(fp_var$POS, a$POS)
fp_var$`Ground Truth DP` = a[index]$DP
fp_var$`DP Percentage` = fp_var$`Mutect2 DP`/fp_var$`Ground Truth DP`
fp_var$type = "FP"
return(fp_var)
}
final_fp_indels_gatk <- function(path, merged_file, pick_gt, gt_all){
Mutect2_somatic <- load_gatk_vcf(path, merged_file)
Mutect2_somatic_indels <-select_indels(Mutect2_somatic)
fp_var = fp_snvs_gatk(Mutect2_somatic_indels, pick_gt, gt_all)
return(fp_var)
}
#FN
final_fn_indels_gatk <- function(path, merged_file, pick_gt){
Mutect2_somatic <- load_gatk_vcf(path, merged_file)
Mutect2_somatic_indels <-select_indels(Mutect2_somatic)
fn_var = define_fn(Mutect2_somatic_indels, pick_gt)
colnames(fn_var) = c("POS", "Ground Truth REF", "Ground Truth DP",
"Ground Truth ALT", "Count", "Ground Truth AF", "mut", "type")
return(fn_var)
}
fn_indels_gatk = final_fn_indels_gatk("results/", "Merged", pick_gt)
#TP
final_tp_indels_gatk <- function(path, merged_file, pick_gt){
Mutect2_somatic <- load_gatk_vcf(path, merged_file)
Mutect2_somatic_indels <-select_indels(Mutect2_somatic)
tp_var = define_tp(Mutect2_somatic_indels, pick_gt)
return(tp_var)
}
standardize_indels <- function(dt) { #!!!! NEW FUNCTION
#Function to standardize indels
setDT(dt)
#deletions
dt[grepl("^-", ALT), `:=` (
ALT = substring(REF, 1, 1),
REF = paste0(REF, substring(ALT, 2)),
POS = POS - 1  #Adjust POS for deletions
)]
#insertions
dt[grepl("^\\+", ALT), ALT := paste0(REF, substring(ALT, 2))]
dt$mut = paste(dt$POS,
dt$REF,
dt$ALT, sep = ":")
return(dt)
}
pick_gt_stdz = standardize_indels(pick_gt)
tp_indels_gatk = final_tp_indels_gatk("results/", "Merged", pick_gt_stdz)
fn_indels_gatk = final_fn_indels_gatk("results/", "Merged", pick_gt_stdz)
fp_indels_gatk = final_fp_indels_gatk("results/", "Merged", pick_gt_stdz, gt_all)
#
# fwrite(
#     fp_indels_gatk, "GATK_indels_FP.tsv",
#
#     row.names = FALSE, quote = FALSE, sep = "\t"
# )
#
# fwrite(
#     fn_indels_gatk, "GATK_indels_FN.tsv",
#
#     row.names = FALSE, quote = FALSE, sep = "\t"
# )
#
#
# fwrite(
#     tp_indels_gatk, "GATK_indels_TP.tsv",
#
#     row.names = FALSE, quote = FALSE, sep = "\t"
# )
Mutect2_somatic <- load_gatk_vcf("results/", "Merged")
Mutect2_indels <-select_indels(Mutect2_somatic)
caller = Mutect2_indels
fn_var = fn_indels_gatk
rm(gt_all, fp_indels_gatk, gt_indels, Mutect2_somatic, pick_gt, pick_gt_stdz, tp_indels_gatk)
rm(categorize_fns
)
rm(define_fn, define_fp, define_tp, final_fn_indels_gatk, final_fp_indels_gatk, final_tp_indels_gatk, load_gatk_vcf)
rm(fp_snvs_gatk, load_gt_report_indels, load_gt_vcf_indels, select_indels, standardize_indels)
caller$POS = as.numeric(caller$POS)
fn_var$POS = as.numeric(fn_var$POS)
View(caller)
View(fn_var)
same_POS = fn_indels_gatk[which(fn_indels_gatk$POS %in% caller$POS)]
#each original data.table separately
same_POS_from_fn_indels_gatk <- fn_indels_gatk[POS %in% caller$POS]
same_POS = fn_indels_gatk[which(fn_indels_gatk$POS %in% caller$POS),]
same_POS = fn_indels_gatk[which(fn_indels_gatk$POS %in% caller$POS)]
#each original data.table separately
fn_var_same_POS <- fn_indels_gatk[POS %in% caller$POS]
caller_same_POS <- caller[POS %in% fn_indels_gatk$POS]
rm(same_POS_from_fn_indels_gatk)
rm(fn_indels_gatk, Mutect2_indels)
rm(same_POS)
View(fn_var_same_POS)
fn_var_same_POS_same_REF <- fn_var_same_POS[`Ground Truth REF` %in% caller_same_POS$REF]
View(fn_var_same_POS_same_REF)
caller_same_POS_same_REF <- caller_same_POS[REF %in% fn_var_same_POS$`Ground Truth REF`]
View(caller_same_POS_same_REF)
View(fn_var_same_POS_same_REF)
# Adding conditions for matching on POS, REF, and ALT
fn_var_same_POS_REF_ALT <- fn_indels_gatk[POS %in% caller$POS & `Ground Truth REF` %in% caller$REF & `Ground Truth ALT` %in% caller$ALT]
# Adding conditions for matching on POS, REF, and ALT
fn_var_same_POS_REF_ALT <- fn_var[POS %in% caller$POS & `Ground Truth REF` %in% caller$REF & `Ground Truth ALT` %in% caller$ALT]
View(fn_var_same_POS_REF_ALT)
View(caller)
View(caller)
View(fn_var)
fn_var$POS==1794
fn_var[fn_var$POS==1794]
fn_var[fn_var$POS==1794,]
caller[caller$POS==1794,]
View(fn_var_same_POS_REF_ALT)
caller_same_POS_REF_ALT <- caller[POS %in% fn_indels_gatk$POS & REF %in% fn_indels_gatk$REF & ALT %in% fn_indels_gatk$ALT]
caller_same_POS_REF_ALT <- caller[POS %in% fn_var$POS & REF %in% fn_var$`Ground Truth REF` & ALT %in% fn_var$`Ground Truth ALT`]
View(caller_same_POS_same_REF)
rm(caller_same_POS_same_REF, caller_same_POS_REF_ALT)
fn_var_same_POS_REF_ALT, fn_var_same_POS_same_REF
fn_var_same_POS_REF_ALT, fn_var_same_POS_same_REF)
rm(fn_var_same_POS_REF_ALT, fn_var_same_POS_same_REF)
#Same REF?
fn_var_same_POS_REF <- fn_var_same_POS[`Ground Truth REF` %in% caller_same_POS$REF]
caller_same_POS_REF <- caller_same_POS[REF %in% fn_var_same_POS$`Ground Truth REF`]
View(fn_var_same_POS)
colnames(fn_var_same_POS) = c("POS","REF", "Ground Truth DP",  "ALT",
"Count", "Ground Truth AF","mut","type")
View(caller_same_POS)
Same REF?
#Same REF?
fn_var_same_POS_REF <- fn_var_same_POS[REF %in% caller_same_POS$REF]
caller_same_POS_REF <- caller_same_POS[REF %in% fn_var_same_POS$REF]
View(caller_same_POS_REF)
View(fn_var_same_POS_REF)
#Same REF?
fn_var_same_POS_REF <- fn_var_same_POS[POS %in% caller_same_POS$POS & REF %in% caller_same_POS$REF]
caller_same_POS_REF <- caller_same_POS[POS %in% fn_var_same_POS$POS & REF %in% fn_var_same_POS$REF]
View(caller_same_POS_REF)
View(fn_var_same_POS_REF)
same_POS_REF_ALT <- merge(fn_var_same_POS, caller_same_POS, by = c("POS", "REF", "ALT"))
View(same_POS_REF_ALT)
rm(caller_same_POS, caller_same_POS_REF)
rm(fn_var_same_POS, fn_var_same_POS_REF)
colnames(fn_var) = c("POS","REF", "Ground Truth DP",  "ALT",
"Count", "Ground Truth AF","mut","type")
same_POS <- merge(fn_var, caller, by = c("POS"))
same_POS_REF <- merge(fn_var, caller, by = c("POS", "REF"))
same_POS_REF_ALT <- merge(fn_var, caller, by = c("POS", "REF", "ALT"))
View(same_POS)
View(fn_var)
View(same_POS_REF)
same_POS2 <- merge(fn_var, caller, by = c("POS"), all.x = TRUE)
same_POS2_only <- same_POS2[is.na(same_POS2$column_from_caller)]
rm(same_POS2, same_POS2_only)
View(same_POS)
View(fn_var)
# Step 1: Same POS
same_POS <- merge(fn_var, caller, by = "POS", all.x = TRUE)
fn_var[, category := ifelse(POS %in% same_POS$POS, "same POS", "diff POS")]
View(fn_var)
View(same_POS)
#Same POS
same_POS <- merge(fn_var, caller, by = c("POS"))
fn_var[, category := ifelse(POS %in% same_POS$POS, "same POS", "diff POS")]
View(fn_var)
#Same POS & REF
same_POS_REF <- merge(fn_var, caller, by = c("POS", "REF"))
View(same_POS_REF)
fn_var[, category := ifelse(REF %in% same_POS_REF$REF, "same REF", "diff REF")]
View(fn_var)
caller = Mutect2_indels
fn_var = fn_indels_gatk
caller$POS = as.numeric(caller$POS)
fn_var$POS = as.numeric(fn_var$POS)
colnames(fn_var) = c("POS","REF", "Ground Truth DP",  "ALT",
"Count", "Ground Truth AF","mut","type")
#Same POS
same_POS <- merge(fn_var, caller, by = c("POS"))
fn_var[, category := ifelse(POS %in% same_POS$POS, "same POS", "diff POS")]
#Same POS & REF
same_POS_REF <- merge(fn_var, caller, by = c("POS", "REF"))
fn_var[, category := ifelse(POS %in% same_POS_REF$POS &
REF %in% same_POS_REF$REF, "same REF", "diff REF")]
View(fn_var)
#Same POS
same_POS <- merge(fn_var, caller, by = c("POS"))
fn_var[, category := ifelse(POS %in% same_POS$POS, "same POS", "diff POS")]
View(fn_var)
fn_var[, category := ifelse(POS %in% same_POS_REF$POS &
REF %in% same_POS_REF$REF, "same REF", "diff REF",
category)]  # Keep existing category if it's "same POS"
fn_var[, category := ifelse(POS %in% same_POS_REF$POS &
REF %in% same_POS_REF$REF, "same POS & REF",,
category)]  # Keep existing category if it's "same POS"
# Step 1: Same POS
same_POS <- merge(fn_var, caller, by = "POS", all.x = TRUE)
fn_var[, category := ifelse(POS %in% same_POS$POS, "same POS", "diff POS")]
# Step 2: Same POS & REF
same_POS_REF <- merge(fn_var, caller, by = c("POS", "REF"), all.x = TRUE)
fn_var[, category := ifelse(POS %in% same_POS_REF$POS & REF %in% same_POS_REF$REF,
"same POS & REF",
category)]  # Keep existing category if it's "same POS"
# Step 3: Same POS, REF & ALT
same_POS_REF_ALT <- merge(fn_var, caller, by = c("POS", "REF", "ALT"), all.x = TRUE)
fn_var[, category := ifelse(POS %in% same_POS_REF_ALT$POS & REF %in% same_POS_REF_ALT$REF & ALT %in% same_POS_REF_ALT$ALT,
"same POS & REF & ALT",
category)]  # Keep existing category if it matches previous conditions
View(fn_var)
#Same POS
same_POS <- merge(fn_var, caller, by = c("POS"))
fn_var[, category := ifelse(POS %in% same_POS$POS, "same POS", "diff POS")]
rm(same_POS_REF, same_POS_REF_ALT)
fn_var[which(fn_var$category=='same POS")]
r
)
]
]
rrrrrrrrrrrr
3r3r3
+
view()
r
fwrite(
caller, "caller.tsv",
row.names = FALSE, quote = FALSE, sep = "\t"
)
fwrite(
fn_var, "fn_var.tsv",
row.names = FALSE, quote = FALSE, sep = "\t"
)
source("R/libraries.R")
pick_gt_stdz = gt_stdz_indels("results", "Merged")
source("R/common_helpers.R")
source("R/helpers_gatk.R")
pick_gt_stdz = gt_stdz_indels("results", "Merged")
#Mutect2-----------------------------------------------------------------------
#TP
tp_indels_gatk = final_tp_indels_gatk("results", "Merged", pick_gt_stdz)
#FN
categorized_fn_indels_gatk <- function(path, merged_file){
#function to output categorized FN indels
fn_indels_gatk = final_fn_indels_gatk(path, merged_file, pick_gt_stdz)
Mutect2_somatic = load_gatk_vcf(path, merged_file)
Mutect2_indels = select_indels(Mutect2_somatic)
fn_indels_gatk_categories = categorize_fns_gatk(Mutect2_indels, fn_indels_gatk)
return(fn_indels_gatk_categories)
}
new_fn = categorized_fn_indels_gatk("results", "Merged")
categorized_fp_indels_gatk <- function(path, merged_file){
#function to output categorized FP indels
gt_all = load_gt_report_indels(path, merged_file)$all
fp_indels_gatk = final_fp_indels_gatk(path, merged_file, pick_gt_stdz, gt_all)
fp_indels_gatk_categories = categorize_fps_gatk(pick_gt_stdz, fp_indels_gatk)
return(fp_indels_gatk_categories)
}
new_fp = categorized_fp_indels_gatk("results", "Merged")
#function to output categorized FP indels
gt_all = load_gt_report_indels(path, merged_file)$all
new_fp = load_gt_report_indels("results", "Merged")
View(new_fp)
gt_all= gt_stdz_indels(gt_all)
gt_all = load_gt_report_indels("results", "Merged")$all
View(gt_all)
gt_all= gt_stdz_indels(gt_all)
gt_all= gt_stdz_indels(gt_all)
gt_all= standardize_indels(gt_all)
gt_all= gt_stdz_indels(gt_all)
gt_all = load_gt_report_indels("results", "Merged")$all
gt_all= standardize_indels(gt_all)
View(gt_all)
gt_all = load_gt_report_indels("results", "Merged")$all |> gt_stdz_indels()
gt_all = load_gt_report_indels("results", "Merged")$all |> standardize_indels()
View(gt_all)
categorized_fp_indels_gatk <- function(path, merged_file){
#function to output categorized FP indels
gt_all = load_gt_report_indels(path, merged_file)$all |> standardize_indels()
fp_indels_gatk = final_fp_indels_gatk(path, merged_file, pick_gt_stdz, gt_all)
fp_indels_gatk_categories = categorize_fps_gatk(pick_gt_stdz, fp_indels_gatk)
return(fp_indels_gatk_categories)
}
new_fp = categorized_fp_indels_gatk("results", "Merged")
View(gt_all)
#FN
call_fn_indels_gatk <- function(path, merged_file){
#function to output categorized FN indels
fn_indels_gatk = final_fn_indels_gatk(path, merged_file, pick_gt_stdz)
Mutect2_somatic = load_gatk_vcf(path, merged_file)
Mutect2_indels = select_indels(Mutect2_somatic)
fn_indels_gatk_categories = categorize_fns_gatk(Mutect2_indels, fn_indels_gatk)
return(fn_indels_gatk_categories)
}
new_fn = call_fn_indels_gatk("results", "Merged")
call_fp_indels_gatk <- function(path, merged_file){
#function to output categorized FP indels
gt_all = load_gt_report_indels(path, merged_file)$all |> standardize_indels()
fp_indels_gatk = final_fp_indels_gatk(path, merged_file, pick_gt_stdz, gt_all)
fp_indels_gatk_categories = categorize_fps_gatk(pick_gt_stdz, fp_indels_gatk)
return(fp_indels_gatk_categories)
}
new_fp = call_fp_indels_gatk("results", "Merged")
fwrite(
new_fn, paste0("fn_var_new.tsv"),
row.names = FALSE, quote = FALSE, sep = "\t"
)
fwrite(
new_fp, paste0("fp_var_new.tsv"),
row.names = FALSE, quote = FALSE, sep = "\t"
)
# Libraries
source("R/libraries.R")
circular_plot <- function(path, merged_file, caller){
#Load data
tp = fread(paste0(path, "/", merged_file, "_", caller, "_indels_TP.tsv"), sep = "\t")
fp = fread(paste0(path, "/", merged_file, "_", caller, "_indels_FP.tsv"), sep = "\t")
fn = fread(paste0(path, "/", merged_file, "_", caller, "_indels_FN.tsv"), sep = "\t")
tp = tp[, .(POS, REF, ALT, type)]
tp$REF_len <- str_length(tp$REF)
tp$ALT_len <- str_length(tp$ALT)
tp$len_dif <- tp$ALT_len - tp$REF_len
tp$category <- "not exist"
fp = fp[, .(POS, REF, ALT, type, category)]
fp$REF_len <- str_length(fp$REF)
fp$ALT_len <- str_length(fp$ALT)
fp$len_dif <- fp$ALT_len - fp$REF_len
fn = fn[, .(POS, REF, ALT, type, category)]
fn$REF_len <- str_length(fn$REF)
fn$ALT_len <- str_length(fn$ALT)
fn$len_dif <- fn$ALT_len - fn$REF_len
#Combine the datasets
data = rbind(tp, fp)
df = rbind(data, fn)
colnames(df) <- c("POS", "REF", "ALT", "Type",  "REF_len", "ALT_len", "len_dif", "Category")
#plot ------------------------------------------------------------------------
#Adjust data so that each type has its own y-offset
df <- df |>
mutate(y_cycle = case_when(
Type == "FN" ~ len_dif + 50,   # Shift FN cycle outward
Type == "FP" ~ len_dif + 25,   # Shift FP cycle to middle
Type == "TP" ~ len_dif         # Keep TP at the center
))
#Ensure 'category' is a factor
df$Category <- factor(df$Category, levels = c("not exist", "diff REF", "diff ALT"))
p <- ggplot(df, aes(x = POS, y = y_cycle)) +
#Lollipop segments: start each from the respective baseline to the point
geom_segment(
aes(x = POS, xend = POS,
y = ifelse(Type == "FN", 50, ifelse(Type == "FP", 25, 0)),
yend = y_cycle),
color = "grey75", linewidth = 0.25, lineend = "round"
) +
#Dashed lines for separation of each cycle level
geom_hline(yintercept = 50, color = "grey40") +
geom_hline(yintercept = 25, color = "grey40") +
geom_hline(yintercept = 0,  color = "grey40") +
# Add points at the end of each segment for the lollipop head
geom_point(aes(fill = Type, color = Type, shape = Category,
size = ifelse(Category == "not exist", 1.5, 3)), # Increase size for specific categories
stroke = .15) +
scale_size_identity() +
#Define specific shapes for each category level
scale_shape_manual(values = c("diff REF" = 23, "diff ALT" = 24, "not exist" = 21)) +
#Define custom colors for each type
scale_fill_manual(values = c("TP" = "#a78d95", "FP" = "#ae4364", "FN" = "#43ae8d")) +
scale_color_manual(values = c("TP" = "#a78d95", "FP" = "#ae4364", "FN" = "#43ae8d") |> darken(.25)) +
#Customize the x-axis and radial coordinates
scale_x_continuous(breaks = c(0, 4751, 9503, 14255, 19007), limits = c(0, 19007)) +
coord_radial(start = pi / 2.5, inner.radius = .25, end = 2.6 * pi) +
#Remove legend for size if unnecessary
guides(size = "none") +
#Define minimal theme and other plot aesthetics
theme_minimal() +
theme(
axis.text.y = element_blank(),
panel.grid.major = element_line(linewidth = 0.35),
panel.grid.minor = element_blank(),
plot.margin = margin(20, 20, 20, 20),
plot.title = element_text(size = 15, face = "bold", hjust = 0.5)
) +
#Add labels for the plot
labs(
title = "Ground Truth vs Mutect2 INDELS",
y = "REF vs ALT Length Difference",
x = "Chromosomal Position"
# color = "Type"
)
return(p)
}
p = circular_plot("results", "Merged", "Mutect2")
p
# Libraries
source("R/libraries.R")
circular_plot_gatk <- function(path, merged_file, caller){
#Load data
tp = fread(paste0(path, "/", merged_file, "_", caller, "_indels_TP.tsv"), sep = "\t")
fp = fread(paste0(path, "/", merged_file, "_", caller, "_indels_FP.tsv"), sep = "\t")
fn = fread(paste0(path, "/", merged_file, "_", caller, "_indels_FN.tsv"), sep = "\t")
tp = tp[, .(POS, REF, ALT, type)]
tp$REF_len <- str_length(tp$REF)
tp$ALT_len <- str_length(tp$ALT)
tp$len_dif <- tp$ALT_len - tp$REF_len
tp$category <- "not exist"
fp = fp[, .(POS, REF, ALT, type, category)]
fp$REF_len <- str_length(fp$REF)
fp$ALT_len <- str_length(fp$ALT)
fp$len_dif <- fp$ALT_len - fp$REF_len
fn = fn[, .(POS, REF, ALT, type, category)]
fn$REF_len <- str_length(fn$REF)
fn$ALT_len <- str_length(fn$ALT)
fn$len_dif <- fn$ALT_len - fn$REF_len
#Combine the datasets
data = rbind(tp, fp)
df = rbind(data, fn)
colnames(df) <- c("POS", "REF", "ALT", "Type",  "REF_len", "ALT_len", "len_dif", "Category")
#plot ------------------------------------------------------------------------
#Adjust data so that each type has its own y-offset
df <- df |>
mutate(y_cycle = case_when(
Type == "FN" ~ len_dif + 50,   # Shift FN cycle outward
Type == "FP" ~ len_dif + 25,   # Shift FP cycle to middle
Type == "TP" ~ len_dif         # Keep TP at the center
))
#Ensure 'category' is a factor
df$Category <- factor(df$Category, levels = c("not exist", "diff REF", "diff ALT"))
p <- ggplot(df, aes(x = POS, y = y_cycle)) +
#Lollipop segments: start each from the respective baseline to the point
geom_segment(
aes(x = POS, xend = POS,
y = ifelse(Type == "FN", 50, ifelse(Type == "FP", 25, 0)),
yend = y_cycle),
color = "grey75", linewidth = 0.25, lineend = "round"
) +
#Dashed lines for separation of each cycle level
geom_hline(yintercept = 50, color = "grey40") +
geom_hline(yintercept = 25, color = "grey40") +
geom_hline(yintercept = 0,  color = "grey40") +
# Add points at the end of each segment for the lollipop head
geom_point(aes(fill = Type, color = Type, shape = Category,
size = ifelse(Category == "not exist", 1.5, 3)), # Increase size for specific categories
stroke = .15) +
scale_size_identity() +
#Define specific shapes for each category level
scale_shape_manual(values = c("diff REF" = 23, "diff ALT" = 24, "not exist" = 21)) +
#Define custom colors for each type
scale_fill_manual(values = c("TP" = "#a78d95", "FP" = "#ae4364", "FN" = "#43ae8d")) +
scale_color_manual(values = c("TP" = "#a78d95", "FP" = "#ae4364", "FN" = "#43ae8d") |> darken(.25)) +
#Customize the x-axis and radial coordinates
scale_x_continuous(breaks = c(0, 4751, 9503, 14255, 19007), limits = c(0, 19007)) +
coord_radial(start = pi / 2.5, inner.radius = .25, end = 2.6 * pi) +
#Remove legend for size if unnecessary
guides(size = "none") +
#Define minimal theme and other plot aesthetics
theme_minimal() +
theme(
axis.text.y = element_blank(),
panel.grid.major = element_line(linewidth = 0.35),
panel.grid.minor = element_blank(),
plot.margin = margin(20, 20, 20, 20),
plot.title = element_text(size = 15, face = "bold", hjust = 0.5)
) +
#Add labels for the plot
labs(
title = "Ground Truth vs Mutect2 INDELS",
y = "REF vs ALT Length Difference",
x = "Chromosomal Position"
# color = "Type"
)
return(p)
}
p = circular_plot("results", "Merged", "Mutect2")
p = circular_plot_gatk("results", "Merged", "Mutect2")
p
