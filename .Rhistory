color = "grey75", linewidth = 0.25, lineend = "round"
) +
#Dashed lines for separation of each cycle level
geom_hline(yintercept = 50, color = "grey40") +
geom_hline(yintercept = 25, color = "grey40") +
geom_hline(yintercept = 0,  color = "grey40") +
# Add points at the end of each segment for the lollipop head
geom_point(aes(fill = Type, color = Type, shape = Category,
size = ifelse(Category == "not exist", 1.5, 3)), # Increase size for specific categories
stroke = .15) +
scale_size_identity() +
#Define specific shapes for each category level
scale_shape_manual(values = c("diff REF" = 23, "diff ALT" = 24, "not exist" = 21)) +
#Define custom colors for each type
scale_fill_manual(values = c("TP" = "#a78d95", "FP" = "#ae4364", "FN" = "#43ae8d")) +
scale_color_manual(values = c("TP" = "#a78d95", "FP" = "#ae4364", "FN" = "#43ae8d") |> darken(.25)) +
#Customize the x-axis and radial coordinates
scale_x_continuous(breaks = c(0, 4751, 9503, 14255, 19007), limits = c(0, 19007)) +
coord_radial(start = pi / 2.5, inner.radius = .25, end = 2.6 * pi) +
#Remove legend for size if unnecessary
guides(size = "none") +
#Define minimal theme and other plot aesthetics
theme_minimal() +
theme(
axis.text.y = element_blank(),
panel.grid.major = element_line(linewidth = 0.35),
panel.grid.minor = element_blank(),
plot.margin = margin(20, 20, 20, 20),
plot.title = element_text(size = 15, face = "bold", hjust = 0.5)
) +
#Add labels for the plot
labs(
title = "Ground Truth vs Mutect2 INDELS",
y = "REF vs ALT Length Difference",
x = "Chromosomal Position"
# color = "Type"
)
return(p)
}
p = circular_plot("results", "Merged", "Mutect2")
p = circular_plot_gatk("results", "Merged", "Mutect2")
p
source("R/libraries.R")
source("R/common_helpers.R")
source("R/helpers_gatk.R")
source("R/helpers_freebayes.R")
pick_gt_stdz = gt_stdz_indels("results", "Merged")
#Caller------------------------------------------------------------------------
#TP
tp_indels_gatk = final_tp_indels_gatk("results", "Merged", pick_gt_stdz)
rm(p)
source("R/libraries.R")
source("R/common_helpers.R")
#source("R/helpers_gatk.R")
source("R/helpers_freebayes.R")
pick_gt_stdz = gt_stdz_indels("results", "Merged")
#function to identify TP indels
freebayes_somatic_indels <- load_freebayes_vcf("results", "Merged") |> select_indels
#function to identify TP indels
freebayes_somatic_indels <- load_freebayes_vcf("results", "Merged") |> select_indels()
#function to identify TP indels
Freebayes_somatic_indels <- load_Freebayes_vcf("results", "Merged") |> select_indels()
View(Freebayes_somatic_indels)
tp_var = define_tp(Freebayes_somatic_indels, pick_gt_stdz)
View(tp_var)
#function to identify FN indels
Freebayes_somatic <- load_Freebayes_vcf("results", "Merged")
#function to identify FN indels
Freebayes_somatic_indels <- load_Freebayes_vcf("results", "Merged") |> select_indels()
View(Freebayes_somatic)
View(Freebayes_somatic_indels)
fn_var = define_fn(Freebayes_somatic_indels, pick_gt_stdz)
View(fn_var)
colnames(fn_var) = c("POS", "Ground Truth REF", "Ground Truth DP",
"Ground Truth ALT", "Count", "Ground Truth AF", "mut", "type")
final_fn_indels_Freebayes <- function(path, merged_file, pick_gt_stdz){
#function to identify FN indels
Freebayes_somatic_indels <- load_Freebayes_vcf(path, merged_file) |> select_indels()
fn_var = define_fn(Freebayes_somatic_indels, pick_gt_stdz)
colnames(fn_var) = c("POS", "Ground Truth REF", "Ground Truth DP",
"Ground Truth ALT", "Count", "Ground Truth AF", "mut", "type")
return(fn_var)
}
categorize_fns_Freebayes <- function(caller, fn_var) {
#function to identify FN categories
caller$POS = as.numeric(caller$POS)
fn_var$POS = as.numeric(fn_var$POS)
colnames(fn_var) = c("POS","REF", "Ground Truth DP",  "ALT",
"Count", "Ground Truth AF","mut","type")
#Same POS
same_POS <- merge(fn_var, caller, by = c("POS"))
fn_var[, category := ifelse(POS %in% same_POS$POS, "diff REF", "not exist")]
#Same POS & REF
same_POS_REF <- merge(fn_var, caller, by = c("POS", "REF"))
# Update only rows where POS and REF match
fn_var[POS %in% same_POS_REF$POS & REF %in% same_POS_REF$REF,
category := "diff ALT"]
return(fn_var)
}
#FN
call_fn_indels_Freebayes <- function(path, merged_file, pick_gt_stdz){
#function to output categorized FN indels
fn_indels_Freebayes = final_fn_indels_Freebayes(path, merged_file, pick_gt_stdz)
Freebayes_indels = load_Freebayes_vcf(path, merged_file) |> select_indels()
fn_indels_Freebayes_categories = categorize_fns_Freebayes(Freebayes_indels, fn_indels_Freebayes)
return(fn_indels_Freebayes_categories)
}
new_fn = call_fn_indels_Freebayes("results", "Merged")
pick_gt_stdz = gt_stdz_indels("results", "Merged")
new_fn = call_fn_indels_Freebayes("results", "Merged")
new_fn = call_fn_indels_Freebayes("results", "Merged", pick_gt_stdz)
View(new_fn)
install.packages("curl")
BiocManager::install()
#FP
final_fp_indels_Freebayes <- function(path, merged_file, pick_gt, gt_all){
#function to identify FP indels
Freebayes_somatic_indels <- load_Freebayes_vcf(path, merged_file) |> select_indels()
fp_var = fp_snvs_Freebayes(Freebayes_somatic_indels, pick_gt, gt_all)
return(fp_var)
}
categorize_fps_Freebayes <- function(pick_gt_stdz, fp_indels_Freebayes) {
#function to identify FP categories
pick_gt_stdz$POS = as.numeric(pick_gt_stdz$POS)
fp_indels_Freebayes$POS = as.numeric(fp_indels_Freebayes$POS)
colnames(fp_indels_Freebayes) = c("CHROM", "POS", "ID", "REF", "ALT", "Freebayes QUAL",
"Freebayes FILTER", "key", "Indiv", "Freebayes AD",
"Freebayes AF", "Freebayes DP", "gt_F1R2", "gt_F2R1",
"gt_FAD", "gt_GQ", "gt_GT", "gt_PGT", "gt_PID",
"gt_PL" , "gt_PS", "gt_SB", "gt_GT_alleles",
"mut", "Ground Truth DP","DP Percentage", "type")
#Same POS
same_POS <- merge(fp_indels_Freebayes, pick_gt_stdz, by = c("POS"))
fp_indels_Freebayes[, category := ifelse(POS %in% same_POS$POS, "diff REF", "not exist")]
#Same POS & REF
same_POS_REF <- merge(fp_indels_Freebayes, pick_gt_stdz, by = c("POS", "REF"))
# Update only rows where POS and REF match
fp_indels_Freebayes[POS %in% same_POS_REF$POS & REF %in% same_POS_REF$REF,
category := "diff ALT"]
return(fp_indels_Freebayes)
}
call_fp_indels_Freebayes <- function(path, merged_file){
#function to output categorized FP indels
gt_all = load_gt_report_indels(path, merged_file)$all |> standardize_indels()
fp_indels_Freebayes = final_fp_indels_Freebayes(path, merged_file, pick_gt_stdz, gt_all)
fp_indels_Freebayes_categories = categorize_fps_Freebayes(pick_gt_stdz, fp_indels_Freebayes)
return(fp_indels_Freebayes_categories)
}
path = "results"
merged_file = "Merged"
#function to output categorized FP indels
gt_all = load_gt_report_indels(path, merged_file)$all |> standardize_indels()
fp_indels_Freebayes = final_fp_indels_Freebayes(path, merged_file, pick_gt_stdz, gt_all)
View(fp_indels_Freebayes)
colnames(fp_indels_Freebayes)
categorize_fps_Freebayes <- function(pick_gt_stdz, fp_indels_Freebayes) {
#function to identify FP categories
pick_gt_stdz$POS = as.numeric(pick_gt_stdz$POS)
fp_indels_Freebayes$POS = as.numeric(fp_indels_Freebayes$POS)
colnames(fp_indels_Freebayes) = c("CHROM", "POS", "ID", "REF",
"ALT", "Freebayes QUAL", "Freebayes FILTER", "Freebayes DP",
"Freebayes AF", "mut", "Ground Truth DP","DP Percentage", "type")
#Same POS
same_POS <- merge(fp_indels_Freebayes, pick_gt_stdz, by = c("POS"))
fp_indels_Freebayes[, category := ifelse(POS %in% same_POS$POS, "diff REF", "not exist")]
#Same POS & REF
same_POS_REF <- merge(fp_indels_Freebayes, pick_gt_stdz, by = c("POS", "REF"))
# Update only rows where POS and REF match
fp_indels_Freebayes[POS %in% same_POS_REF$POS & REF %in% same_POS_REF$REF,
category := "diff ALT"]
return(fp_indels_Freebayes)
}
fp_indels_Freebayes_categories = categorize_fps_Freebayes(pick_gt_stdz, fp_indels_Freebayes)
new_fp = call_fp_indels_Freebayes("results", "Merged")
colnameddd
call_fp_indels_Freebayes <- function(path, merged_file){
#function to output categorized FP indels
gt_all = load_gt_report_indels(path, merged_file)$all |> standardize_indels()
fp_indels_Freebayes = final_fp_indels_Freebayes(path, merged_file, pick_gt_stdz, gt_all)
fp_indels_Freebayes_categories = categorize_fps_Freebayes(pick_gt_stdz, fp_indels_Freebayes)
return(fp_indels_Freebayes_categories)
}
new_fp = call_fp_indels_Freebayes("results", "Merged")
source("R/libraries.R")
source("R/common_helpers.R")
#source("R/helpers_gatk.R")
source("R/helpers_freebayes.R")
pick_gt_stdz = gt_stdz_indels("results", "Merged")
#------------------------------------------------------------------------------
#TP
final_tp_indels_freebayes <- function(path, merged_file, pick_gt_stdz){
#function to identify TP indels
Freebayes_somatic_indels <- load_Freebayes_vcf(path, merged_file) |> select_indels()
tp_var = define_tp(Freebayes_somatic_indels, pick_gt_stdz)
return(tp_var)
}
tp_indels_freebayes = final_tp_indels_freebayes("results", "Merged", pick_gt_stdz)
#FN
final_fn_indels_Freebayes <- function(path, merged_file, pick_gt_stdz){
#function to identify FN indels
Freebayes_somatic_indels <- load_Freebayes_vcf(path, merged_file) |> select_indels()
fn_var = define_fn(Freebayes_somatic_indels, pick_gt_stdz)
colnames(fn_var) = c("POS", "Ground Truth REF", "Ground Truth DP",
"Ground Truth ALT", "Count", "Ground Truth AF", "mut", "type")
return(fn_var)
}
categorize_fns_Freebayes <- function(caller, fn_var) {
#function to identify FN categories
caller$POS = as.numeric(caller$POS)
fn_var$POS = as.numeric(fn_var$POS)
colnames(fn_var) = c("POS","REF", "Ground Truth DP",  "ALT",
"Count", "Ground Truth AF","mut","type")
#Same POS
same_POS <- merge(fn_var, caller, by = c("POS"))
fn_var[, category := ifelse(POS %in% same_POS$POS, "diff REF", "not exist")]
#Same POS & REF
same_POS_REF <- merge(fn_var, caller, by = c("POS", "REF"))
# Update only rows where POS and REF match
fn_var[POS %in% same_POS_REF$POS & REF %in% same_POS_REF$REF,
category := "diff ALT"]
return(fn_var)
}
call_fn_indels_Freebayes <- function(path, merged_file, pick_gt_stdz){
#function to output categorized FN indels
fn_indels_Freebayes = final_fn_indels_Freebayes(path, merged_file, pick_gt_stdz)
Freebayes_indels = load_Freebayes_vcf(path, merged_file) |> select_indels()
fn_indels_Freebayes_categories = categorize_fns_Freebayes(Freebayes_indels, fn_indels_Freebayes)
return(fn_indels_Freebayes_categories)
}
new_fn = call_fn_indels_Freebayes("results", "Merged", pick_gt_stdz)
#FP
final_fp_indels_Freebayes <- function(path, merged_file, pick_gt, gt_all){
#function to identify FP indels
Freebayes_somatic_indels <- load_Freebayes_vcf(path, merged_file) |> select_indels()
fp_var = fp_snvs_Freebayes(Freebayes_somatic_indels, pick_gt, gt_all)
return(fp_var)
}
categorize_fps_Freebayes <- function(pick_gt_stdz, fp_indels_Freebayes) {
#function to identify FP categories
pick_gt_stdz$POS = as.numeric(pick_gt_stdz$POS)
fp_indels_Freebayes$POS = as.numeric(fp_indels_Freebayes$POS)
colnames(fp_indels_Freebayes) = c("CHROM", "POS", "ID", "REF",
"ALT", "Freebayes QUAL", "Freebayes FILTER", "Freebayes DP",
"Freebayes AF", "mut", "Ground Truth DP","DP Percentage", "type")
#Same POS
same_POS <- merge(fp_indels_Freebayes, pick_gt_stdz, by = c("POS"))
fp_indels_Freebayes[, category := ifelse(POS %in% same_POS$POS, "diff REF", "not exist")]
#Same POS & REF
same_POS_REF <- merge(fp_indels_Freebayes, pick_gt_stdz, by = c("POS", "REF"))
# Update only rows where POS and REF match
fp_indels_Freebayes[POS %in% same_POS_REF$POS & REF %in% same_POS_REF$REF,
category := "diff ALT"]
return(fp_indels_Freebayes)
}
call_fp_indels_Freebayes <- function(path, merged_file){
#function to output categorized FP indels
gt_all = load_gt_report_indels(path, merged_file)$all |> standardize_indels()
fp_indels_Freebayes = final_fp_indels_Freebayes(path, merged_file, pick_gt_stdz, gt_all)
fp_indels_Freebayes_categories = categorize_fps_Freebayes(pick_gt_stdz, fp_indels_Freebayes)
return(fp_indels_Freebayes_categories)
}
new_fp = call_fp_indels_Freebayes("results", "Merged")
rm(tp_indels_freebayes)
new_tp = final_tp_indels_freebayes("results", "Merged", pick_gt_stdz)
View(new_fn)
View(new_fp)
fwrite(
new_tp, paste0("Merged_Freebayes_indels_TP.tsv"),
row.names = FALSE, quote = FALSE, sep = "\t"
)
fwrite(
new_fp, paste0("Merged_Freebayes_indels_FP.tsv"),
row.names = FALSE, quote = FALSE, sep = "\t"
)
fwrite(
new_fn, paste0("Merged_Freebayes_indels_FN.tsv"),
row.names = FALSE, quote = FALSE, sep = "\t"
)
circular_plot_Freebayes <- function(path, merged_file, caller){
#Load data
tp = fread(paste0(path, "/", merged_file, "_", caller, "_indels_TP.tsv"), sep = "\t")
fp = fread(paste0(path, "/", merged_file, "_", caller, "_indels_FP.tsv"), sep = "\t")
fn = fread(paste0(path, "/", merged_file, "_", caller, "_indels_FN.tsv"), sep = "\t")
tp = tp[, .(POS, REF, ALT, type)]
tp$REF_len <- str_length(tp$REF)
tp$ALT_len <- str_length(tp$ALT)
tp$len_dif <- tp$ALT_len - tp$REF_len
tp$category <- "not exist"
fp = fp[, .(POS, REF, ALT, type, category)]
fp$REF_len <- str_length(fp$REF)
fp$ALT_len <- str_length(fp$ALT)
fp$len_dif <- fp$ALT_len - fp$REF_len
fn = fn[, .(POS, REF, ALT, type, category)]
fn$REF_len <- str_length(fn$REF)
fn$ALT_len <- str_length(fn$ALT)
fn$len_dif <- fn$ALT_len - fn$REF_len
#Combine the datasets
data = rbind(tp, fp)
df = rbind(data, fn)
colnames(df) <- c("POS", "REF", "ALT", "Type",  "REF_len", "ALT_len", "len_dif", "Category")
#plot ------------------------------------------------------------------------
#Adjust data so that each type has its own y-offset
df <- df |>
mutate(y_cycle = case_when(
Type == "FN" ~ len_dif + 50,   # Shift FN cycle outward
Type == "FP" ~ len_dif + 25,   # Shift FP cycle to middle
Type == "TP" ~ len_dif         # Keep TP at the center
))
#Ensure 'category' is a factor
df$Category <- factor(df$Category, levels = c("not exist", "diff REF", "diff ALT"))
p <- ggplot(df, aes(x = POS, y = y_cycle)) +
#Lollipop segments: start each from the respective baseline to the point
geom_segment(
aes(x = POS, xend = POS,
y = ifelse(Type == "FN", 50, ifelse(Type == "FP", 25, 0)),
yend = y_cycle),
color = "grey75", linewidth = 0.25, lineend = "round"
) +
#Dashed lines for separation of each cycle level
geom_hline(yintercept = 50, color = "grey40") +
geom_hline(yintercept = 25, color = "grey40") +
geom_hline(yintercept = 0,  color = "grey40") +
# Add points at the end of each segment for the lollipop head
geom_point(aes(fill = Type, color = Type, shape = Category,
size = ifelse(Category == "not exist", 1.5, 3)), # Increase size for specific categories
stroke = .15) +
scale_size_identity() +
#Define specific shapes for each category level
scale_shape_manual(values = c("diff REF" = 23, "diff ALT" = 24, "not exist" = 21)) +
#Define custom colors for each type
scale_fill_manual(values = c("TP" = "#a7b285", "FP" = "#ae8d43", "FN" = "#43ae8d")) +
scale_color_manual(values = c("TP" = "#a7b285", "FP" = "#ae8d43", "FN" = "#43ae8d") |> darken(.25)) +
#Customize the x-axis and radial coordinates
scale_x_continuous(breaks = c(0, 4751, 9503, 14255, 19007), limits = c(0, 19007)) +
coord_radial(start = pi / 2.5, inner.radius = .25, end = 2.6 * pi) +
#Remove legend for size if unnecessary
guides(size = "none") +
#Define minimal theme and other plot aesthetics
theme_minimal() +
theme(
axis.text.y = element_blank(),
panel.grid.major = element_line(linewidth = 0.35),
panel.grid.minor = element_blank(),
plot.margin = margin(20, 20, 20, 20),
plot.title = element_text(size = 15, face = "bold", hjust = 0.5)
) +
#Add labels for the plot
labs(
title = "Ground Truth vs Freebayes INDELS",
y = "REF vs ALT Length Difference",
x = "Chromosomal Position"
# color = "Type"
)
return(p)
}
caller =  "Freebayes"
p = circular_plot_Freebayes <- function(path, merged_file, caller)
q
p = circular_plot_Freebayes(path, merged_file, caller)
p
rm(p())
rm(p
)
p = circular_plot_Freebayes(path, merged_file, caller)
rm(p)
View(circular_plot_Freebayes)
rm(circular_plot_Freebayes())
rm(circular_plot_Freebayes
)
circular_plot_Freebayes <- function(path, merged_file, caller){
#Load data
tp = fread(paste0(path, "/", merged_file, "_", caller, "_indels_TP.tsv"), sep = "\t")
fp = fread(paste0(path, "/", merged_file, "_", caller, "_indels_FP.tsv"), sep = "\t")
fn = fread(paste0(path, "/", merged_file, "_", caller, "_indels_FN.tsv"), sep = "\t")
tp = tp[, .(POS, REF, ALT, type)]
tp$REF_len <- str_length(tp$REF)
tp$ALT_len <- str_length(tp$ALT)
tp$len_dif <- tp$ALT_len - tp$REF_len
tp$category <- "not exist"
fp = fp[, .(POS, REF, ALT, type, category)]
fp$REF_len <- str_length(fp$REF)
fp$ALT_len <- str_length(fp$ALT)
fp$len_dif <- fp$ALT_len - fp$REF_len
fn = fn[, .(POS, REF, ALT, type, category)]
fn$REF_len <- str_length(fn$REF)
fn$ALT_len <- str_length(fn$ALT)
fn$len_dif <- fn$ALT_len - fn$REF_len
#Combine the datasets
data = rbind(tp, fp)
df = rbind(data, fn)
colnames(df) <- c("POS", "REF", "ALT", "Type",  "REF_len", "ALT_len", "len_dif", "Category")
#plot ------------------------------------------------------------------------
#Adjust data so that each type has its own y-offset
df <- df |>
mutate(y_cycle = case_when(
Type == "FN" ~ len_dif + 50,   # Shift FN cycle outward
Type == "FP" ~ len_dif + 25,   # Shift FP cycle to middle
Type == "TP" ~ len_dif         # Keep TP at the center
))
#Ensure 'category' is a factor
df$Category <- factor(df$Category, levels = c("not exist", "diff REF", "diff ALT"))
p <- ggplot(df, aes(x = POS, y = y_cycle)) +
#Lollipop segments: start each from the respective baseline to the point
geom_segment(
aes(x = POS, xend = POS,
y = ifelse(Type == "FN", 50, ifelse(Type == "FP", 25, 0)),
yend = y_cycle),
color = "grey75", linewidth = 0.25, lineend = "round"
) +
#Dashed lines for separation of each cycle level
geom_hline(yintercept = 50, color = "grey40") +
geom_hline(yintercept = 25, color = "grey40") +
geom_hline(yintercept = 0,  color = "grey40") +
# Add points at the end of each segment for the lollipop head
geom_point(aes(fill = Type, color = Type, shape = Category,
size = ifelse(Category == "not exist", 1.5, 3)), # Increase size for specific categories
stroke = .15) +
scale_size_identity() +
#Define specific shapes for each category level
scale_shape_manual(values = c("diff REF" = 23, "diff ALT" = 24, "not exist" = 21)) +
#Define custom colors for each type
scale_fill_manual(values = c("TP" = "#a7b285", "FP" = "#ae8d43", "FN" = "#43ae8d")) +
scale_color_manual(values = c("TP" = "#a7b285", "FP" = "#ae8d43", "FN" = "#43ae8d") |> darken(.25)) +
#Customize the x-axis and radial coordinates
scale_x_continuous(breaks = c(0, 4751, 9503, 14255, 19007), limits = c(0, 19007)) +
coord_radial(start = pi / 2.5, inner.radius = .25, end = 2.6 * pi) +
#Remove legend for size if unnecessary
guides(size = "none") +
#Define minimal theme and other plot aesthetics
theme_minimal() +
theme(
axis.text.y = element_blank(),
panel.grid.major = element_line(linewidth = 0.35),
panel.grid.minor = element_blank(),
plot.margin = margin(20, 20, 20, 20),
plot.title = element_text(size = 15, face = "bold", hjust = 0.5)
) +
#Add labels for the plot
labs(
title = "Ground Truth vs Freebayes INDELS",
y = "REF vs ALT Length Difference",
x = "Chromosomal Position"
# color = "Type"
)
return(p)
}
p = circular_plot_Freebayes(path, merged_file, caller)
path = "results"
merged_file = "Merged"
caller =  "Freebayes"
p = circular_plot_Freebayes(path, merged_file, caller)
p = circular_plot_Freebayes(path, merged_file, caller)
p
source("R/libraries.R")
source("R/common_helpers.R")
#source("R/helpers_gatk.R")
source("R/helpers_VarScan.R")
pick_gt_stdz = gt_stdz_indels("results", "Merged")
new_tp = final_tp_indels_VarSca("results", "Merged", pick_gt_stdz)
new_tp = final_tp_indels_VarScan("results", "Merged", pick_gt_stdz)
new_fn = call_fn_indels_VarScan("results", "Merged", pick_gt_stdz)
path = "results"
merged_file = "Merged"
caller =  "Freebayes"
#function to output categorized FP indels
gt_all = load_gt_report_indels(path, merged_file)$all |> standardize_indels()
fp_indels_Freebayes = final_fp_indels_Freebayes(path, merged_file, pick_gt_stdz, gt_all)
fp_indels_VarScan = final_fp_indels_VarScan(path, merged_file, pick_gt_stdz, gt_all)
View(fp_indels_VarScan)
colnames(fp_indels_VarScan)
new_fp = call_fp_indels_VarScan("results", "Merged")
source("R/libraries.R")
source("R/common_helpers.R")
#source("R/helpers_gatk.R")
source("R/helpers_VarScan.R")
pick_gt_stdz = gt_stdz_indels("results", "Merged")
new_tp = final_tp_indels_VarScan("results", "Merged", pick_gt_stdz)
new_fn = call_fn_indels_VarScan("results", "Merged", pick_gt_stdz)
new_fp = call_fp_indels_VarScan("results", "Merged", pick_gt_stdz)
path = "results"
merged_file = "Merged"
caller =  "VarDIct"
path = "results"
merged_file = "Merged"
caller =  "VarDict"
source("R/libraries.R")
source("R/common_helpers.R")
#source("R/helpers_gatk.R")
source("R/helpers_VarDict.R")
pick_gt_stdz = gt_stdz_indels("results", "Merged")
#function to output categorized FP indels
gt_all = load_gt_report_indels(path, merged_file)$all |> standardize_indels()
fp_indels_VarDict = final_fp_indels_VarDict(path, merged_file, pick_gt_stdz, gt_all)
fp_indels_VarDict = final_fp_indels_VarDict(path, merged_file, pick_gt_stdz, gt_all)
#source("R/helpers_gatk.R")
source("R/helpers_VarDict.R")
fp_indels_VarDict = final_fp_indels_VarDict(path, merged_file, pick_gt_stdz, gt_all)
View(fp_indels_VarDict)
colnames(fp_indels_VarDict)
source("R/libraries.R")
source("R/common_helpers.R")
#source("R/helpers_gatk.R")
source("R/helpers_LoFreq.R")
pick_gt_stdz = gt_stdz_indels("results", "Merged")
path = "results"
merged_file = "Merged"
caller =  "LoFreq"
#function to output categorized FP indels
gt_all = load_gt_report_indels(path, merged_file)$all |> standardize_indels()
fp_indels_LoFreq = final_fp_indels_LoFreq(path, merged_file, pick_gt_stdz, gt_all)
View(fp_indels_VarDict)
colnames(fp_indels_VarDict)
