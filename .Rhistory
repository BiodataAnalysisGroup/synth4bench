}
# fwrite(
#     aln, paste0(folder, file, "/", file, "_position_report.csv"),
#     row.names = FALSE, quote = TRUE, sep = ","
# )
explore_mut_pos <- function(runs, folder, caller) {
found = list()
not_found = list()
for (file in seq_len(runs)){
#file= "1"
message(paste0("working on file ", file))
# input parameters --------------------------------------------------------
qv = paste0(folder, "/Ground_truth_vs_", caller, ".clean_norm.tsv")
gb = paste0(folder, file, "/", file, "_position_report2.csv")
# golden alignments -------------------------------------------------------
gb = gb |> fread()
gb$key = paste(gb$pos_chromosomal, gb$REF, gb$ALT, sep = ":")
# VarScan missing variants ----------------------
qv = qv |> fread()
qv$key = paste(qv$POS, qv$`Ground Truth REF`, qv$`Ground Truth ALT`, sep = ":")
# filtering common mutations ----------------------------
gb_filtered = gb[which(key %in% qv$key)]
qv_filtered = qv[which(key %in% gb_filtered$key)]
q1 = qv_filtered[which(is.na(`VarScan AF`))]
q2 = gb_filtered[which(key %in% q1$key)]
q2$bin = floor(q2$pos_read / 10) + 1
q2 = q2[order(q2$bin), ]
q2$Found = "No"
not_found[[file]] = q2
# fwrite(
#     q2, paste0(folder, file, "/", file, "_VarScan_read_pos_bins_not_found.tsv"),
#     row.names = FALSE, quote = FALSE, sep = "\t"
# )
#boxplot-------------------------------------------------------------------
#q2$bin = paste0("bin", q2$bin)
#q2$bin = q2$bin |> factor(levels = unique(q2$bin))
#gr1 = ggplot(data = q2) +
# geom_point(aes(x = `bin`, y = `No. of sequences`, color = `bin`))
#   geom_violin(aes(x = bin, y = `No. of sequences`, fill = bin)) +
#   ggtitle("Not Found")
#ggsave(
#    plot = gr1, filename = paste0(folder, file, "/", file, "_Box_plots_not_found.jpeg"),
#    width = 8, height = 8, units = "in", dpi = 600
#)
#FOUND---------------------------------------------------------------------
q1 = qv_filtered[which(!is.na(`VarScan AF`))]
q2 = gb_filtered[which(key %in% q1$key)]
q2$bin = floor(q2$pos_read / 10) + 1
q2 = q2[order(q2$bin), ]
q2$Found = "Yes"
found[[file]] = q2
# fwrite(
#     q2, paste0(folder, file, "/", file, "_VarScan_read_pos_bins_found.tsv"),
#     row.names = FALSE, quote = FALSE, sep = "\t"
# )
#q2$bin = paste0("bin", q2$bin)
#q2$bin = q2$bin |> factor(levels = unique(q2$bin))
#gr1 = ggplot(data = q2) +
#   geom_violin(aes(x = bin, y = `No. of sequences`, fill = bin)) +
#  ggtitle("Found")
# ggsave(
#    plot = gr1, filename = paste0(folder, file, "/", file, "_Box_plots_found.jpeg"),
#     width = 8, height = 8, units = "in", dpi = 600
# )
}
found = found |> rbindlist(idcol = "Run")
not_found = not_found |> rbindlist(idcol = "Run")
out = rbind(found, not_found)
return(out)
}
gsub('Rscripts', '', getwd())
knitr::opts_chunk$set(echo = F)
knitr::opts_chunk$set(results = 'asis')
library(dplyr)
library(rstatix)
library(ggplot2)
library(pROC)
library(cutpointr)
library(glmnet)
library(caret)
myfile_wd = gsub('Rscripts', 'Desktop/', getwd())
df = read.csv(paste0(myfile_wd, '1000_100_10_All_Freebayes_read_pos_bins_report.csv'))
# myfile_wd = gsub('Rscripts', 'Desktop/', getwd())
df = read.csv('1000_100_10_All_Freebayes_read_pos_bins_report.csv')
# myfile_wd = gsub('Rscripts', 'Desktop/', getwd())
df = read.csv('1000_100_10_All_Freebayes_position_report.csv')
colnames(df)[6] = 'sequences'
df$ref_alt = paste(df$REF, df$ALT)
df$outcome = ifelse(df$Found == 'Yes', 1, 0)
tmp = df %>%
select(REF, ALT, bin, Found) %>%
gather(., key = 'RiskFactor', value = 'RF_Value', -Found) %>%
freq_table(RiskFactor, RF_Value, Found) %>%
mutate(
result = paste0(n, ' (', prop, '%', ')')
) %>%
select(-n, -prop) %>%
spread(., key = 'Found', value = 'result')
tmp$p_value = NA
tmp$p_value[which(tmp$RiskFactor == 'REF')] = chisq.test(df$Found, df$REF)$p.value
tmp$p_value[which(tmp$RiskFactor == 'ALT')] = chisq.test(df$Found, df$ALT)$p.value
a = glm(ifelse(Found == 'Yes', 1, 0) ~ bin, data = df, family = 'binomial') %>%
summary() %>%
coefficients()
tmp$p_value[which(tmp$RiskFactor == 'bin')] = a[2,4]
tmp$p_value = ifelse(
tmp$p_value < 0.001,
'<0.001',
as.character(round(tmp$p_value, 3))
)
tmp$p_value[which(duplicated(tmp$RiskFactor))] = ''
knitr::kable(tmp)
df_long = df %>%
select(pos_chromosomal, pos_read, sequences, Found) %>%
gather(., key = 'RiskFactor', value = 'RF_Value', -Found)
ggplot(data = df_long,
aes(
x = as.factor(Found),
fill = as.factor(Found),
y = RF_Value)) +
geom_boxplot() +
labs(
fill = 'Found',
x = 'Found') +
facet_wrap(~RiskFactor, scales = 'free_y')
tmp = df %>%
select(pos_chromosomal, pos_read, sequences, Found) %>%
group_by(Found) %>%
get_summary_stats() %>%
select(-iqr, -mad, -se, -ci, -min, -max) %>%
arrange(variable) %>%
rename('RiskFactor' = 'variable')
tmp$p_value = NA
a = glm(ifelse(Found == 'Yes', 1, 0) ~ pos_chromosomal, data = df, family = 'binomial') %>%
summary() %>%
coefficients()
tmp$p_value[which(tmp$RiskFactor == 'pos_chromosomal')] = a[2,4]
a = glm(ifelse(Found == 'Yes', 1, 0) ~ pos_read, data = df, family = 'binomial') %>%
summary() %>%
coefficients()
tmp$p_value[which(tmp$RiskFactor == 'pos_read')] = a[2,4]
a = glm(ifelse(Found == 'Yes', 1, 0) ~ sequences, data = df, family = 'binomial') %>%
summary() %>%
coefficients()
tmp$p_value[which(tmp$RiskFactor == 'sequences')] = a[2,4]
tmp$p_value = ifelse(
tmp$p_value < 0.001,
'<0.001',
as.character(round(tmp$p_value, 3))
)
tmp$p_value[which(duplicated(tmp$RiskFactor))] = ''
knitr::kable(tmp)
df_scale = df %>%
select(outcome, pos_chromosomal, sequences, pos_read) %>%
mutate_at(c('pos_chromosomal', 'pos_read', 'sequences'), scale)
tmp = matrix(nrow = 3, ncol = 5) %>%
as.data.frame()
colnames(tmp) = c('RiskFactor', 'optimal_cutpoint', 'acc', 'sensitivity', 'specificity')
cutpointr(df_scale,
x = pos_chromosomal,
class = outcome,
pos_class = 1,
neg_class = 0,
method = maximize_metric,
metric = youden) -> cp
a = summary(cp)
tmp[1, ]= a$cutpointr %>%
as.data.frame() %>%
mutate(RiskFactor = 'pos_chromosomal') %>%
select(all_of(colnames(tmp)))
cat('Pos_Chromosomal')
plot(cp)
cutpointr(df_scale,
x = pos_read,
class = outcome,
pos_class = 1,
neg_class = 0,
method = maximize_metric,
metric = youden) -> cp
a = summary(cp)
tmp[2, ]= a$cutpointr %>%
as.data.frame() %>%
mutate(RiskFactor = 'pos_read') %>%
select(all_of(colnames(tmp)))
cat('Pos_read')
plot(cp)
cutpointr(df_scale,
x = sequences,
class = outcome,
pos_class = 1,
neg_class = 0,
method = maximize_metric,
metric = youden) -> cp
a = summary(cp)
tmp[3, ]= a$cutpointr %>%
as.data.frame() %>%
mutate(RiskFactor = 'sequences') %>%
select(all_of(colnames(tmp)))
cat('Number of Sequences')
plot(cp)
knitr::kable(tmp)
library(data.table)
library(stringr)
library(vcfR)
library(ggplot2)
library(ggforce)
library(ggsci)
library(ggvenn)
library(patchwork)
library(optparse)
library(GenomicAlignments)
library(Rsamtools)
library(seqinr)
install.packages("data.table", dependencies=TRUE)
out_df <- read_vcf("C:/Users/sfragkoul/Desktop/synth4bench/results", "freebayes", gt, "Merged_auto")
out_df <- read_vcf("C:/Users/sfragkoul/Desktop/synth4bench/results", "freebayes", gt)
#!/usr/bin/env Rscript
source("libraries.R")
source("common_helpers.R")
source("helpers_freebayes.R")
out_df <- read_vcf("C:/Users/sfragkoul/Desktop/synth4bench/results", "freebayes", gt)
out_df <- read_vcf("C:/Users/sfragkoul/Desktop/synth4bench/results", "freebayes", gt, "Merged_auto")
View(out_df)
paste0("C:/Users/sfragkoul/Desktop/synth4bench/results", "/", "Merged_auto", "Ground_truth_vs_", "freebayes", ".clean_norm.tsv")
paste0("C:/Users/sfragkoul/Desktop/synth4bench/results", "/", "Merged_auto", "_Ground_truth_vs_", "freebayes", ".clean_norm.tsv")
fwrite(
out_df, paste0("C:/Users/sfragkoul/Desktop/synth4bench/results", "/", "Merged_auto", "_Ground_truth_vs_", "freebayes", ".clean_norm.tsv"),
row.names = FALSE, quote = FALSE, sep = "\t"
)
source("helpers_gatk.R")
out_df <- read_vcf("C:/Users/sfragkoul/Desktop/synth4bench/results", "Mutect2", gt, "Merged_auto")
#!/usr/bin/env Rscript
source("libraries.R")
source("common_helpers.R")
source("helpers_freebayes.R")
source("helpers_gatk.R")
#source("helpers_LoFreq.R")
#source("helpers_VarDict.R")
#source("helpers_VarScan.R")
out_df <- read_vcf("C:/Users/sfragkoul/Desktop/synth4bench/results", "Mutect2", gt, "Merged_auto")
out_df <- read_vcf("C:/Users/sfragkoul/Desktop/synth4bench/results", "Mutect2", gt, "Merged_auto")
out_df <- read_vcf("C:/Users/sfragkoul/Desktop/synth4bench/results", "Mutect2", gt, "Merged_auto")
gt <- gt_analysis(5, "C:/Users/sfragkoul/Desktop/synth4bench/results", "Merged_auto")
out_df <- read_vcf("C:/Users/sfragkoul/Desktop/synth4bench/results", "freebayes", gt, "Merged_auto")
out_df <- read_vcf("C:/Users/sfragkoul/Desktop/synth4bench/results", "Mutect2", gt, "Merged_auto")
read_vcf <- function(path, caller, gt, merged_file) {
if(caller == "freebayes") {
vcf_df <- read_vcf_freebayes(path, gt, merged_file)
} else if (caller == "Mutect2") {
vcf_df <- read_vcf_mutect2(path, gt)
} else if (caller == "LoFreq") {
vcf_df <- read_vcf_LoFreq(path, gt)
} else if (caller == "VarDict") {
vcf_df <- read_vcf_VarDict(path, gt)
} else if (caller == "VarScan") {
vcf_df <- read_vcf_VarScan(path, gt)
}
return(vcf_df)
}
out_df <- read_vcf("C:/Users/sfragkoul/Desktop/synth4bench/results", "Mutect2", gt, "Merged_auto")
out_df <- read_vcf("C:/Users/sfragkoul/Desktop/synth4bench/results", "freebayes", gt, "Merged_auto")
out_df <- read_vcf("C:/Users/sfragkoul/Desktop/synth4bench/results", "Mutect2", gt, "Merged_auto")
out_df <- read_vcf("C:/Users/sfragkoul/Desktop/synth4bench/results", "Mutect2", gt, "Merged_auto")
out_df <- read_vcf("C:/Users/sfragkoul/Desktop/synth4bench/results", "Mutect2", gt, "Merged_auto")
paste0(path, "/", merged_file, "_mutect2_norm.vcf")
paste0("C:/Users/sfragkoul/Desktop/synth4bench/results", "/", "Merged_auto", "_mutect2_norm.vcf")
paste0("C:/Users/sfragkoul/Desktop/synth4bench/results", "/", "Merged_auto", "_Mutect2_norm.vcf")
out_df <- read_vcf("C:/Users/sfragkoul/Desktop/synth4bench/results", "Mutect2", gt, "Merged_auto")
vcf <- read.vcfR(paste0("C:/Users/sfragkoul/Desktop/synth4bench/results", "/", "Merged_auto", "_mutect2_norm.vcf"), verbose = FALSE )
remove(vcf)
vcf <- read.vcfR(paste0("C:/Users/sfragkoul/Desktop/synth4bench/results", "/", "Merged_auto", "_mutect2_norm.vcf"), verbose = FALSE )
remove(vcf)
remove(out_df)
out_df <- read_vcf("C:/Users/sfragkoul/Desktop/synth4bench/results", "freebayes", gt, "Merged_auto")
#!/usr/bin/env Rscript
source("libraries.R")
source("common_helpers.R")
source("helpers_freebayes.R")
source("helpers_gatk.R")
#source("helpers_LoFreq.R")
out_df <- read_vcf("C:/Users/sfragkoul/Desktop/synth4bench/results", "freebayes", gt, "Merged_auto")
fwrite(
out_df, paste0("C:/Users/sfragkoul/Desktop/synth4bench/results", "/", "Merged_auto", "_Ground_truth_vs_", "Mutect2", ".clean_norm.tsv"),
row.names = FALSE, quote = FALSE, sep = "\t"
)
remove(out_df)
out_df <- read_vcf("C:/Users/sfragkoul/Desktop/synth4bench/results", "LoFreq", gt, "Merged_auto")
source("helpers_freebayes.R")
source("helpers_gatk.R")
source("helpers_LoFreq.R")
source("helpers_VarDict.R")
source("helpers_VarScan.R")
out_df <- read_vcf("C:/Users/sfragkoul/Desktop/synth4bench/results", "LoFreq", gt, "Merged_auto")
fwrite(
out_df, paste0("C:/Users/sfragkoul/Desktop/synth4bench/results", "/", "Merged_auto", "_Ground_truth_vs_", "LoFreq", ".clean_norm.tsv"),
row.names = FALSE, quote = FALSE, sep = "\t"
)
remove(out_df)
out_df <- read_vcf("C:/Users/sfragkoul/Desktop/synth4bench/results", "VarScan", gt, "Merged_auto")
fwrite(
out_df, paste0("C:/Users/sfragkoul/Desktop/synth4bench/results", "/", "Merged_auto", "_Ground_truth_vs_", "VarScan", ".clean_norm.tsv"),
row.names = FALSE, quote = FALSE, sep = "\t"
)
remove(out_df)
out_df <- read_vcf("C:/Users/sfragkoul/Desktop/synth4bench/results", "VarDict", gt, "Merged_auto")
fwrite(
out_df, paste0("C:/Users/sfragkoul/Desktop/synth4bench/results", "/", "Merged_auto", "_Ground_truth_vs_", "VarDict", ".clean_norm.tsv"),
row.names = FALSE, quote = FALSE, sep = "\t"
)
#!/usr/bin/env Rscript
source("libraries.R")
source("common_helpers.R")
source("helpers_freebayes.R")
source("helpers_gatk.R")
source("helpers_LoFreq.R")
source("helpers_VarDict.R")
source("helpers_VarScan.R")
plots <- plot_synth4bench(C:/Users/sfragkoul/Desktop/synth4bench/results/Merged_auto_Ground_truth_vs_Freebayes.clean_norm.tsv, C:/Users/sfragkoul/Desktop/synth4bench/results, C:/Users/sfragkoul/Desktop/synth4bench/results, "Freebayes")
plots <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results/Merged_auto_Ground_truth_vs_Freebayes.clean_norm.tsv", "C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "Freebayes")
df = fread( "C:/Users/sfragkoul/Desktop/synth4bench/results/Merged_auto_Ground_truth_vs_Freebayes.clean_norm.tsv" )
remove(df)
plots <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "Freebayes")
#!/usr/bin/env Rscript
source("libraries.R")
source("common_helpers.R")
source("helpers_freebayes.R")
source("helpers_gatk.R")
source("helpers_LoFreq.R")
source("helpers_VarDict.R")
source("helpers_VarScan.R")
plots <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "Freebayes")
plots <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "Freebayes", "Merged_auto")
df = fread( "C:/Users/sfragkoul/Desktop/synth4bench/results/Merged_auto_Ground_truth_vs_Freebayes.clean_norm.tsv" )
vcf_GT <- read.vcfR("C:/Users/sfragkoul/Desktop/synth4bench/results/Merged_auto_ground_truth_norm.vcf"), verbose = FALSE )
vcf_GT <- read.vcfR("C:/Users/sfragkoul/Desktop/synth4bench/results/Merged_auto_ground_truth_norm.vcf", verbose = FALSE )
vcf_caller <- read.vcfR("C:/Users/sfragkoul/Desktop/synth4bench/results/Merged_auto_freebayes_norm.vcf", verbose = FALSE )
plots <- plot_synth4bench_freebayes(df, vcf_GT, vcf_caller)
out1 = bar_plots_freebayes(df)
out2 = density_plot_freebayes(df)
out3 = bubble_plots_freebayes(df)
out4 = venn_plot_freebayes(vcf_read_GT, vcf_read_freebayes)
out4 = venn_plot_freebayes(vcf_GT, vcf_caller)
#!/usr/bin/env Rscript
source("libraries.R")
source("common_helpers.R")
source("helpers_freebayes.R")
source("helpers_gatk.R")
source("helpers_LoFreq.R")
source("helpers_VarDict.R")
source("helpers_VarScan.R")
plots <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "Freebayes", "Merged_auto")
df = fread( "C:/Users/sfragkoul/Desktop/synth4bench/results/Merged_auto_Ground_truth_vs_Freebayes.clean_norm.tsv" )
vcf_GT <- read.vcfR("C:/Users/sfragkoul/Desktop/synth4bench/results/Merged_auto_ground_truth_norm.vcf", verbose = FALSE )
vcf_caller <- read.vcfR("C:/Users/sfragkoul/Desktop/synth4bench/results/Merged_auto_freebayes_norm.vcf", verbose = FALSE )
out1 = bar_plots_freebayes(df)
out2 = density_plot_freebayes(df)
out3 = bubble_plots_freebayes(df)
out4 = venn_plot_freebayes(vcf_GT, vcf_caller)
multi2 = out2$groundtruth / out2$Freebayes &
theme(
plot.margin = margin(10, 10, 10, 10)
)
ann1 = (out1$coverage + theme(plot.margin = margin(r = 50))) +
(out1$allele + theme(plot.margin = margin(r = 50))) +
multi2 +
plot_layout(
widths = c(1, 1, 3)
)
ann2 = out3 + out4 +
plot_layout(
widths = c(2, 1)
)
multi = ann1 / ann2 +
plot_layout(heights = c(1.5, 1)) +
plot_annotation(title = folder)
multi = ann1 / ann2 +
plot_layout(heights = c(1.5, 1)) +
plot_annotation(title = "Freebayes")
plot_synth4bench_freebayes <- function(df, vcf_GT, vcf_caller) {
out1 = bar_plots_freebayes(df)
out2 = density_plot_freebayes(df)
out3 = bubble_plots_freebayes(df)
out4 = venn_plot_freebayes(vcf_GT, vcf_caller)
multi2 = out2$groundtruth / out2$Freebayes &
theme(
plot.margin = margin(10, 10, 10, 10)
)
ann1 = (out1$coverage + theme(plot.margin = margin(r = 50))) +
(out1$allele + theme(plot.margin = margin(r = 50))) +
multi2 +
plot_layout(
widths = c(1, 1, 3)
)
ann2 = out3 + out4 +
plot_layout(
widths = c(2, 1)
)
multi = ann1 / ann2 +
plot_layout(heights = c(1.5, 1)) +
plot_annotation(title = "Freebayes")
return(list(multi, out4))
}
plots <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "Freebayes", "Merged_auto")
dir.create(paste0(arguments$working_directory, "/Plots"))
dir.create(paste0("C:/Users/sfragkoul/Desktop/synth4bench/results", "/Plots"))
ggsave(
plot = multi, filename = paste0("C:/Users/sfragkoul/Desktop/synth4bench/results", "/Plots/Poster_", "Freebayes", ".png"),
width = 16, height = 12, units = "in", dpi = 600
)
#!/usr/bin/env Rscript
source("libraries.R")
source("common_helpers.R")
source("helpers_freebayes.R")
source("helpers_gatk.R")
source("helpers_LoFreq.R")
source("helpers_VarDict.R")
source("helpers_VarScan.R")
plots <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "Freebayes", "Merged_auto")
plots <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results",
"C:/Users/sfragkoul/Desktop/synth4bench/results",
"C:/Users/sfragkoul/Desktop/synth4bench/results",
"Freebayes",
"Merged_auto")
plots <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results",
"C:/Users/sfragkoul/Desktop/synth4bench/results",
"C:/Users/sfragkoul/Desktop/synth4bench/results",
"Freebayes")
plots <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results",
"C:/Users/sfragkoul/Desktop/synth4bench/results",
"C:/Users/sfragkoul/Desktop/synth4bench/results",
"Freebayes",
"Merged_auto")
plots <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results",
"C:/Users/sfragkoul/Desktop/synth4bench/results",
"C:/Users/sfragkoul/Desktop/synth4bench/results",
"Freebayes",
"Merged_auto")
plots <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results",
"C:/Users/sfragkoul/Desktop/synth4bench/results",
"C:/Users/sfragkoul/Desktop/synth4bench/results",
"Freebayes",
"Merged_auto")
plots <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results",
"C:/Users/sfragkoul/Desktop/synth4bench/results",
"C:/Users/sfragkoul/Desktop/synth4bench/results",
"Freebayes",
"Merged_auto")
plots <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results",
"C:/Users/sfragkoul/Desktop/synth4bench/results",
"C:/Users/sfragkoul/Desktop/synth4bench/results",
"Freebayes",
"Merged_auto")
#!/usr/bin/env Rscript
source("libraries.R")
source("common_helpers.R")
source("helpers_freebayes.R")
source("helpers_gatk.R")
source("helpers_LoFreq.R")
source("helpers_VarDict.R")
source("helpers_VarScan.R")
plots <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results",
"C:/Users/sfragkoul/Desktop/synth4bench/results",
"C:/Users/sfragkoul/Desktop/synth4bench/results",
"Freebayes",
"Merged_auto")
plots <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "Freebayes", "Merged_auto")
View(plot_synth4bench)
plots <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "Freebayes", "Merged_auto")
plots <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "Freebayes", "Merged_auto")
plots <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "Freebayes", "Merged_auto")
plots <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "Freebayes", "Merged_auto")
data <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "Freebayes", "Merged_auto")
data <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "Freebayes", "Merged_auto")
plots <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "Freebayes", "Merged_auto")
plots <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "Freebayes", "Merged_auto")
plots <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "Freebayes", "Merged_auto")
df <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "Freebayes", "Merged_auto")
plots <- plot_synth4bench(arguments$gt_comparison, arguments$vcf_path, arguments$gt_path, arguments$caller, arguments$merged_file)
df <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "Freebayes", "Merged_auto")
plots <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "Freebayes", "Merged_auto")
plots <- plot_synth4bench(arguments$gt_comparison, arguments$vcf_path, arguments$gt_path, arguments$caller, arguments$merged_file)
folder = 'results/'
name = "Merged"
mutect = fread(paste0(folder, "Merged_Mutect2_snvs_FP.tsv"))
setwd("C:/Users/sfragkoul/Desktop/synth4bench")
folder = 'results/'
name = "Merged"
mutect = fread(paste0(folder, "Merged_Mutect2_snvs_FP.tsv"))
source("R/libraries.R")
folder = 'results/'
name = "Merged"
mutect = fread(paste0(folder, "Merged_Mutect2_snvs_FP.tsv"))
update.packages(ask = FALSE, checkBuilt = TRUE)
source("R/libraries.R")
source("R/libraries.R")
BiocManager::install("appreci8R")
library(appreci8R)
?normalize()
install.packages(c("quantreg", "Seurat", "SeuratObject"))
install.packages(c("quantreg", "Seurat", "SeuratObject"))
source("R/libraries.R")
library(appreci8R)
?normzalize()
?normalize()
gt_indels_sub = gt_indels[1:10, ]
View(gt_indels_sub)
Mutect2_indels <-select_indels(Mutect2_somatic)
Mutect2_indels_sub = Mutect2_indels[1:10, ]
View(Mutect2_indels_sub)
gt_indels_sub = gt_indels[1:20, ]
Mutect2_indels_sub = Mutect2_indels[1:20, ]
BiocManager::install()
