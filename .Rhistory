library(keras)
library(tensorflow)
library(reticulate)
install_tensorflow(envname = "r-tensorflow")
keras::install_keras()
install_tensorflow()
library(VAExprs)
#library(keras)
#library(tensorflow)
library(reticulate)
install_tensorflow()
library(keras)
library(tensorflow)
library(reticulate)
library(VAExprs)
library(keras)
library(tensorflow)
library(reticulate)
### simulate differentially expressed genes
set.seed(1)
g <- 3
n <- 100
m <- 1000
mu <- 5
sigma <- 5
mat <- matrix(rnorm(n*m*g, mu, sigma), m, n*g)
rownames(mat) <- paste0("gene", seq_len(m))
colnames(mat) <- paste0("cell", seq_len(n*g))
group <- factor(sapply(seq_len(g),
function(x) { rep(paste0("group", x), n)}
))
names(group) <- colnames(mat)
mu_upreg <- 6
sigma_upreg <- 10
deg <- 100
for (i in seq_len(g)) {
mat[(deg*(i-1) + 1):(deg*i), group == paste0("group", i)] <-
mat[1:deg, group==paste0("group", i)] + rnorm(deg, mu_upreg, sigma_upreg)
}
# positive expression only
mat[mat < 0] <- 0
x_train <- as.matrix(t(mat))
# heatmap
heatmap(mat, Rowv = NA, Colv = NA,
col = colorRampPalette(c('green', 'red'))(100),
scale = "none")
# model parameters
batch_size <- 32
original_dim <- 1000
intermediate_dim <- 512
epochs <- 100
# VAE
vae_result <- fit_vae(x_train = x_train, x_val = x_train,
encoder_layers = list(layer_input(shape = c(original_dim)),
layer_dense(units = intermediate_dim,
activation = "relu")),
decoder_layers = list(layer_dense(units = intermediate_dim,
activation = "relu"),
layer_dense(units = original_dim,
activation = "sigmoid")),
epochs = epochs, batch_size = batch_size,
use_generator = FALSE,
callbacks = keras::callback_early_stopping(
monitor = "val_loss",
patience = 10,
restore_best_weights = TRUE))
install_tensorflow()
install.packages("keras")
install_keras(Tensorflow = "1.13.1",
restart_session = FALSE
)
library(tensorflow)
library(VAExprs)
library(keras)
library(tensorflow)
library(reticulate)
### simulate differentially expressed genes
set.seed(1)
g <- 3
n <- 100
m <- 1000
mu <- 5
sigma <- 5
mat <- matrix(rnorm(n*m*g, mu, sigma), m, n*g)
rownames(mat) <- paste0("gene", seq_len(m))
colnames(mat) <- paste0("cell", seq_len(n*g))
group <- factor(sapply(seq_len(g),
function(x) { rep(paste0("group", x), n)}
))
names(group) <- colnames(mat)
mu_upreg <- 6
sigma_upreg <- 10
deg <- 100
for (i in seq_len(g)) {
mat[(deg*(i-1) + 1):(deg*i), group == paste0("group", i)] <-
mat[1:deg, group==paste0("group", i)] + rnorm(deg, mu_upreg, sigma_upreg)
}
# positive expression only
mat[mat < 0] <- 0
x_train <- as.matrix(t(mat))
# heatmap
heatmap(mat, Rowv = NA, Colv = NA,
col = colorRampPalette(c('green', 'red'))(100),
scale = "none")
# model parameters
batch_size <- 32
original_dim <- 1000
intermediate_dim <- 512
epochs <- 100
# VAE
vae_result <- fit_vae(x_train = x_train, x_val = x_train,
encoder_layers = list(layer_input(shape = c(original_dim)),
layer_dense(units = intermediate_dim,
activation = "relu")),
decoder_layers = list(layer_dense(units = intermediate_dim,
activation = "relu"),
layer_dense(units = original_dim,
activation = "sigmoid")),
epochs = epochs, batch_size = batch_size,
use_generator = FALSE,
callbacks = keras::callback_early_stopping(
monitor = "val_loss",
patience = 10,
restore_best_weights = TRUE))
restart_session
restart_session()
install.packages("remotes")
remotes::install_github("rstudio/tensorflow")
remotes::install_github("rstudio/tensorflow")
library(tensorflow)
install_tensorflow(version = "2.0.0b1", method = "conda", envname = "r-reticulate")
library(reticulate)
install_tensorflow(version = "2.0.0b1", method = "conda", envname = "r-reticulate")
library(reticulate)
path_to_python <- install_python()
virtualenv_create("r-tensorflow", python = path_to_python)
library(tensorflow)
install_tensorflow(envname = "r-tensorflow")
use_virtualenv("r-tensorflow")
detach("package:base", unload = TRUE)
library(base, lib.loc = "C:/Program Files/R/R-4.4.1/library")
library(appreci8R)
library(data.table)
install.packages(c("stringr", "data.table", "vcfR", "ggplot2", "ggvenn", "ggforce", "ggsci", "patchwork"))
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("appreci8R")
BiocManager::install("GenomicRanges")
BiocManager::install("GenomicRanges")
library(GenomicRanges)
library(GenomicRanges)
library(data.table)
library(stringr)
library(vcfR)
library(ggplot2)
library(ggforce)
library(ggsci)
library(ggvenn)
library(patchwork)
library(optparse)
library(GenomicAlignments)
library(Rsamtools)
library(seqinr)
BiocManager::install()
BiocManager::install()
BiocManager::install()
BiocManager::install()
BiocManager::install()
BiocManager::install()
install.packages(c("ape", "shiny"))
BiocManager::install()
install.packages(c("BH", "openssl", "pillar"))
BiocManager::install()
BiocManager::install()
BiocManager::install()
BiocManager::install()
BiocManager::install()
install.packages(c("curl", "XML"))
BiocManager::install()
BiocManager::install()
install.packages("rpart", lib="C:/Program Files/R/R-4.4.1/library")
BiocManager::install()
install.packages(c("matrixStats", "pillar", "xfun"))
BiocManager::install()
BiocManager::install()
install.packages("openssl")
BiocManager::install()
install.packages(c("evaluate", "Rcpp"))
BiocManager::install()
BiocManager::install()
BiocManager::install()
BiocManager::install()
BiocManager::install()
BiocManager::install()
install.packages(c("bit64", "systemfonts"))
install.packages(c("httr2", "rlang"))
BiocManager::install()
install.packages("systemfonts")
#runs = c(1,2,3,4,5,6,7,8,9,10)
folder = "D:/sfragkoul/Synth_Data/Synthesizers/NEAT/testing/TP53/coverage_test/300_30_10"
merged_file = "Merged"
BiocManager::install()
BiocManager::install()
source("R/libraries.R")
BiocManager::install()
BiocManager::install()
install.packages(c("ade4", "cli", "R6"))
BiocManager::install()
BiocManager::install()
BiocManager::install()
BiocManager::install()
BiocManager::install()
install.packages("admisc")
BiocManager::install()
BiocManager::install()
install.packages(c("fs", "ps", "rlang", "sass"))
BiocManager::install()
install.packages(c("httpuv", "tinytex", "writexl"))
source("R/libraries.R")
setwd("C:/Users/sfragkoul/Desktop/synth4bench")
source("R/libraries.R")
path <- "C:/Users/sfragkoul/Desktop/synth_data/coverage_test/5000_500_10"
merged_file <- "Merged"
output_file <- file.path(path,
paste0(merged_file, "_snvs_TV.tsv"))
gt <- fread(output_file)
source("R/libraries.R")
path <- "C:/Users/sfragkoul/Desktop/synth_data/coverage_test/5000_500_10"
merged_file <- "Merged"
output_file <- file.path(path,
paste0(merged_file, "_snvs_TV.tsv"))
gt <- fread(output_file)
View(gt)
unique(gt$mut)
length(unique(gt$mut))
source("R/libraries.R")
path <- "C:/Users/sfragkoul/Desktop/synth_data/coverage_test/300_30_10"
merged_file <- "Merged"
output_file <- file.path(path,
paste0(merged_file, "_snvs_TV.tsv"))
gt <- fread(output_file)
length(unique(gt$mut))
type(gt)
typeof(gt)
dup_flag <- duplicated(df$mut) | duplicated(df$mut, fromLast = TRUE)
dup_counts <- DT[, .N, by = mut][N > 1]
dup_counts <- gt[, .N, by = mut][N > 1]
View(dup_counts)
dup_variants <- DT[dup_counts, on = "mut"]
dup_variants <- gt[dup_counts, on = "mut"]
View(dup_variants)
cols_to_collapse <- setdiff(names(gt), "mut")
DT_merged <- gt[
, lapply(.SD, function(x) paste(x, collapse = ",")),
by = mut,
.SDcols = cols_to_collapse
]
View(DT_merged)
View(gt)
source("R/libraries.R")
path <- "C:/Users/sfragkoul/Desktop/synth_data/coverage_test/300_30_10"
merged_file <- "Merged"
output_file <- file.path(path,
paste0(merged_file, "_snvs_TV.tsv"))
gt <- fread(output_file)
cols_merge <- c("run", "DP Indiv", "Count Indiv")
cols_keep  <- setdiff(names(gt), c("mut", cols_merge))
DT_merged <- gt[
, c(
# keep one copy of the "constant" columns
.SD[1, ..cols_keep],
# collapse the merge-columns into "x,y,..." strings
lapply(.SD[, ..cols_merge], function(x) paste(x, collapse = ","))
),
by = mut
]
merge_cols <- c("run", "DP Indiv", "Count Indiv")
keep_cols  <- setdiff(names(gy), c("mut", merge_cols))
# 3. Do the grouping + collapsing
DT_merged <- gt[ , {
# grab one copy of each "constant" column
kept    <- .SD[1, ..keep_cols, with = FALSE]
# collapse each merge-column into comma-separated strings
merged  <- .SD[ , lapply(.SD, function(x) paste(x, collapse = ",")), .SDcols = merge_cols]
# combine them (named lists automatically line up to columns)
c(kept, merged)
},
by = mut
]
# 3. Do the grouping + collapsing
DT_merged <- DT[, {
# a) take one copy of each “constant” column
consts <- .SD[1, keep_cols, with = FALSE]
# b) for each merge-col, collapse all its values
collapsed <- as.list(sapply(merge_cols, function(col)
paste(.SD[[col]], collapse = ",")))
names(collapsed) <- merge_cols
# c) combine into one named list => one output row
c(consts, collapsed)
},
by = mut
]
# 3. Do the grouping + collapsing
DT_merged <- gt[, {
# a) take one copy of each “constant” column
consts <- .SD[1, keep_cols, with = FALSE]
# b) for each merge-col, collapse all its values
collapsed <- as.list(sapply(merge_cols, function(col)
paste(.SD[[col]], collapse = ",")))
names(collapsed) <- merge_cols
# c) combine into one named list => one output row
c(consts, collapsed)
},
by = mut
]
source("R/libraries.R")
path <- "C:/Users/sfragkoul/Desktop/synth_data/coverage_test/300_30_10"
merged_file <- "Merged"
output_file <- file.path(path,
paste0(merged_file, "_snvs_TV.tsv"))
gt <- fread(output_file)
dup_counts <- gt[, .N, by = mut][N > 1]
dup_variants <- gt[dup_counts, on = "mut"]
cols_to_collapse <- setdiff(names(gt), "mut")
DT_merged <- gt[
, lapply(.SD, function(x) paste(x, collapse = ",")),
by = mut,
.SDcols = cols_to_collapse
]
View(DT_merged)
View(DT_merged)
# 1) define exactly which to collapse and which to keep
merge_cols <- c("Run", "DP Indiv", "Count Indiv")
other_cols <- setdiff(names(gt), c("mut", merge_cols))
# 2) do the group‑by/collapse
DT_merged <- gt[ , {
# a) grab the first value of each "other" column
consts    <- .SD[1, other_cols, with = FALSE]
# b) collapse each of the merge_cols into "x,y,..." strings
collapsed <- as.list(sapply(merge_cols, function(col)
paste(.SD[[col]], collapse = ",")))
names(collapsed) <- merge_cols
# c) combine them, and add mut at the end
c(consts, collapsed, mut = mut[1])
},
by = mut
]
# 3) reorder so that mut is the very last column
setcolorder(DT_merged, c(other_cols, merge_cols, "mut"))
View(DT_merged)
source("R/libraries.R")
path <- "C:/Users/sfragkoul/Desktop/synth_data/coverage_test/300_30_10"
merged_file <- "Merged"
output_file <- file.path(path,
paste0(merged_file, "_snvs_TV.tsv"))
gt <- fread(output_file)
# 1) define exactly which to collapse and which to keep
merge_cols <- c("Run", "DP Indiv", "Count Indiv")
other_cols <- setdiff(names(gt), c("mut", merge_cols))
# 2) do the group‑by/collapse
DT_merged <- gt[ , {
# a) grab the first value of each "other" column
consts    <- .SD[1, other_cols, with = FALSE]
# b) collapse each of the merge_cols into "x,y,..." strings
collapsed <- as.list(sapply(merge_cols, function(col)
paste(.SD[[col]], collapse = ",")))
names(collapsed) <- merge_cols
# c) combine them, and add mut at the end
c(consts, collapsed, mut = mut[1])
},
by = mut
]
View(DT_merged)
DT_merged$mut=NULL
View(DT_merged)
View(DT_merged)
source("R/libraries.R")
path <- "C:/Users/sfragkoul/Desktop/synth_data/coverage_test/300_30_10"
merged_file <- "Merged"
output_file <- file.path(path,
paste0(merged_file, "_snvs_TV.tsv"))
gt <- fread(output_file)
dup_counts <- gt[, .N, by = mut][N > 1]
dup_variants <- gt[dup_counts, on = "mut"]
cols_to_collapse <- setdiff(names(gt), "mut")
DT_merged <- gt[
, lapply(.SD, function(x) paste(x, collapse = ",")),
by = mut,
.SDcols = cols_to_collapse
]
# 1) define exactly which to collapse and which to keep
merge_cols <- c("Run", "DP Indiv", "Count Indiv")
other_cols <- setdiff(names(gt), c("mut", merge_cols))
# 2) do the group‑by/collapse
DT_merged <- gt[ , {
# a) grab the first value of each "other" column
consts    <- .SD[1, other_cols, with = FALSE]
# b) collapse each of the merge_cols into "x,y,..." strings
collapsed <- as.list(sapply(merge_cols, function(col)
paste(.SD[[col]], collapse = ",")))
names(collapsed) <- merge_cols
# c) combine them, and add mut at the end
c(consts, collapsed, mut = mut[1])
},
by = mut
]
DT_merged$mut=NULL
source("R/libraries.R")
path <- "C:/Users/sfragkoul/Desktop/synth_data/coverage_test/300_30_10"
merged_file <- "Merged"
output_file <- file.path(path,
paste0(merged_file, "_snvs_TV.tsv"))
gt <- fread(output_file)
# 1) define exactly which to collapse and which to keep
merge_cols <- c("Run", "DP Indiv", "Count Indiv")
other_cols <- setdiff(names(gt), c("mut", merge_cols))
# 2) do the group‑by/collapse
DT_merged <- gt[ , {
# a) grab the first value of each "other" column
consts    <- .SD[1, other_cols, with = FALSE]
# b) collapse each of the merge_cols into "x,y,..." strings
collapsed <- as.list(sapply(merge_cols, function(col)
paste(.SD[[col]], collapse = ",")))
names(collapsed) <- merge_cols
# c) combine them, and add mut at the end
c(consts, collapsed, mut = mut[1])
},
by = mut
]
DT_merged$mut=NULL
View(DT_merged)
# 2) do the group‑by/collapse
DT_merged <- gt[ , {
# a) grab the first value of each "other" column
consts    <- .SD[1, other_cols, with = FALSE]
# b) collapse each of the merge_cols into "x,y,..." strings
collapsed <- as.list(sapply(merge_cols, function(col)
paste(.SD[[col]], collapse = ",")))
names(collapsed) <- merge_cols
# c) combine them, and add mut at the end
c(consts, collapsed, mut = mut[1])
},
by = mut
]
View(DT_merged)
DT_merged$mut=NULL
View(DT_merged)
View(DT_merged)
source("R/libraries.R")
path <- "C:/Users/sfragkoul/Desktop/synth_data/coverage_test/300_30_10"
merged_file <- "Merged"
output_file <- file.path(path,
paste0(merged_file, "_snvs_TV.tsv"))
gt <- fread(output_file)
# 1) define exactly which to collapse and which to keep
merge_cols <- c("Run", "DP Indiv", "Count Indiv")
other_cols <- setdiff(names(gt), c("mut", merge_cols))
source("R/libraries.R")
path <- "C:/Users/sfragkoul/Desktop/synth_data/coverage_test/300_30_10"
merged_file <- "Merged"
output_file <- file.path(path,
paste0(merged_file, "_snvs_TV.tsv"))
gt <- fread(output_file)
# 1) define exactly which to collapse and which to keep
merge_cols <- c("Run", "DP Indiv", "Count Indiv")
other_cols <- setdiff(names(gt), c("mut", merge_cols))
# 2) do the group‑by/collapse
gt <- gt[ , {
# a) grab the first value of each "other" column
consts    <- .SD[1, other_cols, with = FALSE]
# b) collapse each of the merge_cols into "x,y,..." strings
collapsed <- as.list(sapply(merge_cols, function(col)
paste(.SD[[col]], collapse = ",")))
names(collapsed) <- merge_cols
# c) combine them, and add mut at the end
c(consts, collapsed, mut = mut[1])
},
by = mut
]
gt$mut=NULL
View(gt)
gatk_somatic_vcf =  read.vcfR(paste0(path, "/", merged_file, "_Mutect2_norm.vcf"), verbose = FALSE )
source("R/libraries.R")
path <- "C:/Users/sfragkoul/Desktop/synth_data/coverage_test/300_30_10"
merged_file <- "Merged"
output_file <- file.path(path,
paste0(merged_file, "_snvs_TV.tsv"))
gt <- fread(output_file)
merged_gt <- gt
gatk_somatic_vcf =  read.vcfR(paste0(path, "/", merged_file, "_Mutect2_norm.vcf"), verbose = FALSE )
#return cleaned vcf
gatk_s0  = gatk_somatic_vcf |> vcfR::getFIX() |> as.data.frame() |> setDT()
gatk_s1  = gatk_somatic_vcf |> extract_gt_tidy() |> setDT()
gatk_s21 = gatk_somatic_vcf |> extract_info_tidy() |> setDT()
gatk_somatic = cbind(gatk_s0[gatk_s1$Key, ], gatk_s1)
#Merge everything into a common file
merged_gt$POS = as.character(merged_gt$POS)
merged_bnch = merge(merged_gt, gatk_somatic,  by = "POS", all.x = TRUE)
merged_bnch$POS = as.numeric(merged_bnch$POS)
merged_bnch = merged_bnch[order(POS)]
colnames(merged_bnch) = c(
"POS",	"Ground Truth REF",	"Ground Truth ALT",
"Ground Truth DP", "Ground Truth AD", "Ground Truth AF",
"Run", "DP Indiv", "Count Indiv", "Freq Indiv", "mut",
"CHROM", "ID",	"Mutect2 REF",	"Mutect2 ALT", "Mutect2 QUAL",
"Mutect2 FILTER", "key", "Indiv", "Mutect2 AD", "Mutect2 AF",
"Mutect2 DP", "gt_F1R2", "gt_F2R1", "gt_FAD", "gt_GQ", "gt_GT",
"gt_PGT", "gt_PID", "gt_PL","gt_PS", "gt_SB", "gt_GT_alleles"
)
#after unlisting multiple variants in the same position, we must
# keep only unique FN POS
merged_bnch2 <- merged_bnch[, .SD[1], by = POS]
