"_Mutect2_norm.vcf"), verbose = FALSE )
Mutect2_s0  = Mutect2_somatic_vcf |> vcfR::getFIX() |> as.data.frame() |> setDT()
Mutect2_s1  = Mutect2_somatic_vcf |> extract_gt_tidy() |> setDT()
Mutect2gatk_s21 = Mutect2_somatic_vcf |> extract_info_tidy() |> setDT()
Mutect2_somatic = cbind(Mutect2_s0[Mutect2_s1$Key, ], Mutect2_s1)
return(Mutect2_somatic)
}
#FP
fp_snvs_gatk <- function(Mutect2_somatic_snvs, pick_gt, gt_all){#term snvs is redundant
#find MUtect2 FP variants
fp_var = define_fp(Mutect2_somatic_snvs, pick_gt)
fp_var$gt_AF = as.numeric(fp_var$gt_AF)
colnames(fp_var) = c("CHROM", "POS","ID", "Mutect2 REF",
"Mutect2 ALT", "Mutect2 QUAL",	"Mutect2 FILTER",
"key", "Indiv", "Mutect2 AD", "Mutect2 AF",
"Mutect2 DP", "gt_F1R2", "gt_F2R1", "gt_FAD",
"gt_GQ", "gt_GT",	"gt_PGT",	"gt_PID",	"gt_PL",
"gt_PS",	"gt_SB",	"gt_GT_alleles", "mut")
#find DP of FP variants'  location in GT
tmp = gt_all[which(POS %in% unique(fp_var$POS))]
a = unique(tmp, by = "POS")
#to include the presence multiple variants in a POS
index = match(fp_var$POS, a$POS)
fp_var$`Ground Truth DP` = a[index]$DP
fp_var$`DP Percentage` = fp_var$`Mutect2 DP`/fp_var$`Ground Truth DP`
fp_var$type = "FP"
return(fp_var)
}
final_fp_indels_gatk <- function(path, merged_file, pick_gt, gt_all){
Mutect2_somatic <- load_gatk_vcf(path, merged_file)
Mutect2_somatic_indels <-select_indels(Mutect2_somatic)
fp_var = fp_snvs_gatk(Mutect2_somatic_indels, pick_gt, gt_all)
return(fp_var)
}
#FN
final_fn_indels_gatk <- function(path, merged_file, pick_gt){
Mutect2_somatic <- load_gatk_vcf(path, merged_file)
Mutect2_somatic_indels <-select_indels(Mutect2_somatic)
fn_var = define_fn(Mutect2_somatic_indels, pick_gt)
colnames(fn_var) = c("POS", "Ground Truth REF", "Ground Truth DP",
"Ground Truth ALT", "Count", "Ground Truth AF", "mut", "type")
return(fn_var)
}
fn_indels_gatk = final_fn_indels_gatk("results/", "Merged", pick_gt)
#TP
final_tp_indels_gatk <- function(path, merged_file, pick_gt){
Mutect2_somatic <- load_gatk_vcf(path, merged_file)
Mutect2_somatic_indels <-select_indels(Mutect2_somatic)
tp_var = define_tp(Mutect2_somatic_indels, pick_gt)
return(tp_var)
}
standardize_indels <- function(dt) { #!!!! NEW FUNCTION
#Function to standardize indels
setDT(dt)
#deletions
dt[grepl("^-", ALT), `:=` (
ALT = substring(REF, 1, 1),
REF = paste0(REF, substring(ALT, 2)),
POS = POS - 1  #Adjust POS for deletions
)]
#insertions
dt[grepl("^\\+", ALT), ALT := paste0(REF, substring(ALT, 2))]
dt$mut = paste(dt$POS,
dt$REF,
dt$ALT, sep = ":")
return(dt)
}
pick_gt_stdz = standardize_indels(pick_gt)
tp_indels_gatk = final_tp_indels_gatk("results/", "Merged", pick_gt_stdz)
fn_indels_gatk = final_fn_indels_gatk("results/", "Merged", pick_gt_stdz)
fp_indels_gatk = final_fp_indels_gatk("results/", "Merged", pick_gt_stdz, gt_all)
#
# fwrite(
#     fp_indels_gatk, "GATK_indels_FP.tsv",
#
#     row.names = FALSE, quote = FALSE, sep = "\t"
# )
#
# fwrite(
#     fn_indels_gatk, "GATK_indels_FN.tsv",
#
#     row.names = FALSE, quote = FALSE, sep = "\t"
# )
#
#
# fwrite(
#     tp_indels_gatk, "GATK_indels_TP.tsv",
#
#     row.names = FALSE, quote = FALSE, sep = "\t"
# )
Mutect2_somatic <- load_gatk_vcf("results/", "Merged")
Mutect2_indels <-select_indels(Mutect2_somatic)
caller = Mutect2_indels
fn_var = fn_indels_gatk
# Find rows with matching POS values in both tables using merge
gt_same_POS <- merge(fn_indels_gatk, caller, by = "POS", all = FALSE)
caller$POS = as.numeric(caller$POS)
fn_var$POS = as.numeric(fn_var$POS)
# Find rows with matching POS values in both tables using merge
gt_same_POS <- merge(fn_indels_gatk, caller, by = "POS", all = FALSE)
View(gt_same_POS)
setDT(fn_var)
setDT(caller)
# Merge on POS to align matching rows
fn_merged <- merge(fn_var, caller, by = "POS", all.x = TRUE, suffixes = c("_fn", "_caller"))
# Add a new column to categorize based on conditions
fn_merged[, fn_category := fifelse(is.na(REF_caller),
"Different POS",
fifelse(`Ground Truth REF` == REF_caller,
"Different ALT",
"Different REF"))]
# Add a new column to categorize based on conditions
fn_merged[, fn_category := fifelse(is.na(caller),
"Different POS",
fifelse(`Ground Truth REF` == REF_caller,
"Different ALT",
"Different REF"))]
# Add a new column to categorize based on conditions
fn_merged[, fn_category := fifelse(is.na(caller),
"Different POS",
fifelse(`Ground Truth REF` == caller,
"Different ALT",
"Different REF"))]
caller$POS = as.numeric(caller$POS)
fn_var$POS = as.numeric(fn_var$POS)
# Find rows with matching POS values in both tables using merge
View(gt_same_POS)
# If you want the rows from each original data.table separately, you can do:
gt_same_POS_from_fn_indels_gatk <- fn_indels_gatk[POS %in% caller$POS]
caller_same_POS <- caller[POS %in% fn_indels_gatk$POS]
gt_same_POS_from_fn_indels_gatk
view(gt_same_POS_from_fn_indels_gatk)
View(gt_same_POS_from_fn_indels_gatk)
View(caller_same_POS)
# Same POS?
gt_same_POS <- merge(fn_indels_gatk, caller, by = "POS", all = FALSE)
same_REF <- merge(gt_same_POS_from_fn_indels_gatk, caller_same_POS, by = "REF", all = FALSE)
View(gt_same_POS_from_fn_indels_gatk)
colnames(gt_same_POS_from_fn_indels_gatk)
colnames(gt_same_POS_from_fn_indels_gatk) = c("POS","REF", "Ground Truth DP",  "ALT",
"Count", "Ground Truth AF","mut","type")
same_REF <- merge(gt_same_POS_from_fn_indels_gatk, caller_same_POS, by = "REF", all = FALSE)
View(same_REF)
gt_same_POS_from_fn_indels_gatk_same_REF <- gt_same_POS_from_fn_indels_gatk[REF %in% caller_same_POS$REF]
caller_same_POS_same_REF <- caller_same_POS[REF %in% gt_same_POS_from_fn_indels_gatk$REF]
BiocManager::install()
caller_same_POS_same_REF <- caller_same_POS[REF %in% same_POS_from_fn_indels_gatk$REF]
# Same POS?
same_POS <- merge(fn_indels_gatk, caller, by = "POS", all = FALSE)
#each original data.table separately
same_POS_from_fn_indels_gatk <- fn_indels_gatk[POS %in% caller$POS]
caller_same_POS <- caller[POS %in% fn_indels_gatk$POS]
# Same REF?
colnames(same_POS_from_fn_indels_gatk) = c("POS","REF", "Ground Truth DP",  "ALT",
"Count", "Ground Truth AF","mut","type")
same_REF <- merge(same_POS_from_fn_indels_gatk, caller_same_POS, by = "REF", all = FALSE)
same_POS_from_fn_indels_gatk_same_REF <- same_POS_from_fn_indels_gatk[REF %in% caller_same_POS$REF]
caller_same_POS_same_REF <- caller_same_POS[REF %in% same_POS_from_fn_indels_gatk$REF]
source("R/libraries.R")
#functions---------------------------------------------------------------------
`%ni%` <- Negate(`%in%`)
load_gt_report_indels <- function(path, merged_file) {#NEW FUNCTION!!!
#function to load Ground Truth bam-report
a <- paste0(path, "/", merged_file, "_report.tsv") |>
readLines() |>
str_split(pattern = "\t", simplify = TRUE) |>
as.data.frame() |>
setDT()
a$V1 = NULL
a$V5 = NULL
colnames(a) = c("POS", "REF", "DP", paste0("ALT_", 1:(ncol(a) - 3)))
a = melt(
a, id.vars = c("POS", "REF", "DP"),
variable.factor = FALSE, value.factor = FALSE,
variable.name = "ALT", value.name = "Count"
)
a = a[which(Count != "")]
a$POS = as.numeric(a$POS)
a$DP = as.numeric(a$DP)
a$ALT = str_split_i(a$Count, "\\:", 1)
a$Count = str_split_i(a$Count, "\\:", 2) |>
as.numeric()
a$Freq = round(a$Count / a$DP, digits = 6)
a = a[order(POS, -Count)]
a = a[which(REF != a$ALT & Count != 0)]
# select indels
a_indels = a[which(ALT %ni% c("A", "C", "G", "T")), ]
#filter DEPTH>2
a_indels = a_indels[which(a_indels$Count >2), ]
gt = list(
all = a,
indels = a_indels
)
return(gt)
}
select_indels <- function(df){ #NEW FUNCTION!!!
# select indels from caller based on length of REF and ALT
#identify indels based on length
indels = df[nchar(df$REF) != nchar(df$ALT)]
indels$mut = paste(indels$POS, indels$REF, indels$ALT, sep = ":")
return(indels)
}
load_gt_vcf_indels <- function(path, merged_file){#NEW FUNCTION!!!
#function to load Ground Truth vcf
ground_truth_vcf <- read.vcfR( paste0(path, "/",merged_file,
"_ground_truth_norm.vcf"),
verbose = FALSE )
ground_truth_vcf  = ground_truth_vcf |> vcfR::getFIX() |> as.data.frame() |> setDT()
pick_gt = gt_indels[which(gt_indels$POS %in% ground_truth_vcf$POS)]
pick_gt$mut = paste(pick_gt$POS,
pick_gt$REF,
pick_gt$ALT, sep = ":")
return(pick_gt)
}
define_fp <- function(caller, gt){
#FP Variants
fp_var = caller[which(caller$mut %ni% gt$mut)]
return(fp_var)
}
define_fn <- function(caller, gt){
#FN Variants
fn_var = gt[which(gt$mut %ni% caller$mut)]
fn_var$type = "FN"
return(fn_var)
}
# Function to identify FN variants with specific categories
categorize_fns <- function(caller, fn_var) {
caller = Mutect2_indels
fn_var = fn_indels_gatk
setDT(caller)
setDT(fn_var)
# For each FN, check the categories
categorized_fns <- fn_var[, .(
category = if (!POS %in% caller$POS) {
"Different_POS"
} else if (!any(`Ground Truth REF` == caller[POS == .SD$POS]$REF) && any(`Ground Truth ALT` == caller[POS == .SD$POS]$ALT)) {
"Different_REF"
} else if (any(`Ground Truth REF` == caller[POS == .SD$POS]$REF) && !any(`Ground Truth ALT` == caller[POS == .SD$POS & REF == .SD$REF]$ALT)) {
"Different_ALT"
} else if (nchar(`Ground Truth REF`) != nchar(caller[POS == .SD$POS]$REF[1])) {
"Different_REF_Length"
} else if (nchar(`Ground Truth ALT`) != nchar(caller[POS == .SD$POS]$ALT[1])) {
"Different_ALT_Length"
} else {
"Uncategorized"
}
), by = .(POS, `Ground Truth REF`, `Ground Truth ALT`)]
return(categorized_fns)
}
define_tp <- function(caller, gt){
#TP Variants
tp_var = caller[which(caller$mut %in% gt$mut)]
tp_var$type = "TP"
return(tp_var)
}
#GT----------------------------------------------------------------------------
gt_all = load_gt_report_indels("results", "Merged")$all
gt_indels = load_gt_report_indels("results/", "Merged")$indels
pick_gt = load_gt_vcf_indels("results/", "Merged")
#Mutect2-----------------------------------------------------------------------
load_gatk_vcf <- function(path, merged_file){
#function to load caller vcf
Mutect2_somatic_vcf <- read.vcfR( paste0(path, merged_file,
"_Mutect2_norm.vcf"), verbose = FALSE )
Mutect2_s0  = Mutect2_somatic_vcf |> vcfR::getFIX() |> as.data.frame() |> setDT()
Mutect2_s1  = Mutect2_somatic_vcf |> extract_gt_tidy() |> setDT()
Mutect2gatk_s21 = Mutect2_somatic_vcf |> extract_info_tidy() |> setDT()
Mutect2_somatic = cbind(Mutect2_s0[Mutect2_s1$Key, ], Mutect2_s1)
return(Mutect2_somatic)
}
#FP
fp_snvs_gatk <- function(Mutect2_somatic_snvs, pick_gt, gt_all){#term snvs is redundant
#find MUtect2 FP variants
fp_var = define_fp(Mutect2_somatic_snvs, pick_gt)
fp_var$gt_AF = as.numeric(fp_var$gt_AF)
colnames(fp_var) = c("CHROM", "POS","ID", "Mutect2 REF",
"Mutect2 ALT", "Mutect2 QUAL",	"Mutect2 FILTER",
"key", "Indiv", "Mutect2 AD", "Mutect2 AF",
"Mutect2 DP", "gt_F1R2", "gt_F2R1", "gt_FAD",
"gt_GQ", "gt_GT",	"gt_PGT",	"gt_PID",	"gt_PL",
"gt_PS",	"gt_SB",	"gt_GT_alleles", "mut")
#find DP of FP variants'  location in GT
tmp = gt_all[which(POS %in% unique(fp_var$POS))]
a = unique(tmp, by = "POS")
#to include the presence multiple variants in a POS
index = match(fp_var$POS, a$POS)
fp_var$`Ground Truth DP` = a[index]$DP
fp_var$`DP Percentage` = fp_var$`Mutect2 DP`/fp_var$`Ground Truth DP`
fp_var$type = "FP"
return(fp_var)
}
final_fp_indels_gatk <- function(path, merged_file, pick_gt, gt_all){
Mutect2_somatic <- load_gatk_vcf(path, merged_file)
Mutect2_somatic_indels <-select_indels(Mutect2_somatic)
fp_var = fp_snvs_gatk(Mutect2_somatic_indels, pick_gt, gt_all)
return(fp_var)
}
#FN
final_fn_indels_gatk <- function(path, merged_file, pick_gt){
Mutect2_somatic <- load_gatk_vcf(path, merged_file)
Mutect2_somatic_indels <-select_indels(Mutect2_somatic)
fn_var = define_fn(Mutect2_somatic_indels, pick_gt)
colnames(fn_var) = c("POS", "Ground Truth REF", "Ground Truth DP",
"Ground Truth ALT", "Count", "Ground Truth AF", "mut", "type")
return(fn_var)
}
fn_indels_gatk = final_fn_indels_gatk("results/", "Merged", pick_gt)
#TP
final_tp_indels_gatk <- function(path, merged_file, pick_gt){
Mutect2_somatic <- load_gatk_vcf(path, merged_file)
Mutect2_somatic_indels <-select_indels(Mutect2_somatic)
tp_var = define_tp(Mutect2_somatic_indels, pick_gt)
return(tp_var)
}
standardize_indels <- function(dt) { #!!!! NEW FUNCTION
#Function to standardize indels
setDT(dt)
#deletions
dt[grepl("^-", ALT), `:=` (
ALT = substring(REF, 1, 1),
REF = paste0(REF, substring(ALT, 2)),
POS = POS - 1  #Adjust POS for deletions
)]
#insertions
dt[grepl("^\\+", ALT), ALT := paste0(REF, substring(ALT, 2))]
dt$mut = paste(dt$POS,
dt$REF,
dt$ALT, sep = ":")
return(dt)
}
pick_gt_stdz = standardize_indels(pick_gt)
tp_indels_gatk = final_tp_indels_gatk("results/", "Merged", pick_gt_stdz)
fn_indels_gatk = final_fn_indels_gatk("results/", "Merged", pick_gt_stdz)
fp_indels_gatk = final_fp_indels_gatk("results/", "Merged", pick_gt_stdz, gt_all)
#
# fwrite(
#     fp_indels_gatk, "GATK_indels_FP.tsv",
#
#     row.names = FALSE, quote = FALSE, sep = "\t"
# )
#
# fwrite(
#     fn_indels_gatk, "GATK_indels_FN.tsv",
#
#     row.names = FALSE, quote = FALSE, sep = "\t"
# )
#
#
# fwrite(
#     tp_indels_gatk, "GATK_indels_TP.tsv",
#
#     row.names = FALSE, quote = FALSE, sep = "\t"
# )
Mutect2_somatic <- load_gatk_vcf("results/", "Merged")
Mutect2_indels <-select_indels(Mutect2_somatic)
caller = Mutect2_indels
fn_var = fn_indels_gatk
rm(gt_all, fp_indels_gatk, gt_indels, Mutect2_somatic, pick_gt, pick_gt_stdz, tp_indels_gatk)
rm(categorize_fns
)
rm(define_fn, define_fp, define_tp, final_fn_indels_gatk, final_fp_indels_gatk, final_tp_indels_gatk, load_gatk_vcf)
rm(fp_snvs_gatk, load_gt_report_indels, load_gt_vcf_indels, select_indels, standardize_indels)
caller$POS = as.numeric(caller$POS)
fn_var$POS = as.numeric(fn_var$POS)
View(caller)
View(fn_var)
same_POS = fn_indels_gatk[which(fn_indels_gatk$POS %in% caller$POS)]
#each original data.table separately
same_POS_from_fn_indels_gatk <- fn_indels_gatk[POS %in% caller$POS]
same_POS = fn_indels_gatk[which(fn_indels_gatk$POS %in% caller$POS),]
same_POS = fn_indels_gatk[which(fn_indels_gatk$POS %in% caller$POS)]
#each original data.table separately
fn_var_same_POS <- fn_indels_gatk[POS %in% caller$POS]
caller_same_POS <- caller[POS %in% fn_indels_gatk$POS]
rm(same_POS_from_fn_indels_gatk)
rm(fn_indels_gatk, Mutect2_indels)
rm(same_POS)
View(fn_var_same_POS)
fn_var_same_POS_same_REF <- fn_var_same_POS[`Ground Truth REF` %in% caller_same_POS$REF]
View(fn_var_same_POS_same_REF)
caller_same_POS_same_REF <- caller_same_POS[REF %in% fn_var_same_POS$`Ground Truth REF`]
View(caller_same_POS_same_REF)
View(fn_var_same_POS_same_REF)
# Adding conditions for matching on POS, REF, and ALT
fn_var_same_POS_REF_ALT <- fn_indels_gatk[POS %in% caller$POS & `Ground Truth REF` %in% caller$REF & `Ground Truth ALT` %in% caller$ALT]
# Adding conditions for matching on POS, REF, and ALT
fn_var_same_POS_REF_ALT <- fn_var[POS %in% caller$POS & `Ground Truth REF` %in% caller$REF & `Ground Truth ALT` %in% caller$ALT]
View(fn_var_same_POS_REF_ALT)
View(caller)
View(caller)
View(fn_var)
fn_var$POS==1794
fn_var[fn_var$POS==1794]
fn_var[fn_var$POS==1794,]
caller[caller$POS==1794,]
View(fn_var_same_POS_REF_ALT)
caller_same_POS_REF_ALT <- caller[POS %in% fn_indels_gatk$POS & REF %in% fn_indels_gatk$REF & ALT %in% fn_indels_gatk$ALT]
caller_same_POS_REF_ALT <- caller[POS %in% fn_var$POS & REF %in% fn_var$`Ground Truth REF` & ALT %in% fn_var$`Ground Truth ALT`]
View(caller_same_POS_same_REF)
rm(caller_same_POS_same_REF, caller_same_POS_REF_ALT)
fn_var_same_POS_REF_ALT, fn_var_same_POS_same_REF
fn_var_same_POS_REF_ALT, fn_var_same_POS_same_REF)
rm(fn_var_same_POS_REF_ALT, fn_var_same_POS_same_REF)
#Same REF?
fn_var_same_POS_REF <- fn_var_same_POS[`Ground Truth REF` %in% caller_same_POS$REF]
caller_same_POS_REF <- caller_same_POS[REF %in% fn_var_same_POS$`Ground Truth REF`]
View(fn_var_same_POS)
colnames(fn_var_same_POS) = c("POS","REF", "Ground Truth DP",  "ALT",
"Count", "Ground Truth AF","mut","type")
View(caller_same_POS)
Same REF?
#Same REF?
fn_var_same_POS_REF <- fn_var_same_POS[REF %in% caller_same_POS$REF]
caller_same_POS_REF <- caller_same_POS[REF %in% fn_var_same_POS$REF]
View(caller_same_POS_REF)
View(fn_var_same_POS_REF)
#Same REF?
fn_var_same_POS_REF <- fn_var_same_POS[POS %in% caller_same_POS$POS & REF %in% caller_same_POS$REF]
caller_same_POS_REF <- caller_same_POS[POS %in% fn_var_same_POS$POS & REF %in% fn_var_same_POS$REF]
View(caller_same_POS_REF)
View(fn_var_same_POS_REF)
same_POS_REF_ALT <- merge(fn_var_same_POS, caller_same_POS, by = c("POS", "REF", "ALT"))
View(same_POS_REF_ALT)
rm(caller_same_POS, caller_same_POS_REF)
rm(fn_var_same_POS, fn_var_same_POS_REF)
colnames(fn_var) = c("POS","REF", "Ground Truth DP",  "ALT",
"Count", "Ground Truth AF","mut","type")
same_POS <- merge(fn_var, caller, by = c("POS"))
same_POS_REF <- merge(fn_var, caller, by = c("POS", "REF"))
same_POS_REF_ALT <- merge(fn_var, caller, by = c("POS", "REF", "ALT"))
View(same_POS)
View(fn_var)
View(same_POS_REF)
same_POS2 <- merge(fn_var, caller, by = c("POS"), all.x = TRUE)
same_POS2_only <- same_POS2[is.na(same_POS2$column_from_caller)]
rm(same_POS2, same_POS2_only)
View(same_POS)
View(fn_var)
# Step 1: Same POS
same_POS <- merge(fn_var, caller, by = "POS", all.x = TRUE)
fn_var[, category := ifelse(POS %in% same_POS$POS, "same POS", "diff POS")]
View(fn_var)
View(same_POS)
#Same POS
same_POS <- merge(fn_var, caller, by = c("POS"))
fn_var[, category := ifelse(POS %in% same_POS$POS, "same POS", "diff POS")]
View(fn_var)
#Same POS & REF
same_POS_REF <- merge(fn_var, caller, by = c("POS", "REF"))
View(same_POS_REF)
fn_var[, category := ifelse(REF %in% same_POS_REF$REF, "same REF", "diff REF")]
View(fn_var)
caller = Mutect2_indels
fn_var = fn_indels_gatk
caller$POS = as.numeric(caller$POS)
fn_var$POS = as.numeric(fn_var$POS)
colnames(fn_var) = c("POS","REF", "Ground Truth DP",  "ALT",
"Count", "Ground Truth AF","mut","type")
#Same POS
same_POS <- merge(fn_var, caller, by = c("POS"))
fn_var[, category := ifelse(POS %in% same_POS$POS, "same POS", "diff POS")]
#Same POS & REF
same_POS_REF <- merge(fn_var, caller, by = c("POS", "REF"))
fn_var[, category := ifelse(POS %in% same_POS_REF$POS &
REF %in% same_POS_REF$REF, "same REF", "diff REF")]
View(fn_var)
#Same POS
same_POS <- merge(fn_var, caller, by = c("POS"))
fn_var[, category := ifelse(POS %in% same_POS$POS, "same POS", "diff POS")]
View(fn_var)
fn_var[, category := ifelse(POS %in% same_POS_REF$POS &
REF %in% same_POS_REF$REF, "same REF", "diff REF",
category)]  # Keep existing category if it's "same POS"
fn_var[, category := ifelse(POS %in% same_POS_REF$POS &
REF %in% same_POS_REF$REF, "same POS & REF",,
category)]  # Keep existing category if it's "same POS"
# Step 1: Same POS
same_POS <- merge(fn_var, caller, by = "POS", all.x = TRUE)
fn_var[, category := ifelse(POS %in% same_POS$POS, "same POS", "diff POS")]
# Step 2: Same POS & REF
same_POS_REF <- merge(fn_var, caller, by = c("POS", "REF"), all.x = TRUE)
fn_var[, category := ifelse(POS %in% same_POS_REF$POS & REF %in% same_POS_REF$REF,
"same POS & REF",
category)]  # Keep existing category if it's "same POS"
# Step 3: Same POS, REF & ALT
same_POS_REF_ALT <- merge(fn_var, caller, by = c("POS", "REF", "ALT"), all.x = TRUE)
fn_var[, category := ifelse(POS %in% same_POS_REF_ALT$POS & REF %in% same_POS_REF_ALT$REF & ALT %in% same_POS_REF_ALT$ALT,
"same POS & REF & ALT",
category)]  # Keep existing category if it matches previous conditions
View(fn_var)
#Same POS
same_POS <- merge(fn_var, caller, by = c("POS"))
fn_var[, category := ifelse(POS %in% same_POS$POS, "same POS", "diff POS")]
rm(same_POS_REF, same_POS_REF_ALT)
fn_var[which(fn_var$category=='same POS")]
r
)
]
]
rrrrrrrrrrrr
3r3r3
+
view()
r
fwrite(
caller, "caller.tsv",
row.names = FALSE, quote = FALSE, sep = "\t"
)
fwrite(
fn_var, "fn_var.tsv",
row.names = FALSE, quote = FALSE, sep = "\t"
)
