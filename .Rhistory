"Freebayes",
"Merged_auto")
plots <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results",
"C:/Users/sfragkoul/Desktop/synth4bench/results",
"C:/Users/sfragkoul/Desktop/synth4bench/results",
"Freebayes")
plots <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results",
"C:/Users/sfragkoul/Desktop/synth4bench/results",
"C:/Users/sfragkoul/Desktop/synth4bench/results",
"Freebayes",
"Merged_auto")
plots <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results",
"C:/Users/sfragkoul/Desktop/synth4bench/results",
"C:/Users/sfragkoul/Desktop/synth4bench/results",
"Freebayes",
"Merged_auto")
plots <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results",
"C:/Users/sfragkoul/Desktop/synth4bench/results",
"C:/Users/sfragkoul/Desktop/synth4bench/results",
"Freebayes",
"Merged_auto")
plots <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results",
"C:/Users/sfragkoul/Desktop/synth4bench/results",
"C:/Users/sfragkoul/Desktop/synth4bench/results",
"Freebayes",
"Merged_auto")
plots <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results",
"C:/Users/sfragkoul/Desktop/synth4bench/results",
"C:/Users/sfragkoul/Desktop/synth4bench/results",
"Freebayes",
"Merged_auto")
#!/usr/bin/env Rscript
source("libraries.R")
source("common_helpers.R")
source("helpers_freebayes.R")
source("helpers_gatk.R")
source("helpers_LoFreq.R")
source("helpers_VarDict.R")
source("helpers_VarScan.R")
plots <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results",
"C:/Users/sfragkoul/Desktop/synth4bench/results",
"C:/Users/sfragkoul/Desktop/synth4bench/results",
"Freebayes",
"Merged_auto")
plots <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "Freebayes", "Merged_auto")
View(plot_synth4bench)
plots <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "Freebayes", "Merged_auto")
plots <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "Freebayes", "Merged_auto")
plots <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "Freebayes", "Merged_auto")
plots <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "Freebayes", "Merged_auto")
data <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "Freebayes", "Merged_auto")
data <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "Freebayes", "Merged_auto")
plots <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "Freebayes", "Merged_auto")
plots <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "Freebayes", "Merged_auto")
plots <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "Freebayes", "Merged_auto")
df <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "Freebayes", "Merged_auto")
plots <- plot_synth4bench(arguments$gt_comparison, arguments$vcf_path, arguments$gt_path, arguments$caller, arguments$merged_file)
df <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "Freebayes", "Merged_auto")
plots <- plot_synth4bench("C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "C:/Users/sfragkoul/Desktop/synth4bench/results", "Freebayes", "Merged_auto")
plots <- plot_synth4bench(arguments$gt_comparison, arguments$vcf_path, arguments$gt_path, arguments$caller, arguments$merged_file)
setwd("C:/Users/sfragkoul/Desktop/synth4bench")
`%ni%` <- Negate(`%in%`)
source("R/libraries.R")
`%ni%` <- Negate(`%in%`)
load_gt_report <- function(path, merged_file) {
#function to load Ground Truth bam-report
a <- paste0(path, "/", merged_file, "_report.tsv") |>
readLines() |>
str_split(pattern = "\t", simplify = TRUE) |>
as.data.frame() |>
setDT()
a$V1 = NULL
a$V5 = NULL
colnames(a) = c("POS", "REF", "DP", paste0("ALT_", 1:(ncol(a) - 3)))
a = melt(
a, id.vars = c("POS", "REF", "DP"),
variable.factor = FALSE, value.factor = FALSE,
variable.name = "ALT", value.name = "Count"
)
a = a[which(Count != "")]
a$POS = as.numeric(a$POS)
a$DP = as.numeric(a$DP)
a$ALT = str_split_i(a$Count, "\\:", 1)
a$Count = str_split_i(a$Count, "\\:", 2) |>
as.numeric()
a$Freq = round(a$Count / a$DP, digits = 6)
a = a[order(POS, -Count)]
a = a[which(REF != a$ALT & Count != 0)]
# select indels
a_indels = a[which(ALT %ni% c("A", "C", "G", "T")), ]
#filter DEPTH>2
a_indels = a_indels[which(a_indels$Count >2), ]
gt = list(
all = a,
indels = a_indels
)
return(gt)
}
gt_all = load_gt_report("results/", "Merged_auto")$all
gt_all = load_gt_report("results", "Merged_auto")$all
gt_all = load_gt_report("results", "Merged_auto")$all
gt_all = load_gt_report("results", "Merged")$all
gt_indels = load_gt_report("results/", "Merged")$indels
View(gt_indels)
unique(gt_indels$ALT)
load_gt_vcf <- function(path, merged_file){
#function to load Ground Truth vcf
ground_truth_vcf <- read.vcfR( paste0(path, "/",merged_file,
"_ground_truth_norm.vcf"),
verbose = FALSE )
ground_truth_vcf  = ground_truth_vcf |> vcfR::getFIX() |> as.data.frame() |> setDT()
pick_gt = gt_snvs[which(gt_snvs$POS %in% ground_truth_vcf$POS)]
pick_gt$mut = paste(pick_gt$POS,
pick_gt$REF,
pick_gt$ALT, sep = ":")
return(pick_gt)
}
pick_gt = load_gt_vcf("results/", "Merged")
load_gt_vcf_indels <- function(path, merged_file){
#function to load Ground Truth vcf
ground_truth_vcf <- read.vcfR( paste0(path, "/",merged_file,
"_ground_truth_norm.vcf"),
verbose = FALSE )
ground_truth_vcf  = ground_truth_vcf |> vcfR::getFIX() |> as.data.frame() |> setDT()
pick_gt = gt_indels[which(gt_indels$POS %in% ground_truth_vcf$POS)]
pick_gt$mut = paste(pick_gt$POS,
pick_gt$REF,
pick_gt$ALT, sep = ":")
return(pick_gt)
}
pick_gt = load_gt_vcf("results/", "Merged")
load_gt_vcf_indels <- function(path, merged_file){
#function to load Ground Truth vcf
ground_truth_vcf <- read.vcfR( paste0(path, "/",merged_file,
"_ground_truth_norm.vcf"),
verbose = FALSE )
ground_truth_vcf  = ground_truth_vcf |> vcfR::getFIX() |> as.data.frame() |> setDT()
pick_gt = gt_indels[which(gt_indels$POS %in% ground_truth_vcf$POS)]
pick_gt$mut = paste(pick_gt$POS,
pick_gt$REF,
pick_gt$ALT, sep = ":")
return(pick_gt)
}
pick_gt = load_gt_vcf_indels("results/", "Merged")
View(pick_gt)
define_fp <- function(caller, gt){
#FP Variants
fp_var = caller[which(caller$mut %ni% gt$mut)]
return(fp_var)
}
define_fn <- function(caller, gt){
#FN Variants
fn_var = gt[which(gt$mut %ni% caller$mut)]
fn_var$type = "FN"
return(fn_var)
}
define_tp <- function(caller, gt){
#FN Variants
tp_var = caller[which(caller$mut %in% gt$mut)]
return(tp_var)
}
#Mutect2-----------------------------------------------------------------------
load_gatk_vcf <- function(path, merged_file){
#function to load caller vcf
Mutect2_somatic_vcf <- read.vcfR( paste0(path, merged_file,
"_Mutect2_norm.vcf"), verbose = FALSE )
Mutect2_s0  = Mutect2_somatic_vcf |> vcfR::getFIX() |> as.data.frame() |> setDT()
Mutect2_s1  = Mutect2_somatic_vcf |> extract_gt_tidy() |> setDT()
Mutect2gatk_s21 = Mutect2_somatic_vcf |> extract_info_tidy() |> setDT()
Mutect2_somatic = cbind(Mutect2_s0[Mutect2_s1$Key, ], Mutect2_s1)
return(Mutect2_somatic)
}
fp_snvs_gatk <- function(Mutect2_somatic_snvs, pick_gt, gt_all){
#find MUtect2 FP variants
fp_var = define_fp(Mutect2_somatic_snvs, pick_gt)
fp_var$gt_AF = as.numeric(fp_var$gt_AF)
colnames(fp_var) = c("CHROM", "POS","ID", "Mutect2 REF",
"Mutect2 ALT", "Mutect2 QUAL",	"Mutect2 FILTER",
"key", "Indiv", "Mutect2 AD", "Mutect2 AF",
"Mutect2 DP", "gt_F1R2", "gt_F2R1", "gt_FAD",
"gt_GQ", "gt_GT",	"gt_PGT",	"gt_PID",	"gt_PL",
"gt_PS",	"gt_SB",	"gt_GT_alleles", "mut")
#find DP of FP variants'  location in GT
tmp = gt_all[which(POS %in% unique(fp_var$POS))]
a = unique(tmp, by = "POS")
#to include the presence multiple variants in a POS
index = match(fp_var$POS, a$POS)
fp_var$`Ground Truth DP` = a[index]$DP
fp_var$`DP Percentage` = fp_var$`Mutect2 DP`/fp_var$`Ground Truth DP`
fp_var$type = "FP"
return(fp_var)
}
final_fp_indels_gatk <- function(path, merged_file, pick_gt, gt_all){
Mutect2_somatic <- load_gatk_vcf(path, merged_file)
Mutect2_somatic_indels <-select_snvs(Mutect2_somatic)
fp_var = fp_snvs_gatk(Mutect2_somatic_indels, pick_gt, gt_all)
return(fp_var)
}
final_fp_indels_gatk <- function(path, merged_file, pick_gt, gt_all){
Mutect2_somatic <- load_gatk_vcf(path, merged_file)
Mutect2_somatic_indels <-select_indels(Mutect2_somatic)
fp_var = fp_snvs_gatk(Mutect2_somatic_indels, pick_gt, gt_all)
return(fp_var)
}
load_gatk_vcf <- function(path, merged_file){
#function to load caller vcf
Mutect2_somatic_vcf <- read.vcfR( paste0(path, merged_file,
"_Mutect2_norm.vcf"), verbose = FALSE )
Mutect2_s0  = Mutect2_somatic_vcf |> vcfR::getFIX() |> as.data.frame() |> setDT()
Mutect2_s1  = Mutect2_somatic_vcf |> extract_gt_tidy() |> setDT()
Mutect2gatk_s21 = Mutect2_somatic_vcf |> extract_info_tidy() |> setDT()
Mutect2_somatic = cbind(Mutect2_s0[Mutect2_s1$Key, ], Mutect2_s1)
return(Mutect2_somatic)
}
fp_snvs_gatk <- function(Mutect2_somatic_snvs, pick_gt, gt_all){#term snvs is redundant
#find MUtect2 FP variants
fp_var = define_fp(Mutect2_somatic_snvs, pick_gt)
fp_var$gt_AF = as.numeric(fp_var$gt_AF)
colnames(fp_var) = c("CHROM", "POS","ID", "Mutect2 REF",
"Mutect2 ALT", "Mutect2 QUAL",	"Mutect2 FILTER",
"key", "Indiv", "Mutect2 AD", "Mutect2 AF",
"Mutect2 DP", "gt_F1R2", "gt_F2R1", "gt_FAD",
"gt_GQ", "gt_GT",	"gt_PGT",	"gt_PID",	"gt_PL",
"gt_PS",	"gt_SB",	"gt_GT_alleles", "mut")
#find DP of FP variants'  location in GT
tmp = gt_all[which(POS %in% unique(fp_var$POS))]
a = unique(tmp, by = "POS")
#to include the presence multiple variants in a POS
index = match(fp_var$POS, a$POS)
fp_var$`Ground Truth DP` = a[index]$DP
fp_var$`DP Percentage` = fp_var$`Mutect2 DP`/fp_var$`Ground Truth DP`
fp_var$type = "FP"
return(fp_var)
}
final_fp_indels_gatk <- function(path, merged_file, pick_gt, gt_all){
Mutect2_somatic <- load_gatk_vcf(path, merged_file)
Mutect2_somatic_indels <-select_indels(Mutect2_somatic)
fp_var = fp_snvs_gatk(Mutect2_somatic_indels, pick_gt, gt_all)
return(fp_var)
}
gatk_indels = final_fp_indels_gatk("results", "Merged", pick_gt, gt_all)
gatk_indels = final_fp_indels_gatk("results/", "Merged", pick_gt, gt_all)
select_indels <- function(df){#NEW FUNCTION!!!
# select indels from caller based on length of REF and ALT
indels = df[nchar(df$REF) != nchar(df$ALT)]
#indels = indels[which(nchar(indels$REF) <2), ]
#indels = indels[which(nchar(indels$ALT) <2), ]
indels$mut = paste(indels$POS, indels$REF, indels$ALT, sep = ":")
return(indels)
}
gatk_indels = final_fp_indels_gatk("results/", "Merged", pick_gt, gt_all)
View(gatk_indels)
fp_indels_gatk = final_fp_indels_gatk("results/", "Merged", pick_gt, gt_all)
View(gt_indels)
#FN
final_fn_snvs_gatk <- function(path, merged_file, pick_gt){
Mutect2_somatic <- load_gatk_vcf(path, merged_file)
Mutect2_somatic_indels <-select_indels(Mutect2_somatic)
fn_var = define_fn(Mutect2_somatic_indels, pick_gt)
colnames(fn_var) = c("POS", "Ground Truth REF", "Ground Truth DP",
"Ground Truth ALT", "Count", "Ground Truth AF", "mut", "type")
return(fn_var)
}
final_fn_indels_gatk("results/", "Merged", pick_gt)
#FN
final_fn_indels_gatk <- function(path, merged_file, pick_gt){
Mutect2_somatic <- load_gatk_vcf(path, merged_file)
Mutect2_somatic_indels <-select_indels(Mutect2_somatic)
fn_var = define_fn(Mutect2_somatic_indels, pick_gt)
colnames(fn_var) = c("POS", "Ground Truth REF", "Ground Truth DP",
"Ground Truth ALT", "Count", "Ground Truth AF", "mut", "type")
return(fn_var)
}
final_fn_indels_gatk("results/", "Merged", pick_gt)
fn_indels_gatk = final_fn_indels_gatk("results/", "Merged", pick_gt)
#TP
final_tp_indels_gatk <- function(path, merged_file, pick_gt){
Mutect2_somatic <- load_gatk_vcf(path, merged_file)
Mutect2_somatic_indels <-select_indels(Mutect2_somatic)
tp_var = define_tp(Mutect2_somatic_indels, pick_gt)
colnames(tp_var) = c("POS", "Ground Truth REF", "Ground Truth DP",
"Ground Truth ALT", "Count", "Ground Truth AF", "mut", "type")
return(tp_var)
}
tp_indels_gatk = final_tp_indels_gatk("results/", "Merged", pick_gt)
#TP
final_tp_indels_gatk <- function(path, merged_file, pick_gt){
Mutect2_somatic <- load_gatk_vcf(path, merged_file)
Mutect2_somatic_indels <-select_indels(Mutect2_somatic)
tp_var = define_tp(Mutect2_somatic_indels, pick_gt)
return(tp_var)
}
tp_indels_gatk = final_tp_indels_gatk("results/", "Merged", pick_gt)
View(gt_indels)
View(fn_indels_gatk)
Mutect2_somatic <- load_gatk_vcf(path, merged_file)
Mutect2_somatic <- load_gatk_vcf("results/", "Merged")
Mutect2_somatic_indels <-select_indels(Mutect2_somatic)
View(Mutect2_somatic_indels)
positions = Mutect2_somatic_indels[which(Mutect2_somatic_indels$POS %ni% gt_indels$POS)
]
View(positions)
View(gt_all)
View(Mutect2_somatic_indels)
load_LoFreq_vcf <- function(path, merged_file){
#function to load caller vcf
LoFreq_somatic_vcf <- read.vcfR( paste0(path, merged_file,
"_LoFreq_norm.vcf"), verbose = FALSE )
LoFreq_s0  = LoFreq_somatic_vcf |> vcfR::getFIX() |> as.data.frame() |> setDT()
LoFreq_s1  = LoFreq_somatic_vcf |> extract_gt_tidy() |> setDT()
LoFreqLoFreq_s21 = LoFreq_somatic_vcf |> extract_info_tidy() |> setDT()
LoFreq_somatic = cbind(LoFreq_s0[LoFreq_s1$Key, ], LoFreq_s1)
return(LoFreq_somatic)
}
#FP
fp_snvs_LoFreq <- function(LoFreq_somatic_snvs, pick_gt, gt_all){#term snvs is redundant
#find LoFreq FP variants
fp_var = define_fp(LoFreq_somatic_snvs, pick_gt)
fp_var$gt_AF = as.numeric(fp_var$gt_AF)
colnames(fp_var) = c("CHROM", "POS","ID", "LoFreq REF",
"LoFreq ALT", "LoFreq QUAL",	"LoFreq FILTER",
"LoFreq DP", "LoFreq AF", "mut")
#find DP of FP variants'  location in GT
tmp = gt_all[which(POS %in% unique(fp_var$POS))]
a = unique(tmp, by = "POS")
#to include the presence multiple variants in a POS
index = match(fp_var$POS, a$POS)
fp_var$`Ground Truth DP` = a[index]$DP
fp_var$`DP Percentage` = fp_var$`LoFreq DP`/fp_var$`Ground Truth DP`
fp_var$type = "FP"
return(fp_var)
}
final_indels_LoFreq <- function(path, merged_file, pick_gt, gt_all){
LoFreq_somatic <- load_LoFreq_vcf(path, merged_file)
LoFreq_somatic_indels <-select_indels(LoFreq_somatic)
fp_var = fp_snvs_LoFreq(LoFreq_somatic_indels, pick_gt, gt_all)
return(fp_var)
}
fp_indels_LoFreq = final_fp_indels_LoFreq("results/", "Merged", pick_gt, gt_all)
#LoFreq-----------------------------------------------------------------------
load_LoFreq_vcf <- function(path, merged_file){
#function to load caller vcf
LoFreq_somatic_vcf <- read.vcfR( paste0(path, merged_file,
"_LoFreq_norm.vcf"), verbose = FALSE )
LoFreq_s0  = LoFreq_somatic_vcf |> vcfR::getFIX() |> as.data.frame() |> setDT()
LoFreq_s1  = LoFreq_somatic_vcf |> extract_gt_tidy() |> setDT()
LoFreqLoFreq_s21 = LoFreq_somatic_vcf |> extract_info_tidy() |> setDT()
LoFreq_somatic = cbind(LoFreq_s0[LoFreq_s1$Key, ], LoFreq_s1)
return(LoFreq_somatic)
}
#FP
fp_snvs_LoFreq <- function(LoFreq_somatic_snvs, pick_gt, gt_all){#term snvs is redundant
#find LoFreq FP variants
fp_var = define_fp(LoFreq_somatic_snvs, pick_gt)
fp_var$gt_AF = as.numeric(fp_var$gt_AF)
colnames(fp_var) = c("CHROM", "POS","ID", "LoFreq REF",
"LoFreq ALT", "LoFreq QUAL",	"LoFreq FILTER",
"LoFreq DP", "LoFreq AF", "mut")
#find DP of FP variants'  location in GT
tmp = gt_all[which(POS %in% unique(fp_var$POS))]
a = unique(tmp, by = "POS")
#to include the presence multiple variants in a POS
index = match(fp_var$POS, a$POS)
fp_var$`Ground Truth DP` = a[index]$DP
fp_var$`DP Percentage` = fp_var$`LoFreq DP`/fp_var$`Ground Truth DP`
fp_var$type = "FP"
return(fp_var)
}
final_indels_LoFreq <- function(path, merged_file, pick_gt, gt_all){
LoFreq_somatic <- load_LoFreq_vcf(path, merged_file)
LoFreq_somatic_indels <-select_indels(LoFreq_somatic)
fp_var = fp_snvs_LoFreq(LoFreq_somatic_indels, pick_gt, gt_all)
return(fp_var)
}
fp_indels_LoFreq = final_fp_indels_LoFreq("results/", "Merged", pick_gt, gt_all)
fp_indels_LoFreq = final_indels_LoFreq("results/", "Merged", pick_gt, gt_all)
source("R/libraries.R")
#functions---------------------------------------------------------------------
`%ni%` <- Negate(`%in%`)
load_gt_report <- function(path, merged_file) {
#function to load Ground Truth bam-report
a <- paste0(path, "/", merged_file, "_report.tsv") |>
readLines() |>
str_split(pattern = "\t", simplify = TRUE) |>
as.data.frame() |>
setDT()
a$V1 = NULL
a$V5 = NULL
colnames(a) = c("POS", "REF", "DP", paste0("ALT_", 1:(ncol(a) - 3)))
a = melt(
a, id.vars = c("POS", "REF", "DP"),
variable.factor = FALSE, value.factor = FALSE,
variable.name = "ALT", value.name = "Count"
)
a = a[which(Count != "")]
a$POS = as.numeric(a$POS)
a$DP = as.numeric(a$DP)
a$ALT = str_split_i(a$Count, "\\:", 1)
a$Count = str_split_i(a$Count, "\\:", 2) |>
as.numeric()
a$Freq = round(a$Count / a$DP, digits = 6)
a = a[order(POS, -Count)]
a = a[which(REF != a$ALT & Count != 0)]
# select indels
a_indels = a[which(ALT %ni% c("A", "C", "G", "T")), ]
#filter DEPTH>2
a_indels = a_indels[which(a_indels$Count >2), ]
gt = list(
all = a,
indels = a_indels
)
return(gt)
}
select_indels <- function(df){#NEW FUNCTION!!!
# select indels from caller based on length of REF and ALT
indels = df[nchar(df$REF) != nchar(df$ALT)]
#indels = indels[which(nchar(indels$REF) <2), ]
#indels = indels[which(nchar(indels$ALT) <2), ]
indels$mut = paste(indels$POS, indels$REF, indels$ALT, sep = ":")
return(indels)
}
load_gt_vcf_indels <- function(path, merged_file){#NEW FUNCTION!!!
#function to load Ground Truth vcf
ground_truth_vcf <- read.vcfR( paste0(path, "/",merged_file,
"_ground_truth_norm.vcf"),
verbose = FALSE )
ground_truth_vcf  = ground_truth_vcf |> vcfR::getFIX() |> as.data.frame() |> setDT()
pick_gt = gt_indels[which(gt_indels$POS %in% ground_truth_vcf$POS)]
pick_gt$mut = paste(pick_gt$POS,
pick_gt$REF,
pick_gt$ALT, sep = ":")
return(pick_gt)
}
define_fp <- function(caller, gt){
#FP Variants
fp_var = caller[which(caller$mut %ni% gt$mut)]
return(fp_var)
}
define_fn <- function(caller, gt){
#FN Variants
fn_var = gt[which(gt$mut %ni% caller$mut)]
fn_var$type = "FN"
return(fn_var)
}
define_tp <- function(caller, gt){
#FN Variants
tp_var = caller[which(caller$mut %in% gt$mut)]
return(tp_var)
}
#GT----------------------------------------------------------------------------
gt_all = load_gt_report("results", "Merged")$all
gt_indels = load_gt_report("results/", "Merged")$indels
pick_gt = load_gt_vcf_indels("results/", "Merged")
load_gatk_vcf <- function(path, merged_file){
#function to load caller vcf
Mutect2_somatic_vcf <- read.vcfR( paste0(path, merged_file,
"_Mutect2_norm.vcf"), verbose = FALSE )
Mutect2_s0  = Mutect2_somatic_vcf |> vcfR::getFIX() |> as.data.frame() |> setDT()
Mutect2_s1  = Mutect2_somatic_vcf |> extract_gt_tidy() |> setDT()
Mutect2gatk_s21 = Mutect2_somatic_vcf |> extract_info_tidy() |> setDT()
Mutect2_somatic = cbind(Mutect2_s0[Mutect2_s1$Key, ], Mutect2_s1)
return(Mutect2_somatic)
}
#FP
fp_snvs_gatk <- function(Mutect2_somatic_snvs, pick_gt, gt_all){#term snvs is redundant
#find MUtect2 FP variants
fp_var = define_fp(Mutect2_somatic_snvs, pick_gt)
fp_var$gt_AF = as.numeric(fp_var$gt_AF)
colnames(fp_var) = c("CHROM", "POS","ID", "Mutect2 REF",
"Mutect2 ALT", "Mutect2 QUAL",	"Mutect2 FILTER",
"key", "Indiv", "Mutect2 AD", "Mutect2 AF",
"Mutect2 DP", "gt_F1R2", "gt_F2R1", "gt_FAD",
"gt_GQ", "gt_GT",	"gt_PGT",	"gt_PID",	"gt_PL",
"gt_PS",	"gt_SB",	"gt_GT_alleles", "mut")
#find DP of FP variants'  location in GT
tmp = gt_all[which(POS %in% unique(fp_var$POS))]
a = unique(tmp, by = "POS")
#to include the presence multiple variants in a POS
index = match(fp_var$POS, a$POS)
fp_var$`Ground Truth DP` = a[index]$DP
fp_var$`DP Percentage` = fp_var$`Mutect2 DP`/fp_var$`Ground Truth DP`
fp_var$type = "FP"
return(fp_var)
}
final_indels_gatk <- function(path, merged_file, pick_gt, gt_all){
Mutect2_somatic <- load_gatk_vcf(path, merged_file)
Mutect2_somatic_indels <-select_indels(Mutect2_somatic)
fp_var = fp_snvs_gatk(Mutect2_somatic_indels, pick_gt, gt_all)
return(fp_var)
}
fp_indels_gatk = final_indels_gatk("results/", "Merged", pick_gt, gt_all)
#FN
final_fn_indels_gatk <- function(path, merged_file, pick_gt){
Mutect2_somatic <- load_gatk_vcf(path, merged_file)
Mutect2_somatic_indels <-select_indels(Mutect2_somatic)
fn_var = define_fn(Mutect2_somatic_indels, pick_gt)
colnames(fn_var) = c("POS", "Ground Truth REF", "Ground Truth DP",
"Ground Truth ALT", "Count", "Ground Truth AF", "mut", "type")
return(fn_var)
}
fn_indels_gatk = final_fn_indels_gatk("results/", "Merged", pick_gt)
#TP
final_tp_indels_gatk <- function(path, merged_file, pick_gt){
Mutect2_somatic <- load_gatk_vcf(path, merged_file)
Mutect2_somatic_indels <-select_indels(Mutect2_somatic)
tp_var = define_tp(Mutect2_somatic_indels, pick_gt)
return(tp_var)
}
tp_indels_gatk = final_tp_indels_gatk("results/", "Merged", pick_gt)
Mutect2_somatic <- load_gatk_vcf("results/", "Merged")
Mutect2_somatic_indels <-select_indels(Mutect2_somatic)
View(gt_all)
