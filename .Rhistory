install.packages("data.table")
library(sloop)
install.packages("sloop")
library(sloop)
sloop::otype()
sloop::otype(iris)
ssh -T git@git.bioconductor.org
install.packages("vcfr")
install.packages("vcfR")
shiny::runApp('D:/sfragkoul/IgIDivA/Group_Repository')
runApp('D:/sfragkoul/IgIDivA/Group_Repository')
runApp('D:/sfragkoul/IgIDivA/Group_Repository')
runApp('D:/sfragkoul/IgIDivA/Group_Repository')
shiny::runApp('D:/sfragkoul/IgIDivA/Group_Repository')
shiny::runApp('D:/sfragkoul/IgIDivA/Group_Repository')
runApp('D:/sfragkoul/IgIDivA/Group_Repository')
runApp('D:/sfragkoul/IgIDivA/Group_Repository')
packageVersion('shiny')
?readVcf()
library(data.table)
tumor = fread("Tumor.call.cns")
installr::updateR()
install.packages(c("cli", "dplyr", "ggplot2", "ggvenn", "Matrix", "rlang", "vctrs"))
install.packages(c("class", "KernSmooth", "lattice", "MASS", "Matrix", "nnet", "survival"), lib="C:/Program Files/R/R-4.2.3/library")
Bioconductor::install()
BiocManager::install()
install.packages(c("tidyverse", "patchwork", "hexbin", "corrplot", "corrr", "broom", "ggfortify", "BiocManager"))
BiocManager::install("ComplexHeatmap")
BiocManager::install("ComplexHeatmap")
BiocManager::install("ComplexHeatmap")
BiocManager::install("ComplexHeatmap", dependencies = TRUE, INSTALL_opts = '--no-lock')
BiocManager::install("ComplexHeatmap", force = TRUE')
cs
a
help
help
BiocManager::install("ComplexHeatmap", force = TRUE)
BiocManager::install("ComplexHeatmap", INSTALL_opts = '--no-lock')
force = TRUE
options("install.lock"=FALSE)
BiocManager::install("ComplexHeatmap")
BiocManager::install("ComplexHeatmap", force=TRUE)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ComplexHeatmap")
library(ComplexHeatmap)
install.packages('digest')
install.packages('digest')
library(ComplexHeatmap)
BiocManager::install("VAExprs")
browseVignettes("VAExprs")
library(VAExprs)
library(VAExprs)
library(VAExprs)
browseVignettes("VAExprs")
if (keras::is_keras_available() & reticulate::py_available()) {
library(VAExprs)
### simulate differentially expressed genes
set.seed(1)
g <- 3
n <- 100
m <- 1000
mu <- 5
sigma <- 5
mat <- matrix(rnorm(n*m*g, mu, sigma), m, n*g)
rownames(mat) <- paste0("gene", seq_len(m))
colnames(mat) <- paste0("cell", seq_len(n*g))
group <- factor(sapply(seq_len(g), function(x) {
rep(paste0("group", x), n)
}))
names(group) <- colnames(mat)
mu_upreg <- 6
sigma_upreg <- 10
deg <- 100
for (i in seq_len(g)) {
mat[(deg*(i-1) + 1):(deg*i), group == paste0("group", i)] <-
mat[1:deg, group==paste0("group", i)] + rnorm(deg, mu_upreg, sigma_upreg)
}
# positive expression only
mat[mat < 0] <- 0
x_train <- as.matrix(t(mat))
# heatmap
heatmap(mat, Rowv = NA, Colv = NA,
col = colorRampPalette(c('green', 'red'))(100),
scale = "none")
}
# heatmap
heatmap(mat, Rowv = NA, Colv = NA,
col = colorRampPalette(c('green', 'red'))(100),
scale = "none")
if (keras::is_keras_available() & reticulate::py_available()) {
library(VAExprs)
### simulate differentially expressed genes
set.seed(1)
g <- 3
n <- 100
m <- 1000
mu <- 5
sigma <- 5
mat <- matrix(rnorm(n*m*g, mu, sigma), m, n*g)
rownames(mat) <- paste0("gene", seq_len(m))
colnames(mat) <- paste0("cell", seq_len(n*g))
group <- factor(sapply(seq_len(g),
function(x) { rep(paste0("group", x), n)}
))
names(group) <- colnames(mat)
mu_upreg <- 6
sigma_upreg <- 10
deg <- 100
for (i in seq_len(g)) {
mat[(deg*(i-1) + 1):(deg*i), group == paste0("group", i)] <-
mat[1:deg, group==paste0("group", i)] + rnorm(deg, mu_upreg, sigma_upreg)
}
# positive expression only
mat[mat < 0] <- 0
x_train <- as.matrix(t(mat))
# heatmap
heatmap(mat, Rowv = NA, Colv = NA,
col = colorRampPalette(c('green', 'red'))(100),
scale = "none")
}
if (keras::is_keras_available() & reticulate::py_available()) {
# model parameters
batch_size <- 32
original_dim <- 1000
intermediate_dim <- 512
epochs <- 100
# VAE
vae_result <- fit_vae(x_train = x_train, x_val = x_train,
encoder_layers = list(layer_input(shape = c(original_dim)),
layer_dense(units = intermediate_dim,
activation = "relu")),
decoder_layers = list(layer_dense(units = intermediate_dim,
activation = "relu"),
layer_dense(units = original_dim,
activation = "sigmoid")),
epochs = epochs, batch_size = batch_size,
use_generator = FALSE,
callbacks = keras::callback_early_stopping(
monitor = "val_loss",
patience = 10,
restore_best_weights = TRUE))
}
is_keras_available()
keras
library(keras)
library(reticulate)
### simulate differentially expressed genes
set.seed(1)
g <- 3
n <- 100
m <- 1000
mu <- 5
sigma <- 5
mat <- matrix(rnorm(n*m*g, mu, sigma), m, n*g)
rownames(mat) <- paste0("gene", seq_len(m))
colnames(mat) <- paste0("cell", seq_len(n*g))
group <- factor(sapply(seq_len(g),
function(x) { rep(paste0("group", x), n)}
))
names(group) <- colnames(mat)
mu_upreg <- 6
sigma_upreg <- 10
deg <- 100
for (i in seq_len(g)) {
mat[(deg*(i-1) + 1):(deg*i), group == paste0("group", i)] <-
mat[1:deg, group==paste0("group", i)] + rnorm(deg, mu_upreg, sigma_upreg)
}
# positive expression only
mat[mat < 0] <- 0
x_train <- as.matrix(t(mat))
# heatmap
heatmap(mat, Rowv = NA, Colv = NA,
col = colorRampPalette(c('green', 'red'))(100),
scale = "none")
# model parameters
batch_size <- 32
original_dim <- 1000
intermediate_dim <- 512
epochs <- 100
# VAE
vae_result <- fit_vae(x_train = x_train, x_val = x_train,
encoder_layers = list(layer_input(shape = c(original_dim)),
layer_dense(units = intermediate_dim,
activation = "relu")),
decoder_layers = list(layer_dense(units = intermediate_dim,
activation = "relu"),
layer_dense(units = original_dim,
activation = "sigmoid")),
epochs = epochs, batch_size = batch_size,
use_generator = FALSE,
callbacks = keras::callback_early_stopping(
monitor = "val_loss",
patience = 10,
restore_best_weights = TRUE))
install_tensorflow()
remotes::install_github("rstudio/tensorflow")
reticulate::install_python()
library(tensorflow)
library(tensorflow)
install_tensorflow(envname = "r-tensorflow")
library(VAExprs)
library(keras)
library(tensorflow)
library(reticulate)
install_tensorflow(envname = "r-tensorflow")
keras::install_keras()
install_tensorflow()
library(VAExprs)
#library(keras)
#library(tensorflow)
library(reticulate)
install_tensorflow()
library(keras)
library(tensorflow)
library(reticulate)
library(VAExprs)
library(keras)
library(tensorflow)
library(reticulate)
### simulate differentially expressed genes
set.seed(1)
g <- 3
n <- 100
m <- 1000
mu <- 5
sigma <- 5
mat <- matrix(rnorm(n*m*g, mu, sigma), m, n*g)
rownames(mat) <- paste0("gene", seq_len(m))
colnames(mat) <- paste0("cell", seq_len(n*g))
group <- factor(sapply(seq_len(g),
function(x) { rep(paste0("group", x), n)}
))
names(group) <- colnames(mat)
mu_upreg <- 6
sigma_upreg <- 10
deg <- 100
for (i in seq_len(g)) {
mat[(deg*(i-1) + 1):(deg*i), group == paste0("group", i)] <-
mat[1:deg, group==paste0("group", i)] + rnorm(deg, mu_upreg, sigma_upreg)
}
# positive expression only
mat[mat < 0] <- 0
x_train <- as.matrix(t(mat))
# heatmap
heatmap(mat, Rowv = NA, Colv = NA,
col = colorRampPalette(c('green', 'red'))(100),
scale = "none")
# model parameters
batch_size <- 32
original_dim <- 1000
intermediate_dim <- 512
epochs <- 100
# VAE
vae_result <- fit_vae(x_train = x_train, x_val = x_train,
encoder_layers = list(layer_input(shape = c(original_dim)),
layer_dense(units = intermediate_dim,
activation = "relu")),
decoder_layers = list(layer_dense(units = intermediate_dim,
activation = "relu"),
layer_dense(units = original_dim,
activation = "sigmoid")),
epochs = epochs, batch_size = batch_size,
use_generator = FALSE,
callbacks = keras::callback_early_stopping(
monitor = "val_loss",
patience = 10,
restore_best_weights = TRUE))
install_tensorflow()
install.packages("keras")
install_keras(Tensorflow = "1.13.1",
restart_session = FALSE
)
library(tensorflow)
library(VAExprs)
library(keras)
library(tensorflow)
library(reticulate)
### simulate differentially expressed genes
set.seed(1)
g <- 3
n <- 100
m <- 1000
mu <- 5
sigma <- 5
mat <- matrix(rnorm(n*m*g, mu, sigma), m, n*g)
rownames(mat) <- paste0("gene", seq_len(m))
colnames(mat) <- paste0("cell", seq_len(n*g))
group <- factor(sapply(seq_len(g),
function(x) { rep(paste0("group", x), n)}
))
names(group) <- colnames(mat)
mu_upreg <- 6
sigma_upreg <- 10
deg <- 100
for (i in seq_len(g)) {
mat[(deg*(i-1) + 1):(deg*i), group == paste0("group", i)] <-
mat[1:deg, group==paste0("group", i)] + rnorm(deg, mu_upreg, sigma_upreg)
}
# positive expression only
mat[mat < 0] <- 0
x_train <- as.matrix(t(mat))
# heatmap
heatmap(mat, Rowv = NA, Colv = NA,
col = colorRampPalette(c('green', 'red'))(100),
scale = "none")
# model parameters
batch_size <- 32
original_dim <- 1000
intermediate_dim <- 512
epochs <- 100
# VAE
vae_result <- fit_vae(x_train = x_train, x_val = x_train,
encoder_layers = list(layer_input(shape = c(original_dim)),
layer_dense(units = intermediate_dim,
activation = "relu")),
decoder_layers = list(layer_dense(units = intermediate_dim,
activation = "relu"),
layer_dense(units = original_dim,
activation = "sigmoid")),
epochs = epochs, batch_size = batch_size,
use_generator = FALSE,
callbacks = keras::callback_early_stopping(
monitor = "val_loss",
patience = 10,
restore_best_weights = TRUE))
restart_session
restart_session()
install.packages("remotes")
remotes::install_github("rstudio/tensorflow")
remotes::install_github("rstudio/tensorflow")
library(tensorflow)
install_tensorflow(version = "2.0.0b1", method = "conda", envname = "r-reticulate")
library(reticulate)
install_tensorflow(version = "2.0.0b1", method = "conda", envname = "r-reticulate")
library(reticulate)
path_to_python <- install_python()
virtualenv_create("r-tensorflow", python = path_to_python)
library(tensorflow)
install_tensorflow(envname = "r-tensorflow")
use_virtualenv("r-tensorflow")
detach("package:base", unload = TRUE)
library(base, lib.loc = "C:/Program Files/R/R-4.4.1/library")
library(appreci8R)
library(data.table)
install.packages(c("stringr", "data.table", "vcfR", "ggplot2", "ggvenn", "ggforce", "ggsci", "patchwork"))
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("appreci8R")
BiocManager::install("GenomicRanges")
BiocManager::install("GenomicRanges")
library(GenomicRanges)
library(GenomicRanges)
library(data.table)
library(stringr)
library(vcfR)
library(ggplot2)
library(ggforce)
library(ggsci)
library(ggvenn)
library(patchwork)
library(optparse)
library(GenomicAlignments)
library(Rsamtools)
library(seqinr)
BiocManager::install()
BiocManager::install()
BiocManager::install()
BiocManager::install()
BiocManager::install()
BiocManager::install()
install.packages(c("ape", "shiny"))
BiocManager::install()
install.packages(c("BH", "openssl", "pillar"))
BiocManager::install()
BiocManager::install()
BiocManager::install()
BiocManager::install()
BiocManager::install()
install.packages(c("curl", "XML"))
BiocManager::install()
BiocManager::install()
install.packages("rpart", lib="C:/Program Files/R/R-4.4.1/library")
BiocManager::install()
install.packages(c("matrixStats", "pillar", "xfun"))
BiocManager::install()
BiocManager::install()
install.packages("openssl")
BiocManager::install()
install.packages(c("evaluate", "Rcpp"))
BiocManager::install()
BiocManager::install()
BiocManager::install()
BiocManager::install()
BiocManager::install()
BiocManager::install()
install.packages(c("bit64", "systemfonts"))
install.packages(c("httr2", "rlang"))
BiocManager::install()
install.packages("systemfonts")
#runs = c(1,2,3,4,5,6,7,8,9,10)
folder = "D:/sfragkoul/Synth_Data/Synthesizers/NEAT/testing/TP53/coverage_test/300_30_10"
merged_file = "Merged"
BiocManager::install()
BiocManager::install()
source("R/libraries.R")
BiocManager::install()
BiocManager::install()
install.packages(c("ade4", "cli", "R6"))
BiocManager::install()
BiocManager::install()
BiocManager::install()
BiocManager::install()
BiocManager::install()
install.packages("admisc")
BiocManager::install()
BiocManager::install()
install.packages(c("foreign", "nlme"), lib="C:/Program Files/R/R-4.4.1/library")
BiocManager::install()
setwd("C:/Users/sfragkoul/Desktop/synth4bench")
install.packages(c("pillar", "systemfonts", "writexl", "xfun"))
BiocManager::install()
