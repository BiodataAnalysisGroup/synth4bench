diff --git a/R/S4BR.R b/R/S4BR.R
index d2f37a5..5ec5bbd 100644
--- a/R/S4BR.R
+++ b/R/S4BR.R
@@ -11,10 +11,20 @@
 
 
 #!/usr/bin/env Rscript
+message("Loading Libraries...")
 source("R/libraries.R")
+
 source("R/common_helpers.R")
+source("R/indels_common_helpers.R")
+source("R/snvs_common_helpers.R")
+source("R/viz_common_helpers.R")
+
+source("R/gatk_common_helpers.R")
+source("R/indels_gatk_helpers.R")
+source("R/snvs_gatk_helpers.R")
+source("R/viz_gatk_helpers.R")
+
 source("R/helpers_freebayes.R")
-source("R/helpers_gatk.R")
 source("R/helpers_LoFreq.R")
 source("R/helpers_VarDict.R")
 source("R/helpers_VarScan.R")
@@ -52,109 +62,129 @@ arguments <- parse_args(OptionParser(option_list = options))
 arguments$vcf_path <- arguments$working_directory
 
 #SNVS TP-----------------------------------------------------------------------
-print("Begin SNVs TP Variant Analysis")
-
-gt <- gt_analysis(seq_len(arguments$runs),
-                  arguments$working_directory,
-                  arguments$merged_file)
-
-out_df_snvs_tp <- read_vcf_snvs_TP(arguments$vcf_path,
-                                   arguments$caller,
-                                   gt,
-                                   arguments$merged_file)
-
-fwrite(
-  out_df_snvs_tp, paste0(arguments$working_directory,
-                         "/",
-                         arguments$merged_file,
-                         "_",
-                         arguments$caller, "_snvs_TP.tsv"),
+print("Begin SNVs Variant Analysis")
 
-  row.names = FALSE, quote = FALSE, sep = "\t"
-)
-# 
-# #SNVS FP & FN------------------------------------------------------------------
-print("Begin SNVs FP Variant Analysis")
-
-gt_all = load_gt_report(arguments$vcf_path,
-                        arguments$merged_file)$all
+# check if Merged_snvs_GT.tsv exists
+output_file <- file.path(arguments$working_directory,
+                         paste0(arguments$merged_file, "_snvs_TV.tsv"))
 
-gt_snvs = load_gt_report(arguments$vcf_path,
-                         arguments$merged_file)$snvs
-
-pick_gt = load_gt_vcf(arguments$vcf_path,
+if (!file.exists(output_file)) {
+    gt <- gt_analysis(seq_len(arguments$runs),
+                      arguments$working_directory,
                       arguments$merged_file)
+    
+    fwrite(gt, output_file, row.names = FALSE, quote = FALSE, sep = "\t")
+} else {
+   message("File already exists: ", output_file)
+   gt <- fread(output_file)
+}
 
-out_df_snvs_fp <- read_vcf_snvs_FP(arguments$vcf_path,
-                                   arguments$caller,
-                                   arguments$merged_file,
-                                   pick_gt,
-                                   gt_all)
 
-fwrite(
-    out_df_snvs_fp, paste0(arguments$working_directory, "/",
-                           arguments$merged_file, "_",
-                           arguments$caller, "_snvs_FP.tsv"),
-    row.names = FALSE, quote = FALSE, sep = "\t"
-)
-
-print("Begin SNVs FN Variant Analysis")
-out_df_snvs_fn = read_vcf_snvs_FN(arguments$vcf_path,
-                                  arguments$caller,
-                                  arguments$merged_file,
-                                  pick_gt)
 
-fwrite(
-    out_df_snvs_fn, paste0(arguments$working_directory, "/",
-                               arguments$merged_file, "_",
-                               arguments$caller, "_snvs_FN.tsv"),
-    row.names = FALSE, quote = FALSE, sep = "\t"
-)
+snvs <- read_vcf_snvs_TP(arguments$vcf_path,
+                                   arguments$caller,
+                                   gt,
+                                   arguments$merged_file)
 
-#INDELs------------------------------------------------------------------
-print("Begin INDELs Variant Analysis")
+out_snvs = snvs$vcf_snvs_cleaned
+recall = snvs$recall
 
-pick_gt_stdz = gt_stdz_indels(arguments$vcf_path,
-                              arguments$merged_file)
+print(paste("Recall score for True Variants detection:", round(recall, 2)))
 
-print("Begin TP INDELs Variant Analysis")
-tp_indels = call_tp_indels(arguments$vcf_path,
-                           arguments$caller,
-                           arguments$merged_file,
-                           pick_gt_stdz)
-fwrite(
-        tp_indels, paste0(arguments$working_directory, "/",
-                         arguments$merged_file, "_",
-                         arguments$caller, "_indels_TP.tsv"),
-  row.names = FALSE, quote = FALSE, sep = "\t"
-)
 
-print("Begin FN INDELs Variant Analysis")
-fn_indels = call_fn_indels(arguments$vcf_path,
-                           arguments$caller,
-                           arguments$merged_file,
-                           pick_gt_stdz)
 fwrite(
-  fn_indels, paste0(arguments$working_directory, "/",
-                    arguments$merged_file, "_",
-                    arguments$caller, "_indels_FN.tsv"),
-  row.names = FALSE, quote = FALSE, sep = "\t"
-)
+  out_snvs, paste0(arguments$working_directory,
+                         "/",
+                         arguments$merged_file,
+                         "_",
+                         arguments$caller, "_snvs_TV.tsv"),
 
-print("Begin FP INDELs Variant Analysis")
-fp_indels = call_fp_indels(arguments$vcf_path,
-                           arguments$caller,
-                           arguments$merged_file,
-                           pick_gt_stdz)
-fwrite(
-  fp_indels, paste0(arguments$working_directory, "/",
-                    arguments$merged_file, "_",
-                    arguments$caller, "_indels_FP.tsv"),
   row.names = FALSE, quote = FALSE, sep = "\t"
 )
 
+#SNVS FP & FN------------------------------------------------------------------
+# print("Begin SNVs FP Variant Analysis")
+# 
+# gt_all = load_gt_report(arguments$vcf_path,
+#                         arguments$merged_file)$all
+# 
+# gt_snvs = load_gt_report(arguments$vcf_path,
+#                          arguments$merged_file)$snvs
+# 
+# pick_gt = load_gt_vcf(arguments$vcf_path,
+#                       arguments$merged_file,
+#                       gt_snvs)
+# 
+# out_df_snvs_fp <- read_vcf_snvs_FP(arguments$vcf_path,
+#                                    arguments$caller,
+#                                    arguments$merged_file,
+#                                    pick_gt,
+#                                    gt_all)
+# 
+# fwrite(
+#     out_df_snvs_fp, paste0(arguments$working_directory, "/",
+#                            arguments$merged_file, "_",
+#                            arguments$caller, "_snvs_FP.tsv"),
+#     row.names = FALSE, quote = FALSE, sep = "\t"
+# )
+# 
+# print("Begin SNVs FN Variant Analysis")
+# out_df_snvs_fn = read_vcf_snvs_FN(arguments$vcf_path,
+#                                   arguments$caller,
+#                                   arguments$merged_file,
+#                                   pick_gt)
+# 
+# fwrite(
+#     out_df_snvs_fn, paste0(arguments$working_directory, "/",
+#                                arguments$merged_file, "_",
+#                                arguments$caller, "_snvs_FN.tsv"),
+#     row.names = FALSE, quote = FALSE, sep = "\t"
+# )
 
-print("Analysis Completed")
+#INDELs------------------------------------------------------------------
+# print("Begin INDELs Variant Analysis")
+# 
+# pick_gt_stdz = gt_stdz_indels(arguments$vcf_path,
+#                               arguments$merged_file)
+# 
+# print("Begin TP INDELs Variant Analysis")
+# tp_indels = call_tp_indels(arguments$vcf_path,
+#                            arguments$caller,
+#                            arguments$merged_file,
+#                            pick_gt_stdz)
+# fwrite(
+#         tp_indels, paste0(arguments$working_directory, "/",
+#                          arguments$merged_file, "_",
+#                          arguments$caller, "_indels_TP.tsv"),
+#   row.names = FALSE, quote = FALSE, sep = "\t"
+# )
+# 
+# print("Begin FN INDELs Variant Analysis")
+# fn_indels = call_fn_indels(arguments$vcf_path,
+#                            arguments$caller,
+#                            arguments$merged_file,
+#                            pick_gt_stdz)
+# fwrite(
+#   fn_indels, paste0(arguments$working_directory, "/",
+#                     arguments$merged_file, "_",
+#                     arguments$caller, "_indels_FN.tsv"),
+#   row.names = FALSE, quote = FALSE, sep = "\t"
+# )
+# 
+# print("Begin FP INDELs Variant Analysis")
+# fp_indels = call_fp_indels(arguments$vcf_path,
+#                            arguments$caller,
+#                            arguments$merged_file,
+#                            pick_gt_stdz)
+# fwrite(
+#   fp_indels, paste0(arguments$working_directory, "/",
+#                     arguments$merged_file, "_",
+#                     arguments$caller, "_indels_FP.tsv"),
+#   row.names = FALSE, quote = FALSE, sep = "\t"
+# )
+# 
+# 
+# print("Analysis Completed")
 
 
 
diff --git a/R/S4BR_plot.R b/R/S4BR_plot.R
index cd18854..ff0dbe1 100644
--- a/R/S4BR_plot.R
+++ b/R/S4BR_plot.R
@@ -13,10 +13,14 @@
 
 
 #!/usr/bin/env Rscript
+message("Loading Libraries...")
 source("R/libraries.R")
-source("R/common_helpers.R")
+
+source("R/viz_common_helpers.R")
+
+source("R/viz_gatk_helpers.R")
+
 source("R/helpers_freebayes.R")
-source("R/helpers_gatk.R")
 source("R/helpers_LoFreq.R")
 source("R/helpers_VarDict.R")
 source("R/helpers_VarScan.R")
@@ -72,10 +76,10 @@ plots_snvs_TP <- plot_snvs_TP(arguments$gt_comparison,
 dir.create(paste0(arguments$working_directory, "/Plots"))
 
 ggsave(
-  plot = plots_snvs_TP[[1]], filename = paste0(arguments$working_directory,
+  plot = plots_snvs_TP, filename = paste0(arguments$working_directory,
                                        "/Plots/Poster_",
                                        arguments$caller,
-                                       "_snvs_TP.png"),
+                                       "_snvs_TV.png"),
   width = 16, height = 12, units = "in", dpi = 600
 )
 
@@ -87,52 +91,52 @@ ggsave(
 #   width = 8, height = 8, units = "in", dpi = 600
 # )
 
-#SNVs FP & FN------------------------------------------------------------------
-print("Plotting SNVs FP Variants")
-plots_snvs_FP <- plot_snvs_FP(arguments$gt_comparison,
-                              arguments$caller,
-                              arguments$merged_file)
-
-ggsave(
-    plot = plots_snvs_FP, filename = paste0(arguments$gt_comparison,
-                                                 "/Plots/",
-                                                 arguments$merged_file, "_",
-                                                 arguments$caller,
-                                                 "_snvs_FP.png"),
-    width = 16, height = 12, units = "in", dpi = 600
-)
-
-
-print("Plotting SNVs FN Variants")
-plots_snvs_FN <- plot_snvs_FN(arguments$gt_comparison,
-                              arguments$caller,
-                              arguments$merged_file)
-
-ggsave(
-    plot = plots_snvs_FN, filename = paste0(arguments$gt_comparison,
-                                            "/Plots/",
-                                            arguments$merged_file, "_",
-                                            arguments$caller,
-                                            "_snvs_FN.png"),
-    width = 16, height = 12, units = "in", dpi = 600
-)
-
-
-
-#INDELs TP & FP & FN-----------------------------------------------------------
-print("Plotting TP & FP & FN INDELs")
-indel_plots <- plot_indels(arguments$gt_comparison,
-                           arguments$merged_file,
-                           arguments$caller)
-
-ggsave(
-    plot = indel_plots, filename = paste0(arguments$gt_comparison,
-                                            "/Plots/",
-                                            arguments$merged_file, "_",
-                                            arguments$caller,
-                                            "_indels.png"),
-    width = 14, height = 12, units = "in", dpi = 600
-)
+# #SNVs FP & FN------------------------------------------------------------------
+# print("Plotting SNVs FP Variants")
+# plots_snvs_FP <- plot_snvs_FP(arguments$gt_comparison,
+#                               arguments$caller,
+#                               arguments$merged_file)
+# 
+# ggsave(
+#     plot = plots_snvs_FP, filename = paste0(arguments$gt_comparison,
+#                                                  "/Plots/",
+#                                                  arguments$merged_file, "_",
+#                                                  arguments$caller,
+#                                                  "_snvs_FP.png"),
+#     width = 16, height = 12, units = "in", dpi = 600
+# )
+# 
+# 
+# print("Plotting SNVs FN Variants")
+# plots_snvs_FN <- plot_snvs_FN(arguments$gt_comparison,
+#                               arguments$caller,
+#                               arguments$merged_file)
+# 
+# ggsave(
+#     plot = plots_snvs_FN, filename = paste0(arguments$gt_comparison,
+#                                             "/Plots/",
+#                                             arguments$merged_file, "_",
+#                                             arguments$caller,
+#                                             "_snvs_FN.png"),
+#     width = 16, height = 12, units = "in", dpi = 600
+# )
+# 
+# 
+# 
+# #INDELs TP & FP & FN-----------------------------------------------------------
+# print("Plotting TP & FP & FN INDELs")
+# indel_plots <- plot_indels(arguments$gt_comparison,
+#                            arguments$merged_file,
+#                            arguments$caller)
+# 
+# ggsave(
+#     plot = indel_plots, filename = paste0(arguments$gt_comparison,
+#                                             "/Plots/",
+#                                             arguments$merged_file, "_",
+#                                             arguments$caller,
+#                                             "_indels.png"),
+#     width = 14, height = 12, units = "in", dpi = 600
+# )
 
 print("Plotting Completed")
 
diff --git a/R/common_helpers.R b/R/common_helpers.R
index d329171..76d58b0 100644
--- a/R/common_helpers.R
+++ b/R/common_helpers.R
@@ -1,170 +1,4 @@
 
-#TP SNVS-----------------------------------------------------------------------
-gt_analysis <- function(runs, folder, merged_file) {
-  
-  nt_runs = list()
-  
-  for(r in runs) {
-    
-    a <- paste0(folder, "/", r, "/", r, "_report.tsv") |>
-      readLines() |>
-      str_split(pattern = "\t", simplify = TRUE) |>
-      as.data.frame() |> 
-      setDT()
-    
-    a$V1 = NULL
-    # a$V3 = NULL
-    a$V5 = NULL
-    
-    colnames(a) = c("POS", "REF", "DP", paste0("Nt_", 1:(ncol(a) - 3)))
-    
-    a = melt(
-      a, id.vars = c("POS", "REF", "DP"),
-      variable.factor = FALSE, value.factor = FALSE,
-      variable.name = "Nt", value.name = "Count"
-    )
-    
-    a = a[which(Count != "")]
-    
-    a$POS = as.numeric(a$POS)
-    a$DP = as.numeric(a$DP)
-    
-    a$Nt = str_split_i(a$Count, "\\:", 1)
-    
-    a$Count = str_split_i(a$Count, "\\:", 2) |>
-      as.numeric()
-    
-    a$Freq = round(100 * a$Count / a$DP, digits = 6)
-    
-    a = a[order(POS, -Count)]
-    
-    a = a[which(REF != a$Nt & Count != 0)]
-    
-    b = a[which(Nt %in% c("A", "C", "G", "T")), ]
-    
-    nt_runs[[ as.character(r) ]] = b
-  }
-  
-  nt_runs = rbindlist(nt_runs, idcol = "Run")
-  
-  pos_of_interest = nt_runs[which(Freq == 100)]$POS |> unique()
-  
-  gt_runs = nt_runs[which(POS %in% pos_of_interest)]
-  
-  a <- paste0(folder, "/", merged_file , "_report.tsv") |> 
-    readLines() |>
-    str_split(pattern = "\t", simplify = TRUE) |> 
-    as.data.frame() |> 
-    setDT()
-  
-  a$V1 = NULL
-  # a$V3 = NULL
-  a$V5 = NULL
-  
-  colnames(a) = c("POS", "REF", "DP", paste0("Nt_", 1:(ncol(a) - 3)))
-  
-  a = melt(
-    a, id.vars = c("POS", "REF", "DP"),
-    variable.factor = FALSE, value.factor = FALSE,
-    variable.name = "Nt", value.name = "Count"
-  )
-  
-  a = a[which(Count != "")]
-  
-  a$POS = as.numeric(a$POS)
-  a$DP = as.numeric(a$DP)
-  
-  a$Nt = str_split_i(a$Count, "\\:", 1)
-  
-  a$Count = str_split_i(a$Count, "\\:", 2) |>
-    as.numeric()
-  
-  a$Freq = round(100 * a$Count / a$DP, digits = 6)
-  
-  a = a[order(POS, -Count)]
-  
-  a = a[which(REF != a$Nt & Count != 0)]
-  
-  b = a[which(Nt %in% c("A", "C", "G", "T")), ]
-  
-  
-  merged_gt = b[which(POS %in% gt_runs$POS)]
-  merged_gt = merged_gt[order(POS)]
-  
-  merged_gt$Freq = merged_gt$Freq / 100
-  
-  merged_gt = merged_gt[, by = .(POS, REF, DP), .(
-    Nt = paste(Nt, collapse = ","),
-    Count = paste(Count, collapse = ","),
-    Freq = paste(round(Freq, digits = 3), collapse = ",")
-  )]
-  
-  
-  return(merged_gt)
-  
-}
-
-read_vcf_snvs_TP <- function(path, caller, gt, merged_file) {
-    
-    if(caller == "Freebayes") {
-        
-        vcf_df <- read_vcf_freebayes(path, gt, merged_file)
-        
-    } else if (caller == "Mutect2") {
-        
-        vcf_df <- read_vcf_mutect2(path, gt, merged_file)
-        
-    } else if (caller == "LoFreq") {
-        
-        vcf_df <- read_vcf_LoFreq(path, gt, merged_file)
-        
-    } else if (caller == "VarDict") {
-        
-        vcf_df <- read_vcf_VarDict(path, gt, merged_file)
-        
-    } else if (caller == "VarScan") {
-        
-        vcf_df <- read_vcf_VarScan(path, gt, merged_file)
-        
-    }
-    
-    return(vcf_df)
-}
-
-plot_snvs_TP <- function(gt_snv_tp_comparison, vcf_path, gt_path, caller, merged_file) {
-    
-    df = fread(paste0(gt_snv_tp_comparison, "/", merged_file, "_", caller, "_snvs_TP.tsv"))
-    
-    vcf_GT <- read.vcfR(paste0(vcf_path, "/", merged_file, "_ground_truth_norm.vcf"), verbose = FALSE )
-    
-    vcf_caller <- read.vcfR(paste0(vcf_path, "/", merged_file, "_", caller, "_norm.vcf"), verbose = FALSE )
-    
-    if(caller == "Freebayes") {
-
-        plots <- plot_snvs_TP_freebayes(df, vcf_GT, vcf_caller, merged_file)
-
-    } else if (caller == "Mutect2") {
-
-        plots <- plot_snvs_TP_gatk(df, vcf_GT, vcf_caller, merged_file)
-
-    } else if (caller == "LoFreq") {
-
-        plots <- plot_snvs_TP_LoFreq(df, vcf_GT, vcf_caller, merged_file)
-
-    } else if (caller == "VarDict") {
-
-        plots <- plot_snvs_TP_VarDict(df, vcf_GT, vcf_caller, merged_file)
-
-    } else if (caller == "VarScan") {
-
-        plots <- plot_snvs_TP_VarScan(df, vcf_GT, vcf_caller, merged_file)
-
-    }
-    
-    return(plots)
-    
-}
-
 report_varbp <- function(runs, folder, reference) {
     
     out = list()
@@ -467,84 +301,9 @@ explore_mut_pos <- function(runs, folder, caller) {
     
 }
 
-#FP & FN SNVS------------------------------------------------------------------
 #function "not in" def
 `%ni%` <- Negate(`%in%`) 
 
-load_gt_report <- function(path, merged_file) {
-    #function to load Ground Truth bam-report 
-    a <- paste0(path, "/", merged_file, "_report.tsv") |>
-        readLines() |>
-        str_split(pattern = "\t", simplify = TRUE) |>
-        as.data.frame() |> 
-        setDT()
-    
-    a$V1 = NULL
-    a$V5 = NULL
-    
-    colnames(a) = c("POS", "REF", "DP", paste0("ALT_", 1:(ncol(a) - 3)))
-    
-    a = melt(
-        a, id.vars = c("POS", "REF", "DP"),
-        variable.factor = FALSE, value.factor = FALSE,
-        variable.name = "ALT", value.name = "Count"
-    )
-    
-    a = a[which(Count != "")]
-    
-    a$POS = as.numeric(a$POS)
-    a$DP = as.numeric(a$DP)
-    
-    a$ALT = str_split_i(a$Count, "\\:", 1)
-    
-    a$Count = str_split_i(a$Count, "\\:", 2) |>
-        as.numeric()
-    
-    a$Freq = round(a$Count / a$DP, digits = 6)
-    
-    a = a[order(POS, -Count)]
-    
-    a = a[which(REF != a$ALT & Count != 0)]
-    
-    # select SNVs
-    a_snvs = a[which(ALT %in% c("A", "C", "G", "T")), ]
-    #filter DEPTH>2
-    a_snvs = a_snvs[which(a_snvs$Count >2), ]
-    
-    
-    gt = list(
-        all = a,
-        snvs = a_snvs
-        
-    )
-    return(gt)
-}
-
-load_gt_vcf <- function(path, merged_file){
-    #function to load Ground Truth vcf
-    ground_truth_vcf <- read.vcfR( paste0(path, "/",merged_file, 
-                                          "_ground_truth_norm.vcf"),
-                                   verbose = FALSE )
-    
-    ground_truth_vcf  = ground_truth_vcf |> vcfR::getFIX() |> as.data.frame() |> setDT()
-    
-    pick_gt = gt_snvs[which(gt_snvs$POS %in% ground_truth_vcf$POS)]
-    pick_gt$mut = paste(pick_gt$POS, 
-                        pick_gt$REF, 
-                        pick_gt$ALT, sep = ":")
-    return(pick_gt)
-}
-
-select_snvs <- function(df){
-    # select SNVs from caller based on length of REF and ALT
-    snvs = df[nchar(df$REF) == nchar(df$ALT)]
-    snvs = snvs[which(nchar(snvs$REF) <2), ]
-    snvs = snvs[which(nchar(snvs$ALT) <2), ]
-    snvs$mut = paste(snvs$POS, snvs$REF, snvs$ALT, sep = ":")
-    
-    return(snvs)
-}
-
 define_fp <- function(caller, gt){
     #FP Variants
     fp_var = caller[which(caller$mut %ni% gt$mut)]
@@ -567,163 +326,6 @@ define_tp <- function(caller, gt){
     return(tp_var)
 }
 
-fn_dp_barplot <- function(q, caller){
-    #FP DP plot
-    df = q[, c(
-        "POS", 
-        "Ground Truth DP"
-    ), with = FALSE] |>
-        unique() |>
-        melt(id.vars = "POS", variable.factor = FALSE, value.factor = FALSE)
-    
-    #set color
-    if(caller == "Freebayes") {
-        
-        color <- "#ae8d43"
-        
-    } else if (caller == "Mutect2") {
-        
-        color <- "#ae4364"
-        
-    } else if (caller == "LoFreq") {
-        
-        color <- "#c974ba"
-        
-    } else if (caller == "VarDict") {
-        
-        color <- "#8d43ae"
-        
-    } else if (caller == "VarScan") {
-        
-        color <- "#439aae"
-    }
-    
-    
-    o3=ggplot(data = df) +
-        
-        geom_point(aes(x = variable, y = value, fill = variable),
-                   position = position_jitternormal(sd_x = .01, sd_y = 0),
-                   shape = 21, stroke = .1, size = 2.5) +
-        
-        geom_boxplot(aes(x = variable, y = value, fill = variable),
-                     width = .25, alpha = .5, outlier.shape = NA) +
-        
-        scale_fill_manual(
-            values = c(
-                "Ground Truth DP" = color
-            )
-        ) +
-        
-        scale_x_discrete(
-            labels = c(paste0(caller, " FN Variants"))
-        ) +
-        
-        scale_y_continuous(labels = scales::comma) +
-        
-        theme_minimal() +
-        
-        theme(
-            legend.position = "none",
-            
-            axis.title.x = element_blank(),
-            axis.title.y = element_text(face = "bold", size = 13),
-            
-            axis.text.x = element_text(face = "bold", size = 13),
-            axis.text.y = element_text(face = "bold", size = 13),
-            
-            axis.line = element_line(),
-            axis.ticks = element_line(),
-            
-            panel.grid = element_blank(),
-            
-            plot.margin = margin(20, 20, 20, 20)
-        ) +
-        
-        labs(
-            y = "Coverage (No. of reads)"
-        )
-    return(o3)
-    
-}
-
-fn_af_barplot <- function(q, caller){
-    #FP AF plot
-    df = q[, c(
-        "POS",
-        "Ground Truth AF"
-    ), with = FALSE] |>
-        unique() |>
-        
-        melt(id.vars = "POS", variable.factor = FALSE, value.factor = FALSE)
-    
-    #set color
-    if(caller == "Freebayes") {
-        
-        color <- "#ae8d43"
-        
-    } else if (caller == "Mutect2") {
-        
-        color <- "#ae4364"
-        
-    } else if (caller == "LoFreq") {
-        
-        color <- "#c974ba"
-        
-    } else if (caller == "VarDict") {
-        
-        color <- "#8d43ae"
-        
-    } else if (caller == "VarScan") {
-        
-        color <- "#439aae"
-    }
-    
-    o4 = ggplot(data = df[which(!is.na(value) & value != 0)]) +
-        
-        geom_point(aes(x = variable, y = value, fill = variable),
-                   position = position_jitternormal(sd_x = .01, sd_y = 0),
-                   shape = 21, stroke = .1, size = 2.5) +
-        
-        geom_boxplot(aes(x = variable, y = value, fill = variable),
-                     width = .25, alpha = .5, outlier.shape = NA) +
-        
-        scale_fill_manual(
-            values = c(
-                "Ground Truth AF" = color
-            )
-        ) +
-        
-        scale_x_discrete(
-            labels = c(paste0(caller, " FN Variants"))
-        ) +
-        
-        scale_y_continuous(labels = scales::percent, trans = "log10") +
-        
-        theme_minimal() +
-        
-        theme(
-            legend.position = "none",
-            
-            axis.title.x = element_blank(),
-            axis.title.y = element_text(face = "bold", size = 13),
-            axis.text.x = element_text(face = "bold", size = 13),
-            axis.text.y = element_text(face = "bold", size = 13),
-            
-            axis.line = element_line(),
-            axis.ticks = element_line(),
-            
-            panel.grid = element_blank(),
-            
-            plot.margin = margin(20, 20, 20, 20)
-        ) +
-        
-        labs(
-            y = "Allele Frequency"
-        )
-    return(o4)
-    
-}
-
 read_vcf_snvs_FP <- function(path, caller, merged_file, pick_gt, gt_all) {
     
     if(caller == "Freebayes") {
@@ -777,314 +379,3 @@ read_vcf_snvs_FN <- function(path, caller, merged_file, pick_gt) {
     
     return(fn_var)
 }
-
-
-plot_snvs_FP <- function(gt_comparison, caller, merged_file) {
-
-    # Construct file path
-    file_path <- paste0(gt_comparison, "/", merged_file, "_", caller, "_snvs_FP.tsv")
-
-    # Check if file exists
-    if (!file.exists(file_path)) {
-        stop(paste("File does not exist:", file_path))
-    }
-
-    # Read the file
-    df <- tryCatch(
-        fread(file_path),
-        error = function(e) {
-            stop(paste("Error reading file:", file_path, "\n", e$message))
-        }
-    )
-
-    # Check if the file is empty
-    if (nrow(df) == 0) {
-        warning(paste("File is empty:", file_path))
-        # Return a placeholder plot or NULL
-        return(ggplot() + labs(title = paste("No FP snvs data for", caller), x = NULL, y = NULL))
-    }
-
-    # Call specific plotting function based on the caller
-    if (caller == "Freebayes") {
-        fp_plot <- plot_snvs_FP_Freebayes(df, merged_file)
-    } else if (caller == "Mutect2") {
-        fp_plot <- plot_snvs_FP_gatk(df, merged_file)
-    } else if (caller == "LoFreq") {
-        fp_plot <- plot_snvs_FP_LoFreq(df, merged_file)
-    } else if (caller == "VarDict") {
-        fp_plot <- plot_snvs_FP_VarDict(df, merged_file)
-    } else if (caller == "VarScan") {
-        fp_plot <- plot_snvs_FP_VarScan(df, merged_file)
-    } else {
-        stop(paste("Unknown caller:", caller))
-    }
-
-    return(fp_plot)
-}
-
-
-
-
-plot_snvs_FN <- function(gt_comparison, caller, merged_file) {
-    
-    # Construct file path
-    file_path <- paste0(gt_comparison, "/", merged_file, "_", caller, "_snvs_FN.tsv")
-    
-    # Check if file exists
-    if (!file.exists(file_path)) {
-        stop(paste("File does not exist:", file_path))
-    }
-    
-    # Read the file
-    df <- fread(file_path)
-    
-    # Check if the file is empty
-    if (nrow(df) == 0) {
-        warning(paste("File is empty:", file_path))
-        # Return a placeholder plot or NULL
-        return(ggplot() + labs(title = paste("No FN snvs data for", caller), x = NULL, y = NULL))
-    }
-    
-    # Generate subplots if the file is not empty
-    fn_plot1 <- fn_dp_barplot(df, caller)
-    fn_plot2 <- fn_af_barplot(df, caller)
-    
-    # Combine the subplots
-    fn_plot <- fn_plot1 + fn_plot2 +
-        plot_layout(
-            widths = c(1, 1)
-        )
-    
-    return(fn_plot)
-}
-
-
-#INDELs------------------------------------------------------------------------
-
-load_gt_report_indels <- function(path, merged_file) {
-    #function to load Ground Truth bam-report 
-    a <- paste0(path, "/", merged_file, "_report.tsv") |>
-        readLines() |>
-        str_split(pattern = "\t", simplify = TRUE) |>
-        as.data.frame() |> 
-        setDT()
-    
-    a$V1 = NULL
-    a$V5 = NULL
-    
-    colnames(a) = c("POS", "REF", "DP", paste0("ALT_", 1:(ncol(a) - 3)))
-    
-    a = melt(
-        a, id.vars = c("POS", "REF", "DP"),
-        variable.factor = FALSE, value.factor = FALSE,
-        variable.name = "ALT", value.name = "Count"
-    )
-    
-    a = a[which(Count != "")]
-    a$POS = as.numeric(a$POS)
-    a$DP = as.numeric(a$DP)
-    a$ALT = str_split_i(a$Count, "\\:", 1)
-    a$Count = str_split_i(a$Count, "\\:", 2) |>
-        as.numeric()
-    a$Freq = round(a$Count / a$DP, digits = 6)
-    a = a[order(POS, -Count)]
-    a = a[which(REF != a$ALT & Count != 0)]
-    
-    # select indels
-    a_indels = a[which(ALT %ni% c("A", "C", "G", "T")), ]
-    #filter DEPTH>2
-    a_indels = a_indels[which(a_indels$Count >2), ]
-    
-    gt = list(
-        all = a,
-        indels = a_indels
-        
-    )
-    return(gt)
-}
-
-select_indels <- function(df){
-    #function to select indels from caller based on length of REF and ALT
-    
-    #identify indels based on length
-    indels = df[nchar(df$REF) != nchar(df$ALT)]
-    indels$mut = paste(indels$POS, indels$REF, indels$ALT, sep = ":")
-    
-    return(indels)
-}
-
-load_gt_vcf_indels <- function(path, merged_file, gt_indels){
-    #function to load Ground Truth vcf
-    ground_truth_vcf <- read.vcfR( paste0(path, "/",merged_file, 
-                                          "_ground_truth_norm.vcf"),
-                                   verbose = FALSE )
-    
-    ground_truth_vcf  = ground_truth_vcf |> vcfR::getFIX() |> as.data.frame() |> setDT()
-    
-    pick_gt = gt_indels[which(gt_indels$POS %in% ground_truth_vcf$POS)]
-    pick_gt$mut = paste(pick_gt$POS, 
-                        pick_gt$REF, 
-                        pick_gt$ALT, sep = ":")
-    return(pick_gt)
-}
-
-standardize_indels <- function(dt) {
-    #function to standardize indels
-    setDT(dt)
-    
-    #deletions
-    dt[grepl("^-", ALT), `:=` (
-        ALT = substring(REF, 1, 1), 
-        REF = paste0(REF, substring(ALT, 2)),
-        POS = POS - 1  #Adjust POS for deletions
-    )]
-    
-    #insertions
-    dt[grepl("^\\+", ALT), ALT := paste0(REF, substring(ALT, 2))]
-    
-    dt$mut = paste(dt$POS, 
-                   dt$REF, 
-                   dt$ALT, sep = ":")
-    return(dt)
-}
-
-gt_stdz_indels <- function(path, merged_file){
-    gt_all = load_gt_report_indels(path, merged_file)$all
-    gt_indels = load_gt_report_indels(path, merged_file)$indels
-    pick_gt = load_gt_vcf_indels(path, merged_file, gt_indels)
-    pick_gt_stdz = standardize_indels(pick_gt)
-    return(pick_gt_stdz)
-} 
-
-
-
-
-
-call_tp_indels <- function(path, caller, merged_file, pick_gt_stdz) {
-  
-  if(caller == "Freebayes") {
-    
-    tp_indels <- final_tp_indels_Freebayes(path, merged_file, pick_gt_stdz)
-    
-  } else if (caller == "Mutect2") {
-    
-    tp_indels <- final_tp_indels_gatk(path, merged_file, pick_gt_stdz)
-    
-  } else if (caller == "LoFreq") {
-    
-    tp_indels <- final_tp_indels_LoFreq(path, merged_file, pick_gt_stdz)
-    
-  } else if (caller == "VarDict") {
-    
-    tp_indels <- final_tp_indels_VarDict(path, merged_file, pick_gt_stdz)
-    
-  } else if (caller == "VarScan") {
-    
-    tp_indels <- final_tp_indels_VarScan(path, merged_file, pick_gt_stdz)
-    
-  }
-  
-  return(tp_indels)
-}
-
-
-
-call_fn_indels <- function(path, caller, merged_file, pick_gt_stdz) {
-  
-  if(caller == "Freebayes") {
-    
-    fn_indels <- call_fn_indels_Freebayes(path, merged_file, pick_gt_stdz)
-    
-  } else if (caller == "Mutect2") {
-    
-    fn_indels <- call_fn_indels_gatk(path, merged_file, pick_gt_stdz)
-    
-  } else if (caller == "LoFreq") {
-    
-    fn_indels <- call_fn_indels_LoFreq(path, merged_file, pick_gt_stdz)
-    
-  } else if (caller == "VarDict") {
-    
-    fn_indels <- call_fn_indels_VarDict(path, merged_file, pick_gt_stdz)
-    
-  } else if (caller == "VarScan") {
-    
-    fn_indels <- call_fn_indels_VarScan(path, merged_file, pick_gt_stdz)
-    
-  }
-  
-  return(fn_indels)
-}
-
-
-call_fp_indels <- function(path, caller, merged_file, pick_gt_stdz) {
-  
-  if(caller == "Freebayes") {
-    
-    fp_indels <- call_fp_indels_Freebayes(path, merged_file, pick_gt_stdz)
-    
-  } else if (caller == "Mutect2") {
-    
-    fp_indels <- call_fp_indels_gatk(path, merged_file, pick_gt_stdz)
-    
-  } else if (caller == "LoFreq") {
-    
-    fp_indels <- call_fp_indels_LoFreq(path, merged_file, pick_gt_stdz)
-    
-  } else if (caller == "VarDict") {
-    
-    fp_indels <- call_fp_indels_VarDict(path, merged_file, pick_gt_stdz)
-    
-  } else if (caller == "VarScan") {
-    
-    fp_indels <- call_fp_indels_VarScan(path, merged_file, pick_gt_stdz)
-    
-  }
-  
-  return(fp_indels)
-}
-
-
-
-plot_indels <- function(path, merged_file, caller) {
-    
-    if(caller == "Freebayes") {
-        
-        plots <- circular_plot_Freebayes(path, merged_file, caller)
-        
-    } else if (caller == "Mutect2") {
-        
-        plots <- circular_plot_gatk(path, merged_file, caller)
-        
-    } else if (caller == "LoFreq") {
-        
-        plots <- circular_plot_LoFreq(path, merged_file, caller)
-        
-    } else if (caller == "VarDict") {
-        
-        plots <- circular_plot_VarDict(path, merged_file, caller)
-        
-    } else if (caller == "VarScan") {
-        
-        plots <- circular_plot_VarScan(path, merged_file, caller)
-        
-    }
-    
-    return(plots)
-    
-}
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
diff --git a/R/gatk_common_helpers.R b/R/gatk_common_helpers.R
new file mode 100644
index 0000000..f6b6200
--- /dev/null
+++ b/R/gatk_common_helpers.R
@@ -0,0 +1,135 @@
+
+#TP SNVS-----------------------------------------------------------------------
+read_vcf_mutect2 <- function(path, gt, merged_file) {
+  #takes two files and produce a caller vcf file in a certain format 
+  vcf <- read.vcfR(paste0(path, "/", merged_file, "_Mutect2_norm.vcf"), verbose = FALSE )
+  
+   df = (vcf |>
+    merge_gatk(gt) |>
+    clean_gatk())
+  
+  return(df)
+  
+}
+
+merge_gatk <- function(gatk_somatic_vcf, merged_gt) {
+    #return cleaned vcf
+    gatk_s0  = gatk_somatic_vcf |> vcfR::getFIX() |> as.data.frame() |> setDT()
+    gatk_s1  = gatk_somatic_vcf |> extract_gt_tidy() |> setDT()
+    gatk_s21 = gatk_somatic_vcf |> extract_info_tidy() |> setDT()
+    gatk_somatic = cbind(gatk_s0[gatk_s1$Key, ], gatk_s1)
+    
+    #Merge everything into a common file
+    merged_gt$POS = as.character(merged_gt$POS)
+    merged_bnch = merge(merged_gt, gatk_somatic,  by = "POS", all.x = TRUE)
+    merged_bnch$POS = as.numeric(merged_bnch$POS)
+    merged_bnch = merged_bnch[order(POS)]
+
+    colnames(merged_bnch) = c(
+        "POS",	"Ground Truth REF",	"Ground Truth ALT",
+        "Ground Truth DP", "Ground Truth AD", 
+        "Ground Truth AF", "Run", "DP Indiv", "Count Indiv", 
+        "Freq Indiv", "CHROM", "ID",	"Mutect2 REF",	
+        "Mutect2 ALT", "Mutect2 QUAL",	"Mutect2 FILTER",
+        "key", "Indiv", "Mutect2 AD", "Mutect2 AF",
+        "Mutect2 DP", "gt_F1R2", "gt_F2R1", "gt_FAD",	
+        "gt_GQ", "gt_GT",	"gt_PGT",	"gt_PID",	"gt_PL",
+        "gt_PS",	"gt_SB",	"gt_GT_alleles"
+    )
+    
+    #after unlisting multiple variants in the same position, we must
+    # keep only unique FN POS
+    merged_bnch <- merged_bnch[, .SD[1], by = POS]
+    
+    return(
+        list(
+            "merged_bnch" = merged_bnch,
+            "gatk_somatic" = gatk_somatic)
+    )
+}
+
+
+clean_gatk <- function(df) {
+    # Extract relevant columns
+    df2 <- df$merged_bnch[, c(
+        "POS", 
+        
+        "Ground Truth REF", 
+        "Ground Truth ALT", 
+        "Ground Truth DP", 
+        "Ground Truth AF",
+        
+        "Mutect2 REF", 
+        "Mutect2 ALT", 
+        "Mutect2 DP", 
+        "Mutect2 AF"
+    ), with = FALSE]
+    
+    # Expand multiallelic GT sites into separate rows
+    df2 <- df2[, by = .(POS, `Ground Truth REF`, `Ground Truth DP`), .(
+        "Ground Truth ALT" = tstrsplit(`Ground Truth ALT`, ",") |> unlist(),
+        "Ground Truth AF"  = tstrsplit(`Ground Truth AF`, ",") |> unlist(),
+        "Mutect2 REF" = `Mutect2 REF`[1],
+        "Mutect2 ALT" = `Mutect2 ALT`[1],
+        "Mutect2 DP"  = `Mutect2 DP`[1],
+        "Mutect2 AF"  = `Mutect2 AF`[1]
+    )]
+    
+    # Match ALT alleles between GT and Mutect2
+    df2[, `:=` (
+        `ALT Match` = mapply(function(gt_alt, gatk_alt) {
+            if (is.na(gatk_alt)) return(FALSE)
+            return(gt_alt %in% unlist(str_split(gatk_alt, ",")))
+        }, `Ground Truth ALT`, `Mutect2 ALT`),
+        
+        `AF Match` = mapply(function(gt_alt, gatk_alt, gatk_af) {
+            if (is.na(gatk_alt) | is.na(gatk_af)) return(NA)
+            alt_list <- str_split(gatk_alt, ",")[[1]]
+            af_list  <- str_split(gatk_af, ",")[[1]]
+            idx <- which(alt_list == gt_alt)
+            if (length(idx) == 0) return(NA)
+            return(af_list[[idx]])
+        }, `Ground Truth ALT`, `Mutect2 ALT`, `Mutect2 AF`)
+    )]
+    
+    # Keep only matched alleles
+    df2[, `Mutect2 ALT` := ifelse(`ALT Match`, `Ground Truth ALT`, NA)]
+    df2[, `Mutect2 AF`  := `AF Match`]
+    df2[, `Mutect2 REF` := ifelse(`ALT Match`, `Mutect2 REF`, NA)]
+    df2[, `Mutect2 DP`  := ifelse(`ALT Match`, `Mutect2 DP`, NA)]
+    
+    # Classify as TP or FN
+    df2[, type := ifelse(is.na(`Mutect2 ALT`), "FN", "TP")]
+    
+    # ΔAF: Caller AF - Ground Truth AF (numeric)
+    df2[, `AF Deviation ` := NA_real_]
+    df2[type == "TP", `AF Deviation` := as.numeric(`Mutect2 AF`) - as.numeric(`Ground Truth AF`)]
+    
+    # Final output
+    df2 <- df2[, .(
+        POS,
+        `Ground Truth REF`, `Ground Truth ALT`, `Ground Truth DP`, `Ground Truth AF`,
+        `Mutect2 REF`, `Mutect2 ALT`, `Mutect2 DP`, `Mutect2 AF`,
+        type, `AF Deviation`
+    )]
+    
+    
+    recall = sum(!is.na(df2$`Mutect2 REF`)) / dim(df2)[1]
+    
+    return(list(
+        "vcf_snvs_cleaned" = df2,
+        "recall" = recall))
+}
+
+
+load_gatk_vcf <- function(path, merged_file){
+    #function to load caller vcf
+    Mutect2_somatic_vcf <- read.vcfR( paste0(path, "/", merged_file, 
+                                             "_Mutect2_norm.vcf"), verbose = FALSE )
+    
+    Mutect2_s0  = Mutect2_somatic_vcf |> vcfR::getFIX() |> as.data.frame() |> setDT()
+    Mutect2_s1  = Mutect2_somatic_vcf |> extract_gt_tidy() |> setDT()
+    Mutect2gatk_s21 = Mutect2_somatic_vcf |> extract_info_tidy() |> setDT()
+    Mutect2_somatic = cbind(Mutect2_s0[Mutect2_s1$Key, ], Mutect2_s1)
+    return(Mutect2_somatic)
+}
diff --git a/R/indels_common_helpers.R b/R/indels_common_helpers.R
new file mode 100644
index 0000000..bb09442
--- /dev/null
+++ b/R/indels_common_helpers.R
@@ -0,0 +1,184 @@
+
+load_gt_report_indels <- function(path, merged_file) {
+    #function to load Ground Truth bam-report 
+    a <- paste0(path, "/", merged_file, "_report.tsv") |>
+        readLines() |>
+        str_split(pattern = "\t", simplify = TRUE) |>
+        as.data.frame() |> 
+        setDT()
+    
+    a$V1 = NULL
+    a$V5 = NULL
+    
+    colnames(a) = c("POS", "REF", "DP", paste0("ALT_", 1:(ncol(a) - 3)))
+    
+    a = melt(
+        a, id.vars = c("POS", "REF", "DP"),
+        variable.factor = FALSE, value.factor = FALSE,
+        variable.name = "ALT", value.name = "Count"
+    )
+    
+    a = a[which(Count != "")]
+    a$POS = as.numeric(a$POS)
+    a$DP = as.numeric(a$DP)
+    a$ALT = str_split_i(a$Count, "\\:", 1)
+    a$Count = str_split_i(a$Count, "\\:", 2) |>
+        as.numeric()
+    a$Freq = round(a$Count / a$DP, digits = 6)
+    a = a[order(POS, -Count)]
+    a = a[which(REF != a$ALT & Count != 0)]
+    
+    # select indels
+    a_indels = a[which(ALT %ni% c("A", "C", "G", "T")), ]
+    #filter DEPTH>2
+    a_indels = a_indels[which(a_indels$Count >2), ]
+    
+    gt = list(
+        all = a,
+        indels = a_indels
+        
+    )
+    return(gt)
+}
+
+select_indels <- function(df){
+    #function to select indels from caller based on length of REF and ALT
+    
+    #identify indels based on length
+    indels = df[nchar(df$REF) != nchar(df$ALT)]
+    indels$mut = paste(indels$POS, indels$REF, indels$ALT, sep = ":")
+    
+    return(indels)
+}
+
+load_gt_vcf_indels <- function(path, merged_file, gt_indels){
+    #function to load Ground Truth vcf
+    ground_truth_vcf <- read.vcfR( paste0(path, "/",merged_file, 
+                                          "_ground_truth_norm.vcf"),
+                                   verbose = FALSE )
+    
+    ground_truth_vcf  = ground_truth_vcf |> vcfR::getFIX() |> as.data.frame() |> setDT()
+    
+    pick_gt = gt_indels[which(gt_indels$POS %in% ground_truth_vcf$POS)]
+    pick_gt$mut = paste(pick_gt$POS, 
+                        pick_gt$REF, 
+                        pick_gt$ALT, sep = ":")
+    return(pick_gt)
+}
+
+standardize_indels <- function(dt) {
+    #function to standardize indels
+    setDT(dt)
+    
+    #deletions
+    dt[grepl("^-", ALT), `:=` (
+        ALT = substring(REF, 1, 1), 
+        REF = paste0(REF, substring(ALT, 2)),
+        POS = POS - 1  #Adjust POS for deletions
+    )]
+    
+    #insertions
+    dt[grepl("^\\+", ALT), ALT := paste0(REF, substring(ALT, 2))]
+    
+    dt$mut = paste(dt$POS, 
+                   dt$REF, 
+                   dt$ALT, sep = ":")
+    return(dt)
+}
+
+gt_stdz_indels <- function(path, merged_file){
+    gt_all = load_gt_report_indels(path, merged_file)$all
+    gt_indels = load_gt_report_indels(path, merged_file)$indels
+    pick_gt = load_gt_vcf_indels(path, merged_file, gt_indels)
+    pick_gt_stdz = standardize_indels(pick_gt)
+    return(pick_gt_stdz)
+} 
+
+
+call_tp_indels <- function(path, caller, merged_file, pick_gt_stdz) {
+  
+  if(caller == "Freebayes") {
+    
+    tp_indels <- final_tp_indels_Freebayes(path, merged_file, pick_gt_stdz)
+    
+  } else if (caller == "Mutect2") {
+    
+    tp_indels <- final_tp_indels_gatk(path, merged_file, pick_gt_stdz)
+    
+  } else if (caller == "LoFreq") {
+    
+    tp_indels <- final_tp_indels_LoFreq(path, merged_file, pick_gt_stdz)
+    
+  } else if (caller == "VarDict") {
+    
+    tp_indels <- final_tp_indels_VarDict(path, merged_file, pick_gt_stdz)
+    
+  } else if (caller == "VarScan") {
+    
+    tp_indels <- final_tp_indels_VarScan(path, merged_file, pick_gt_stdz)
+    
+  }
+  
+  return(tp_indels)
+}
+
+
+
+call_fn_indels <- function(path, caller, merged_file, pick_gt_stdz) {
+  
+  if(caller == "Freebayes") {
+    
+    fn_indels <- call_fn_indels_Freebayes(path, merged_file, pick_gt_stdz)
+    
+  } else if (caller == "Mutect2") {
+    
+    fn_indels <- call_fn_indels_gatk(path, merged_file, pick_gt_stdz)
+    
+  } else if (caller == "LoFreq") {
+    
+    fn_indels <- call_fn_indels_LoFreq(path, merged_file, pick_gt_stdz)
+    
+  } else if (caller == "VarDict") {
+    
+    fn_indels <- call_fn_indels_VarDict(path, merged_file, pick_gt_stdz)
+    
+  } else if (caller == "VarScan") {
+    
+    fn_indels <- call_fn_indels_VarScan(path, merged_file, pick_gt_stdz)
+    
+  }
+  
+  return(fn_indels)
+}
+
+
+call_fp_indels <- function(path, caller, merged_file, pick_gt_stdz) {
+  
+  if(caller == "Freebayes") {
+    
+    fp_indels <- call_fp_indels_Freebayes(path, merged_file, pick_gt_stdz)
+    
+  } else if (caller == "Mutect2") {
+    
+    fp_indels <- call_fp_indels_gatk(path, merged_file, pick_gt_stdz)
+    
+  } else if (caller == "LoFreq") {
+    
+    fp_indels <- call_fp_indels_LoFreq(path, merged_file, pick_gt_stdz)
+    
+  } else if (caller == "VarDict") {
+    
+    fp_indels <- call_fp_indels_VarDict(path, merged_file, pick_gt_stdz)
+    
+  } else if (caller == "VarScan") {
+    
+    fp_indels <- call_fp_indels_VarScan(path, merged_file, pick_gt_stdz)
+    
+  }
+  
+  return(fp_indels)
+}
+
+
+
+
diff --git a/R/indels_gatk_helpers.R b/R/indels_gatk_helpers.R
new file mode 100644
index 0000000..747996a
--- /dev/null
+++ b/R/indels_gatk_helpers.R
@@ -0,0 +1,89 @@
+
+categorize_fns_gatk <- function(caller, fn_var) {
+    #function to identify FN categories
+    
+    caller$POS = as.numeric(caller$POS)
+    fn_var$POS = as.numeric(fn_var$POS)
+    colnames(fn_var) = c("POS","REF", "Ground Truth DP",  "ALT",
+                         "Count", "Ground Truth AF","mut","type")
+    #Same POS
+    same_POS <- merge(fn_var, caller, by = c("POS"))
+    fn_var[, category := ifelse(POS %in% same_POS$POS, "diff REF", "not exist")]
+    
+    #Same POS & REF
+    same_POS_REF <- merge(fn_var, caller, by = c("POS", "REF"))
+    # Update only rows where POS and REF match
+    fn_var[POS %in% same_POS_REF$POS & REF %in% same_POS_REF$REF, 
+           category := "diff ALT"]
+    
+    return(fn_var)
+}
+
+categorize_fps_gatk <- function(pick_gt_stdz, fp_indels_gatk) {
+    #function to identify FP categories
+    pick_gt_stdz$POS = as.numeric(pick_gt_stdz$POS)
+    fp_indels_gatk$POS = as.numeric(fp_indels_gatk$POS)
+    
+    colnames(fp_indels_gatk) = c("CHROM", "POS", "ID", "REF", "ALT", "Mutect2 QUAL",
+                                 "Mutect2 FILTER", "key", "Indiv", "Mutect2 AD", 
+                                 "Mutect2 AF", "Mutect2 DP", "gt_F1R2", "gt_F2R1", 
+                                 "gt_FAD", "gt_GQ", "gt_GT", "gt_PGT", "gt_PID", 
+                                 "gt_PL" , "gt_PS", "gt_SB", "gt_GT_alleles", 
+                                 "mut", "Ground Truth DP","DP Percentage", "type")
+    #Same POS
+    same_POS <- merge(fp_indels_gatk, pick_gt_stdz, by = c("POS"))
+    fp_indels_gatk[, category := ifelse(POS %in% same_POS$POS, "diff REF", "not exist")]
+    
+    #Same POS & REF
+    same_POS_REF <- merge(fp_indels_gatk, pick_gt_stdz, by = c("POS", "REF"))
+    # Update only rows where POS and REF match
+    fp_indels_gatk[POS %in% same_POS_REF$POS & REF %in% same_POS_REF$REF, 
+                   category := "diff ALT"]
+    
+    return(fp_indels_gatk)
+}
+
+final_fp_indels_gatk <- function(path, merged_file, pick_gt, gt_all){
+    #function to identify FP indels
+    Mutect2_somatic <- load_gatk_vcf(path, merged_file)
+    Mutect2_somatic_indels <-select_indels(Mutect2_somatic)
+    fp_var = fp_snvs_gatk(Mutect2_somatic_indels, pick_gt, gt_all)
+    return(fp_var)
+}
+
+final_fn_indels_gatk <- function(path, merged_file, pick_gt){
+    #function to identify FN indels
+    Mutect2_somatic <- load_gatk_vcf(path, merged_file)
+    Mutect2_somatic_indels <-select_indels(Mutect2_somatic)
+    fn_var = define_fn(Mutect2_somatic_indels, pick_gt)
+    colnames(fn_var) = c("POS", "Ground Truth REF", "Ground Truth DP", 
+                         "Ground Truth ALT", "Count", "Ground Truth AF", "mut", "type")
+    return(fn_var)
+}
+
+final_tp_indels_gatk <- function(path, merged_file, pick_gt){
+    #function to identify TP indels
+    Mutect2_somatic <- load_gatk_vcf(path, merged_file)
+    Mutect2_somatic_indels <-select_indels(Mutect2_somatic)
+    tp_var = define_tp(Mutect2_somatic_indels, pick_gt)
+    return(tp_var)
+}
+
+call_fn_indels_gatk <- function(path, merged_file, pick_gt_stdz){
+  #function to output categorized FN indels
+  fn_indels_gatk = final_fn_indels_gatk(path, merged_file, pick_gt_stdz)
+  Mutect2_somatic = load_gatk_vcf(path, merged_file)
+  Mutect2_indels = select_indels(Mutect2_somatic)
+  fn_indels_gatk_categories = categorize_fns_gatk(Mutect2_indels, fn_indels_gatk)
+  
+  return(fn_indels_gatk_categories)
+}
+
+call_fp_indels_gatk <- function(path, merged_file, pick_gt_stdz){
+  #function to output categorized FP indels
+  gt_all = load_gt_report_indels(path, merged_file)$all |> standardize_indels()
+  fp_indels_gatk = final_fp_indels_gatk(path, merged_file, pick_gt_stdz, gt_all)
+  fp_indels_gatk_categories = categorize_fps_gatk(pick_gt_stdz, fp_indels_gatk)
+  
+  return(fp_indels_gatk_categories)
+}
diff --git a/R/libraries.R b/R/libraries.R
index 7908fde..c979415 100644
--- a/R/libraries.R
+++ b/R/libraries.R
@@ -1,21 +1,20 @@
-library(data.table)
-library(stringr)
-library(vcfR)
+suppressPackageStartupMessages(library(data.table))
+suppressPackageStartupMessages(library(stringr))
+suppressPackageStartupMessages(library(vcfR))
 
+suppressPackageStartupMessages(library(ggplot2))
+suppressPackageStartupMessages(library(ggforce))
+suppressPackageStartupMessages(library(ggsci))
+suppressPackageStartupMessages(library(ggvenn))
+suppressPackageStartupMessages(library(patchwork))
 
-library(ggplot2)
-library(ggforce)
-library(ggsci)
-library(ggvenn)
-library(patchwork)
+suppressPackageStartupMessages(library(optparse))
 
-library(optparse)
+suppressPackageStartupMessages(library(GenomicAlignments))
+suppressPackageStartupMessages(library(Rsamtools))
+# suppressPackageStartupMessages(library(seqinr))
 
-library(GenomicAlignments)
-library(Rsamtools)
-# library(seqinr)
+suppressPackageStartupMessages(library(dplyr))
+suppressPackageStartupMessages(library(colorspace))
 
-library(dplyr)
-library(colorspace)
-
-# library(GenomicRanges)
\ No newline at end of file
+# suppressPackageStartupMessages(library(GenomicRanges))
diff --git a/R/snvs_common_helpers.R b/R/snvs_common_helpers.R
new file mode 100644
index 0000000..80fe7b0
--- /dev/null
+++ b/R/snvs_common_helpers.R
@@ -0,0 +1,261 @@
+
+#TP ---------------------------------------------------------------------------
+gt_analysis <- function(runs, folder, merged_file) {
+    
+    nt_runs = list()
+    #ground truth   variants from individual files
+    for(r in runs) {
+  
+        a <- paste0(folder, "/", r, "/", r, "_report.tsv") |>
+            readLines() |>
+            str_split(pattern = "\t", simplify = TRUE) |>
+            as.data.frame() |> 
+            setDT()
+        
+        a$V1 = NULL
+        a$V5 = NULL
+        
+        colnames(a) = c("POS", "REF", "DP", paste0("Nt_", 1:(ncol(a) - 3)))
+        
+        a = melt(
+            a, id.vars = c("POS", "REF", "DP"),
+            variable.factor = FALSE, value.factor = FALSE,
+            variable.name = "Nt", value.name = "Count"
+        )
+        
+        a = a[which(Count != "")]
+        
+        a$POS = as.numeric(a$POS)
+        a$DP = as.numeric(a$DP)
+        
+        a$Nt = str_split_i(a$Count, "\\:", 1)
+        
+        a$Count = str_split_i(a$Count, "\\:", 2) |>
+            as.numeric()
+        
+        a$Freq = round(100 * a$Count / a$DP, digits = 6)
+        
+        a = a[order(POS, -Count)]
+        
+        a = a[which(REF != a$Nt & Count != 0)]
+        
+        b = a[which(Nt %in% c("A", "C", "G", "T")), ]
+        
+        nt_runs[[ as.character(r) ]] = b
+    }
+    
+    nt_runs = rbindlist(nt_runs, idcol = "Run")
+    
+    pos_of_interest = nt_runs[which(Freq == 100)]$POS |> unique()
+    
+    gt_runs = nt_runs[POS %in% pos_of_interest & Freq == "100"]
+    
+    #same process reports.tsv files for Merged file
+    a <- paste0(folder, "/", merged_file , "_report.tsv") |> 
+        readLines() |>
+        str_split(pattern = "\t", simplify = TRUE) |> 
+        as.data.frame() |> 
+        setDT()
+    
+    a$V1 = NULL
+    # a$V3 = NULL
+    a$V5 = NULL
+    
+    colnames(a) = c("POS", "REF", "DP", paste0("Nt_", 1:(ncol(a) - 3)))
+    
+    a = melt(
+        a, id.vars = c("POS", "REF", "DP"),
+        variable.factor = FALSE, value.factor = FALSE,
+        variable.name = "Nt", value.name = "Count"
+    )
+    
+    a = a[which(Count != "")]
+    
+    a$POS = as.numeric(a$POS)
+    a$DP = as.numeric(a$DP)
+    
+    a$Nt = str_split_i(a$Count, "\\:", 1)
+    
+    a$Count = str_split_i(a$Count, "\\:", 2) |>
+        as.numeric()
+    
+    a$Freq = round(100 * a$Count / a$DP, digits = 6)
+    
+    a = a[order(POS, -Count)]
+    
+    a = a[which(REF != a$Nt & Count != 0)]
+    
+    b = a[which(Nt %in% c("A", "C", "G", "T")), ]
+    
+    
+    #merged_gt = b[which(POS %in% gt_runs$POS)]
+    merged_gt <- merge(b, gt_runs, by = c("POS", "REF", "Nt"))
+    colnames(merged_gt) = c("POS", "REF", "ALT", "DP", "Count", "Freq",
+                            "Run", "DP Indiv", "Count Indiv", "Freq Indiv")
+    
+    merged_gt = merged_gt[order(POS)]
+    
+    merged_gt$Freq = merged_gt$Freq / 100
+
+    
+    return(merged_gt)
+    
+}
+
+read_vcf_snvs_TP <- function(path, caller, gt, merged_file) {
+    
+    if(caller == "Freebayes") {
+        
+        vcf_df <- read_vcf_freebayes(path, gt, merged_file)
+        
+    } else if (caller == "Mutect2") {
+        
+        vcf_df <- read_vcf_mutect2(path, gt, merged_file)
+        
+    } else if (caller == "LoFreq") {
+        
+        vcf_df <- read_vcf_LoFreq(path, gt, merged_file)
+        
+    } else if (caller == "VarDict") {
+        
+        vcf_df <- read_vcf_VarDict(path, gt, merged_file)
+        
+    } else if (caller == "VarScan") {
+        
+        vcf_df <- read_vcf_VarScan(path, gt, merged_file)
+        
+    }
+    
+    return(vcf_df)
+}
+
+
+#FP & FN ----------------------------------------------------------------------
+
+load_gt_report <- function(path, merged_file) {
+    #function to load Ground Truth bam-report 
+    a <- paste0(path, "/", merged_file, "_report.tsv") |>
+        readLines() |>
+        str_split(pattern = "\t", simplify = TRUE) |>
+        as.data.frame() |> 
+        setDT()
+    
+    a$V1 = NULL
+    a$V5 = NULL
+    
+    colnames(a) = c("POS", "REF", "DP", paste0("ALT_", 1:(ncol(a) - 3)))
+    
+    a = melt(
+        a, id.vars = c("POS", "REF", "DP"),
+        variable.factor = FALSE, value.factor = FALSE,
+        variable.name = "ALT", value.name = "Count"
+    )
+    
+    a = a[which(Count != "")]
+    
+    a$POS = as.numeric(a$POS)
+    a$DP = as.numeric(a$DP)
+    
+    a$ALT = str_split_i(a$Count, "\\:", 1)
+    
+    a$Count = str_split_i(a$Count, "\\:", 2) |>
+        as.numeric()
+    
+    a$Freq = round(a$Count / a$DP, digits = 6)
+    
+    a = a[order(POS, -Count)]
+    
+    a = a[which(REF != a$ALT & Count != 0)]
+    
+    # select SNVs
+    a_snvs = a[which(ALT %in% c("A", "C", "G", "T")), ]
+    #filter DEPTH>2
+    a_snvs = a_snvs[which(a_snvs$Count >2), ]
+    
+    
+    gt = list(
+        all = a,
+        snvs = a_snvs
+        
+    )
+    return(gt)
+}
+
+load_gt_vcf <- function(path, merged_file, gt_snvs){
+    #function to load Ground Truth vcf
+    ground_truth_vcf <- read.vcfR( paste0(path, "/",merged_file, 
+                                          "_ground_truth_norm.vcf"),
+                                   verbose = FALSE )
+    
+    ground_truth_vcf  = ground_truth_vcf |> vcfR::getFIX() |> as.data.frame() |> setDT()
+    
+    pick_gt = gt_snvs[which(gt_snvs$POS %in% ground_truth_vcf$POS)]
+    pick_gt$mut = paste(pick_gt$POS, 
+                        pick_gt$REF, 
+                        pick_gt$ALT, sep = ":")
+    return(pick_gt)
+}
+
+select_snvs <- function(df){
+    # select SNVs from caller based on length of REF and ALT
+    snvs = df[nchar(df$REF) == nchar(df$ALT)]
+    snvs = snvs[which(nchar(snvs$REF) <2), ]
+    snvs = snvs[which(nchar(snvs$ALT) <2), ]
+    snvs$mut = paste(snvs$POS, snvs$REF, snvs$ALT, sep = ":")
+    
+    return(snvs)
+}
+
+read_vcf_snvs_FP <- function(path, caller, merged_file, pick_gt, gt_all) {
+    
+    if(caller == "Freebayes") {
+        
+        fp_var <- final_fp_snvs_Freebayes(path, merged_file, pick_gt, gt_all)
+        
+    } else if (caller == "Mutect2") { 
+        
+        fp_var <- final_fp_snvs_gatk(path, merged_file, pick_gt, gt_all)
+        
+    } else if (caller == "LoFreq") {
+        
+        fp_var <- final_fp_snvs_LoFreq(path, merged_file, pick_gt, gt_all)
+        
+    } else if (caller == "VarDict") {
+        
+        fp_var <- final_fp_snvs_VarDict(path, merged_file, pick_gt, gt_all)
+        
+    } else if (caller == "VarScan") {
+        
+        fp_var <- final_fp_snvs_VarScan(path, merged_file, pick_gt, gt_all)
+        
+    }
+    
+    return(fp_var)
+}
+
+read_vcf_snvs_FN <- function(path, caller, merged_file, pick_gt) {
+    
+    if(caller == "Freebayes") {
+        
+        fn_var <- final_fn_snvs_Freebayes(path, merged_file, pick_gt)
+        
+    } else if (caller == "Mutect2") {
+        
+        fn_var <- final_fn_snvs_gatk(path, merged_file, pick_gt)
+        
+    } else if (caller == "LoFreq") {
+        
+        fn_var <- final_fn_snvs_LoFreq(path, merged_file, pick_gt)
+        
+    } else if (caller == "VarDict") {
+        
+        fn_var <- final_fn_snvs_VarDict(path, merged_file, pick_gt)
+        
+    } else if (caller == "VarScan") {
+        
+        fn_var <- final_fn_snvs_VarScan(path, merged_file, pick_gt)
+        
+    }
+    
+    return(fn_var)
+}
diff --git a/R/snvs_gatk_helpers.R b/R/snvs_gatk_helpers.R
new file mode 100644
index 0000000..a7abaa6
--- /dev/null
+++ b/R/snvs_gatk_helpers.R
@@ -0,0 +1,178 @@
+
+fp_snvs_gatk <- function(Mutect2_somatic_snvs, pick_gt, gt_all){#term snvs is redundant
+    #find MUtect2 FP variants
+    fp_var = define_fp(Mutect2_somatic_snvs, pick_gt)
+    fp_var$gt_AF = as.numeric(fp_var$gt_AF)
+    colnames(fp_var) = c("CHROM", "POS","ID", "Mutect2 REF",	
+                         "Mutect2 ALT", "Mutect2 QUAL",	"Mutect2 FILTER",
+                         "key", "Indiv", "Mutect2 AD", "Mutect2 AF",
+                         "Mutect2 DP", "gt_F1R2", "gt_F2R1", "gt_FAD",	
+                         "gt_GQ", "gt_GT",	"gt_PGT",	"gt_PID",	"gt_PL",
+                         "gt_PS",	"gt_SB",	"gt_GT_alleles", "mut")
+    
+    #find DP of FP variants'  location in GT
+    tmp = gt_all[which(POS %in% unique(fp_var$POS))]
+    a = unique(tmp, by = "POS")
+    #to include the presence multiple variants in a POS
+    index = match(fp_var$POS, a$POS)
+    fp_var$`Ground Truth DP` = a[index]$DP
+    fp_var$`DP Percentage` = fp_var$`Mutect2 DP`/fp_var$`Ground Truth DP`
+    fp_var$type = "FP"
+    return(fp_var)
+}
+
+final_fp_snvs_gatk <- function(path, merged_file, pick_gt, gt_all){
+    
+    Mutect2_somatic <- load_gatk_vcf(path, merged_file)
+    Mutect2_somatic_snvs <-select_snvs(Mutect2_somatic)
+    fp_var <- fp_snvs_gatk(Mutect2_somatic_snvs, pick_gt, gt_all)
+    
+    return(fp_var)
+}
+
+final_fn_snvs_gatk <- function(path, merged_file, pick_gt){
+    
+    Mutect2_somatic <- load_gatk_vcf(path, merged_file)
+    Mutect2_somatic_snvs <- select_snvs(Mutect2_somatic)
+    fn_var <- define_fn(Mutect2_somatic_snvs, pick_gt)
+    colnames(fn_var) = c("POS", "Ground Truth REF", "Ground Truth DP",
+                         "Ground Truth ALT", "Count", "Ground Truth AF",
+                         "mut", "type")
+    return(fn_var)
+}
+
+fp_violin_plots_gatk <- function(q) {
+    #function to produce variants' barplots for coverage and AF
+    #q[which(q$`Mutect2 ALT` == "")]$`Mutect2 ALT` = NA
+    q$POS = as.numeric(q$POS)
+    q$`Ground Truth DP` = as.numeric(q$`Ground Truth DP`)
+    q$`Mutect2 DP` = as.numeric(q$`Mutect2 DP`)
+    
+    #DP plot
+    df = q[, c(
+        "POS", 
+        "Ground Truth DP",
+        "Mutect2 DP"
+    ), with = FALSE] |>
+        unique() |>
+        
+        melt(id.vars = "POS", variable.factor = FALSE, value.factor = FALSE)
+    
+    o1 = ggplot(data = df) +
+        
+        geom_point(aes(x = variable, y = value, fill = variable),
+                   position = position_jitternormal(sd_x = .01, sd_y = 0),
+                   shape = 21, stroke = .1, size = 2.5) +
+        
+        geom_violin(aes(x = variable, y = value, fill = variable),
+                    width = .25, alpha = .5, outlier.shape = NA) +
+        
+        scale_fill_manual(
+            values = c(
+                "Ground Truth DP" = "#43ae8d",
+                "Mutect2 DP"      = "#ae4364"
+            )
+        ) +
+        
+        scale_x_discrete(
+            breaks = c("Ground Truth DP", "Mutect2 DP"),
+            labels = c("Ground Truth", "Mutect2")
+        ) +
+        
+        scale_y_continuous(labels = scales::comma) +
+        
+        theme_minimal() +
+        
+        theme(
+            legend.position = "none",
+            
+            axis.title.x = element_blank(),
+            axis.title.y = element_text(face = "bold", size = 13),
+            axis.text.x = element_text(face = "bold", size = 13),
+            axis.text.y = element_text(face = "bold", size = 13),
+            
+            axis.line = element_line(),
+            axis.ticks = element_line(),
+            
+            panel.grid = element_blank(),
+            
+            plot.margin = margin(20, 20, 20, 20)
+        ) +
+        
+        labs(
+            y = "Coverage (No. of reads)"
+        )
+    
+    return(o1)
+}
+
+fp_af_barplot_gatk <- function(q){
+    #FP AF plot
+    df = q[, c(
+        "POS",
+        "Mutect2 AF"
+    ), with = FALSE] |>
+        unique() |>
+        
+        melt(id.vars = "POS", variable.factor = FALSE, value.factor = FALSE)
+    
+    o2 = ggplot(data = df[which(!is.na(value) & value != 0)]) +
+        
+        geom_point(aes(x = variable, y = value, fill = variable),
+                   position = position_jitternormal(sd_x = .01, sd_y = 0),
+                   shape = 21, stroke = .1, size = 2.5) +
+        
+        geom_boxplot(aes(x = variable, y = value, fill = variable),
+                     width = .25, alpha = .5, outlier.shape = NA) +
+        
+        scale_fill_manual(
+            values = c(
+                #"Ground Truth AF" = "#43ae8d",
+                "Mutect2 AF"      = "#ae4364"
+            )
+        ) +
+        
+        scale_x_discrete(
+            labels = c("Mutect2 FP Variants")
+        ) +
+        
+        scale_y_continuous(labels = scales::percent, trans = "log10") +
+        
+        theme_minimal() +
+        
+        theme(
+            legend.position = "none",
+            
+            axis.title.x = element_blank(),
+            axis.title.y = element_text(face = "bold", size = 13),
+            axis.text.x = element_text(face = "bold", size = 13),
+            axis.text.y = element_text(face = "bold", size = 13),
+            
+            axis.line = element_line(),
+            axis.ticks = element_line(),
+            
+            panel.grid = element_blank(),
+            
+            plot.margin = margin(20, 20, 20, 20)
+        ) +
+        
+        labs(
+            y = "Allele Frequency"
+        )
+    return(o2)
+    
+}
+
+plot_snvs_FP_gatk <- function(df, merged_file) {
+    #plotting function
+    out1 = fp_violin_plots_gatk(df)
+    out2 = fp_af_barplot_gatk(df)
+    
+    multi = out1 + out2 +
+        
+        plot_layout(
+            widths = c(1, 1)
+        )
+    return(multi)
+}
+
diff --git a/R/viz_common_helpers.R b/R/viz_common_helpers.R
new file mode 100644
index 0000000..e0fe8e6
--- /dev/null
+++ b/R/viz_common_helpers.R
@@ -0,0 +1,300 @@
+
+#TP SNVS-----------------------------------------------------------------------
+
+plot_snvs_TP <- function(gt_snv_tp_comparison, vcf_path, gt_path, caller, merged_file) {
+    
+    df = fread(paste0(gt_snv_tp_comparison, "/", merged_file, "_", caller, "_snvs_TV.tsv"))
+    
+    vcf_GT <- read.vcfR(paste0(vcf_path, "/", merged_file, "_ground_truth_norm.vcf"), verbose = FALSE )
+    
+    vcf_caller <- read.vcfR(paste0(vcf_path, "/", merged_file, "_", caller, "_norm.vcf"), verbose = FALSE )
+    
+    if(caller == "Freebayes") {
+
+        plots <- plot_snvs_TP_freebayes(df, vcf_GT, vcf_caller, merged_file)
+
+    } else if (caller == "Mutect2") {
+
+        plots <- plot_snvs_TP_gatk(df, vcf_GT, vcf_caller, merged_file)
+
+    } else if (caller == "LoFreq") {
+
+        plots <- plot_snvs_TP_LoFreq(df, vcf_GT, vcf_caller, merged_file)
+
+    } else if (caller == "VarDict") {
+
+        plots <- plot_snvs_TP_VarDict(df, vcf_GT, vcf_caller, merged_file)
+
+    } else if (caller == "VarScan") {
+
+        plots <- plot_snvs_TP_VarScan(df, vcf_GT, vcf_caller, merged_file)
+
+    }
+    
+    return(plots)
+    
+}
+
+#FP & FN SNVS------------------------------------------------------------------
+
+fn_dp_barplot <- function(q, caller){
+    #FP DP plot
+    df = q[, c(
+        "POS", 
+        "Ground Truth DP"
+    ), with = FALSE] |>
+        unique() |>
+        melt(id.vars = "POS", variable.factor = FALSE, value.factor = FALSE)
+    
+    #set color
+    if(caller == "Freebayes") {
+        
+        color <- "#ae8d43"
+        
+    } else if (caller == "Mutect2") {
+        
+        color <- "#ae4364"
+        
+    } else if (caller == "LoFreq") {
+        
+        color <- "#c974ba"
+        
+    } else if (caller == "VarDict") {
+        
+        color <- "#8d43ae"
+        
+    } else if (caller == "VarScan") {
+        
+        color <- "#439aae"
+    }
+    
+    
+    o3=ggplot(data = df) +
+        
+        geom_point(aes(x = variable, y = value, fill = variable),
+                   position = position_jitternormal(sd_x = .01, sd_y = 0),
+                   shape = 21, stroke = .1, size = 2.5) +
+        
+        geom_boxplot(aes(x = variable, y = value, fill = variable),
+                     width = .25, alpha = .5, outlier.shape = NA) +
+        
+        scale_fill_manual(
+            values = c(
+                "Ground Truth DP" = color
+            )
+        ) +
+        
+        scale_x_discrete(
+            labels = c(paste0(caller, " FN Variants"))
+        ) +
+        
+        scale_y_continuous(labels = scales::comma) +
+        
+        theme_minimal() +
+        
+        theme(
+            legend.position = "none",
+            
+            axis.title.x = element_blank(),
+            axis.title.y = element_text(face = "bold", size = 13),
+            
+            axis.text.x = element_text(face = "bold", size = 13),
+            axis.text.y = element_text(face = "bold", size = 13),
+            
+            axis.line = element_line(),
+            axis.ticks = element_line(),
+            
+            panel.grid = element_blank(),
+            
+            plot.margin = margin(20, 20, 20, 20)
+        ) +
+        
+        labs(
+            y = "Coverage (No. of reads)"
+        )
+    return(o3)
+    
+}
+
+fn_af_barplot <- function(q, caller){
+    #FP AF plot
+    df = q[, c(
+        "POS",
+        "Ground Truth AF"
+    ), with = FALSE] |>
+        unique() |>
+        
+        melt(id.vars = "POS", variable.factor = FALSE, value.factor = FALSE)
+    
+    #set color
+    if(caller == "Freebayes") {
+        
+        color <- "#ae8d43"
+        
+    } else if (caller == "Mutect2") {
+        
+        color <- "#ae4364"
+        
+    } else if (caller == "LoFreq") {
+        
+        color <- "#c974ba"
+        
+    } else if (caller == "VarDict") {
+        
+        color <- "#8d43ae"
+        
+    } else if (caller == "VarScan") {
+        
+        color <- "#439aae"
+    }
+    
+    o4 = ggplot(data = df[which(!is.na(value) & value != 0)]) +
+        
+        geom_point(aes(x = variable, y = value, fill = variable),
+                   position = position_jitternormal(sd_x = .01, sd_y = 0),
+                   shape = 21, stroke = .1, size = 2.5) +
+        
+        geom_boxplot(aes(x = variable, y = value, fill = variable),
+                     width = .25, alpha = .5, outlier.shape = NA) +
+        
+        scale_fill_manual(
+            values = c(
+                "Ground Truth AF" = color
+            )
+        ) +
+        
+        scale_x_discrete(
+            labels = c(paste0(caller, " FN Variants"))
+        ) +
+        
+        scale_y_continuous(labels = scales::percent, trans = "log10") +
+        
+        theme_minimal() +
+        
+        theme(
+            legend.position = "none",
+            
+            axis.title.x = element_blank(),
+            axis.title.y = element_text(face = "bold", size = 13),
+            axis.text.x = element_text(face = "bold", size = 13),
+            axis.text.y = element_text(face = "bold", size = 13),
+            
+            axis.line = element_line(),
+            axis.ticks = element_line(),
+            
+            panel.grid = element_blank(),
+            
+            plot.margin = margin(20, 20, 20, 20)
+        ) +
+        
+        labs(
+            y = "Allele Frequency"
+        )
+    return(o4)
+    
+}
+
+plot_snvs_FP <- function(gt_comparison, caller, merged_file) {
+
+    # Construct file path
+    file_path <- paste0(gt_comparison, "/", merged_file, "_", caller, "_snvs_FP.tsv")
+
+    # Check if file exists
+    if (!file.exists(file_path)) {
+        stop(paste("File does not exist:", file_path))
+    }
+
+    # Read the file
+    df <- tryCatch(
+        fread(file_path),
+        error = function(e) {
+            stop(paste("Error reading file:", file_path, "\n", e$message))
+        }
+    )
+
+    # Check if the file is empty
+    if (nrow(df) == 0) {
+        warning(paste("File is empty:", file_path))
+        # Return a placeholder plot or NULL
+        return(ggplot() + labs(title = paste("No FP snvs data for", caller), x = NULL, y = NULL))
+    }
+
+    # Call specific plotting function based on the caller
+    if (caller == "Freebayes") {
+        fp_plot <- plot_snvs_FP_Freebayes(df, merged_file)
+    } else if (caller == "Mutect2") {
+        fp_plot <- plot_snvs_FP_gatk(df, merged_file)
+    } else if (caller == "LoFreq") {
+        fp_plot <- plot_snvs_FP_LoFreq(df, merged_file)
+    } else if (caller == "VarDict") {
+        fp_plot <- plot_snvs_FP_VarDict(df, merged_file)
+    } else if (caller == "VarScan") {
+        fp_plot <- plot_snvs_FP_VarScan(df, merged_file)
+    } else {
+        stop(paste("Unknown caller:", caller))
+    }
+
+    return(fp_plot)
+}
+
+plot_snvs_FN <- function(gt_comparison, caller, merged_file) {
+    
+    # Construct file path
+    file_path <- paste0(gt_comparison, "/", merged_file, "_", caller, "_snvs_FN.tsv")
+    
+    # Check if file exists
+    if (!file.exists(file_path)) {
+        stop(paste("File does not exist:", file_path))
+    }
+    
+    # Read the file
+    df <- fread(file_path)
+    
+    # Check if the file is empty
+    if (nrow(df) == 0) {
+        warning(paste("File is empty:", file_path))
+        # Return a placeholder plot or NULL
+        return(ggplot() + labs(title = paste("No FN snvs data for", caller), x = NULL, y = NULL))
+    }
+    
+    # Generate subplots if the file is not empty
+    fn_plot1 <- fn_dp_barplot(df, caller)
+    fn_plot2 <- fn_af_barplot(df, caller)
+    
+    # Combine the subplots
+    fn_plot <- fn_plot1 + fn_plot2 +
+        plot_layout(
+            widths = c(1, 1)
+        )
+    
+    return(fn_plot)
+}
+
+#INDELs------------------------------------------------------------------------
+plot_indels <- function(path, merged_file, caller) {
+    
+    if(caller == "Freebayes") {
+        
+        plots <- circular_plot_Freebayes(path, merged_file, caller)
+        
+    } else if (caller == "Mutect2") {
+        
+        plots <- circular_plot_gatk(path, merged_file, caller)
+        
+    } else if (caller == "LoFreq") {
+        
+        plots <- circular_plot_LoFreq(path, merged_file, caller)
+        
+    } else if (caller == "VarDict") {
+        
+        plots <- circular_plot_VarDict(path, merged_file, caller)
+        
+    } else if (caller == "VarScan") {
+        
+        plots <- circular_plot_VarScan(path, merged_file, caller)
+        
+    }
+    
+    return(plots)
+    
+}
\ No newline at end of file
diff --git a/R/helpers_gatk.R b/R/viz_gatk_helpers.R
similarity index 64%
rename from R/helpers_gatk.R
rename to R/viz_gatk_helpers.R
index 09cf186..6ae4c33 100644
--- a/R/helpers_gatk.R
+++ b/R/viz_gatk_helpers.R
@@ -1,30 +1,10 @@
-#'A script, written in R, where all the appropriate functions for 
-#'the analysis of Mutect2 are located.
-#'
-#'
-#'Authors: Nikos Pechlivanis(github:npechl), Stella Fragkouli(github:sfragkoul)
-#'
-#'
-
-#TP SNVS-----------------------------------------------------------------------
-read_vcf_mutect2 <- function(path, gt, merged_file) {
-  #takes two files and produce a caller vcf file in a certain format 
-  vcf <- read.vcfR(paste0(path, "/", merged_file, "_Mutect2_norm.vcf"), verbose = FALSE )
-  
-  vcf_df = vcf |>
-    merge_gatk(gt) |>
-    clean_gatk()
-  
-  return(vcf_df)
-  
-}
-
+#SNVS-----------------------------------------------------------------------
 plot_snvs_TP_gatk <- function(df, vcf_GT, vcf_caller, merged_file) {
   #plotting function
   out1 = bar_plots_gatk(df)
   out2 = density_plot_gatk(df)
   out3 = bubble_plots_gatk(df)
-  out4 = venn_plot_gatk(vcf_GT, vcf_caller)
+  #out4 = venn_plot_gatk(vcf_GT, vcf_caller)
   
   multi2 = out2$groundtruth / out2$mutect2 &
     
@@ -40,127 +20,22 @@ plot_snvs_TP_gatk <- function(df, vcf_GT, vcf_caller, merged_file) {
       widths = c(1, 1, 3)
     )
   
-  ann2 = out3 + out4 +
-    
-    plot_layout(
-      widths = c(2, 1)
-    )
+  # ann2 = out3 + out4 +
+  #   
+  #   plot_layout(
+  #     widths = c(2, 1)
+  #   )
   
-  multi = ann1 / ann2 +
+  multi = ann1 / out3 +
     
     plot_layout(heights = c(1.5, 1)) + 
     plot_annotation(title = merged_file)
   
-  return(list(multi, out4))
+  return(multi)
   
   
 }
 
-merge_gatk <- function(gatk_somatic_vcf, merged_gt) {
-    #return cleaned vcf
-    gatk_s0  = gatk_somatic_vcf |> vcfR::getFIX() |> as.data.frame() |> setDT()
-    gatk_s1  = gatk_somatic_vcf |> extract_gt_tidy() |> setDT()
-    gatk_s21 = gatk_somatic_vcf |> extract_info_tidy() |> setDT()
-    gatk_somatic = cbind(gatk_s0[gatk_s1$Key, ], gatk_s1)
-    
-    #Merge everything into a common file
-    merged_gt$POS = as.character(merged_gt$POS)
-    merged_bnch = merge(merged_gt, gatk_somatic,  by = "POS", all.x = TRUE)
-    merged_bnch$POS = as.numeric(merged_bnch$POS)
-    merged_bnch = merged_bnch[order(POS)]
-    colnames(merged_bnch) = c(
-        "POS",	"Ground Truth REF",	"Ground Truth DP",
-        "Ground Truth ALT", "Ground Truth AD", 
-        "Ground Truth AF", "CHROM", "ID",	"Mutect2 REF",	
-        "Mutect2 ALT", "Mutect2 QUAL",	"Mutect2 FILTER",
-        "key", "Indiv", "Mutect2 AD", "Mutect2 AF",
-        "Mutect2 DP", "gt_F1R2", "gt_F2R1", "gt_FAD",	
-        "gt_GQ", "gt_GT",	"gt_PGT",	"gt_PID",	"gt_PL",
-        "gt_PS",	"gt_SB",	"gt_GT_alleles"
-    )
-    
-    return(merged_bnch)
-    
-}
-
-
-clean_gatk <- function(df) {
-  #function to produce the caller's reported variants in the desired format 
-    df2 = df[, c(
-        "POS",
-        
-        "Ground Truth REF",
-        "Ground Truth ALT",
-        "Ground Truth DP",
-        "Ground Truth AF",
-        
-        "Mutect2 REF",
-        "Mutect2 ALT",
-        "Mutect2 DP",
-        "Mutect2 AF"
-    ), with = FALSE]
-    
-    
-    
-    df2 = df2[, by = c(
-        "POS",
-        "Ground Truth REF",
-        "Ground Truth DP",
-        "Mutect2 REF",
-        "Mutect2 ALT",
-        "Mutect2 DP",
-        "Mutect2 AF"
-
-    ), .(
-        "Ground Truth ALT" = `Ground Truth ALT` |> tstrsplit(",") |> unlist(),
-        "Ground Truth AF"  = `Ground Truth AF` |> tstrsplit(",") |> unlist()
-        # "Mutect2 REF" = `Mutect2 REF` |> tstrsplit(",") |> unlist(),
-        # "Mutect2 ALT" = `Mutect2 ALT` |> tstrsplit(",") |> unlist(),
-        # "Mutect2 DP"  = `Mutect2 DP` |> tstrsplit(",") |> unlist() |> as.integer(),
-        # "Mutect2 AF"  = `Mutect2 AF` |> tstrsplit(",") |> unlist() |> as.numeric()
-    )]
-
-    mutect2_alt = str_split(df2$`Mutect2 ALT`, ",")
-    mutect2_af = str_split(df2$`Mutect2 AF`, ",")
-
-    cln = mapply(
-        function(x, y, z) {
-
-            index = which(y == x)
-
-            return(
-                c(y[index], z[index])
-            )
-
-        },
-
-        df2$`Ground Truth ALT`, mutect2_alt, mutect2_af
-    )
-
-
-    df2$`Mutect2 ALT` = cln |> lapply(function(x) { return(x [1]) }) |> unlist()
-    df2$`Mutect2 AF` = cln |> lapply(function(x) { return(x [2]) }) |> unlist()
-
-    df2[which(is.na(`Mutect2 AF`))]$`Mutect2 DP` = NA
-    df2[which(is.na(`Mutect2 AF`))]$`Mutect2 REF` = NA
-
-    df2 = df2[, c(
-        "POS",
-        "Ground Truth REF",
-        "Ground Truth ALT",
-        "Ground Truth DP",
-        "Ground Truth AF",
-        "Mutect2 REF",
-        "Mutect2 ALT",
-        "Mutect2 DP",
-        "Mutect2 AF"
-    ), with = FALSE]
-    
-    return(df2)
-    
-}
-
-
 bar_plots_gatk <- function(q) {
     #function to produce variants' barplots for coverage and AF
     q[which(q$`Mutect2 ALT` == "")]$`Mutect2 ALT` = NA
@@ -285,7 +160,6 @@ bar_plots_gatk <- function(q) {
     
 }
 
-
 density_plot_gatk <- function(q) {
     #function to produce AF density plots
     q[which(q$`Mutect2 ALT` == "")]$`Mutect2 ALT` = NA
@@ -374,7 +248,6 @@ density_plot_gatk <- function(q) {
     
 }
 
-
 bubble_plots_gatk <- function(q) {
     
     #function to produce SNVs bubble plot
@@ -453,7 +326,6 @@ bubble_plots_gatk <- function(q) {
     
 }
 
-
 venn_plot_gatk <- function(q, p) {
     #function to produce Venn plot for each caller
     vcf_GT = vcfR::getFIX(q) |> as.data.frame() |> setDT()
@@ -481,63 +353,7 @@ venn_plot_gatk <- function(q, p) {
     return(gr)
 }
 
-
 #FP & FN SNVS------------------------------------------------------------------
-
-load_gatk_vcf <- function(path, merged_file){
-    #function to load caller vcf
-    Mutect2_somatic_vcf <- read.vcfR( paste0(path, "/", merged_file, 
-                                             "_Mutect2_norm.vcf"), verbose = FALSE )
-    
-    Mutect2_s0  = Mutect2_somatic_vcf |> vcfR::getFIX() |> as.data.frame() |> setDT()
-    Mutect2_s1  = Mutect2_somatic_vcf |> extract_gt_tidy() |> setDT()
-    Mutect2gatk_s21 = Mutect2_somatic_vcf |> extract_info_tidy() |> setDT()
-    Mutect2_somatic = cbind(Mutect2_s0[Mutect2_s1$Key, ], Mutect2_s1)
-    return(Mutect2_somatic)
-}
-
-fp_snvs_gatk <- function(Mutect2_somatic_snvs, pick_gt, gt_all){#term snvs is redundant
-    #find MUtect2 FP variants
-    fp_var = define_fp(Mutect2_somatic_snvs, pick_gt)
-    fp_var$gt_AF = as.numeric(fp_var$gt_AF)
-    colnames(fp_var) = c("CHROM", "POS","ID", "Mutect2 REF",	
-                         "Mutect2 ALT", "Mutect2 QUAL",	"Mutect2 FILTER",
-                         "key", "Indiv", "Mutect2 AD", "Mutect2 AF",
-                         "Mutect2 DP", "gt_F1R2", "gt_F2R1", "gt_FAD",	
-                         "gt_GQ", "gt_GT",	"gt_PGT",	"gt_PID",	"gt_PL",
-                         "gt_PS",	"gt_SB",	"gt_GT_alleles", "mut")
-    
-    #find DP of FP variants'  location in GT
-    tmp = gt_all[which(POS %in% unique(fp_var$POS))]
-    a = unique(tmp, by = "POS")
-    #to include the presence multiple variants in a POS
-    index = match(fp_var$POS, a$POS)
-    fp_var$`Ground Truth DP` = a[index]$DP
-    fp_var$`DP Percentage` = fp_var$`Mutect2 DP`/fp_var$`Ground Truth DP`
-    fp_var$type = "FP"
-    return(fp_var)
-}
-
-final_fp_snvs_gatk <- function(path, merged_file, pick_gt, gt_all){
-    
-    Mutect2_somatic <- load_gatk_vcf(path, merged_file)
-    Mutect2_somatic_snvs <-select_snvs(Mutect2_somatic)
-    fp_var <- fp_snvs_gatk(Mutect2_somatic_snvs, pick_gt, gt_all)
-    
-    return(fp_var)
-}
-
-final_fn_snvs_gatk <- function(path, merged_file, pick_gt){
-    
-    Mutect2_somatic <- load_gatk_vcf(path, merged_file)
-    Mutect2_somatic_snvs <- select_snvs(Mutect2_somatic)
-    fn_var <- define_fn(Mutect2_somatic_snvs, pick_gt)
-    colnames(fn_var) = c("POS", "Ground Truth REF", "Ground Truth DP",
-                         "Ground Truth ALT", "Count", "Ground Truth AF",
-                         "mut", "type")
-    return(fn_var)
-}
-
 fp_violin_plots_gatk <- function(q) {
     #function to produce variants' barplots for coverage and AF
     #q[which(q$`Mutect2 ALT` == "")]$`Mutect2 ALT` = NA
@@ -674,101 +490,6 @@ plot_snvs_FP_gatk <- function(df, merged_file) {
 }
 
 #INDELs------------------------------------------------------------------------
-
-categorize_fns_gatk <- function(caller, fn_var) {
-    #function to identify FN categories
-    
-    caller$POS = as.numeric(caller$POS)
-    fn_var$POS = as.numeric(fn_var$POS)
-    colnames(fn_var) = c("POS","REF", "Ground Truth DP",  "ALT",
-                         "Count", "Ground Truth AF","mut","type")
-    #Same POS
-    same_POS <- merge(fn_var, caller, by = c("POS"))
-    fn_var[, category := ifelse(POS %in% same_POS$POS, "diff REF", "not exist")]
-    
-    #Same POS & REF
-    same_POS_REF <- merge(fn_var, caller, by = c("POS", "REF"))
-    # Update only rows where POS and REF match
-    fn_var[POS %in% same_POS_REF$POS & REF %in% same_POS_REF$REF, 
-           category := "diff ALT"]
-    
-    return(fn_var)
-}
-
-categorize_fps_gatk <- function(pick_gt_stdz, fp_indels_gatk) {
-    #function to identify FP categories
-    pick_gt_stdz$POS = as.numeric(pick_gt_stdz$POS)
-    fp_indels_gatk$POS = as.numeric(fp_indels_gatk$POS)
-    
-    colnames(fp_indels_gatk) = c("CHROM", "POS", "ID", "REF", "ALT", "Mutect2 QUAL",
-                                 "Mutect2 FILTER", "key", "Indiv", "Mutect2 AD", 
-                                 "Mutect2 AF", "Mutect2 DP", "gt_F1R2", "gt_F2R1", 
-                                 "gt_FAD", "gt_GQ", "gt_GT", "gt_PGT", "gt_PID", 
-                                 "gt_PL" , "gt_PS", "gt_SB", "gt_GT_alleles", 
-                                 "mut", "Ground Truth DP","DP Percentage", "type")
-    #Same POS
-    same_POS <- merge(fp_indels_gatk, pick_gt_stdz, by = c("POS"))
-    fp_indels_gatk[, category := ifelse(POS %in% same_POS$POS, "diff REF", "not exist")]
-    
-    #Same POS & REF
-    same_POS_REF <- merge(fp_indels_gatk, pick_gt_stdz, by = c("POS", "REF"))
-    # Update only rows where POS and REF match
-    fp_indels_gatk[POS %in% same_POS_REF$POS & REF %in% same_POS_REF$REF, 
-                   category := "diff ALT"]
-    
-    return(fp_indels_gatk)
-}
-
-
-final_fp_indels_gatk <- function(path, merged_file, pick_gt, gt_all){
-    #function to identify FP indels
-    Mutect2_somatic <- load_gatk_vcf(path, merged_file)
-    Mutect2_somatic_indels <-select_indels(Mutect2_somatic)
-    fp_var = fp_snvs_gatk(Mutect2_somatic_indels, pick_gt, gt_all)
-    return(fp_var)
-}
-
-final_fn_indels_gatk <- function(path, merged_file, pick_gt){
-    #function to identify FN indels
-    Mutect2_somatic <- load_gatk_vcf(path, merged_file)
-    Mutect2_somatic_indels <-select_indels(Mutect2_somatic)
-    fn_var = define_fn(Mutect2_somatic_indels, pick_gt)
-    colnames(fn_var) = c("POS", "Ground Truth REF", "Ground Truth DP", 
-                         "Ground Truth ALT", "Count", "Ground Truth AF", "mut", "type")
-    return(fn_var)
-}
-
-final_tp_indels_gatk <- function(path, merged_file, pick_gt){
-    #function to identify TP indels
-    Mutect2_somatic <- load_gatk_vcf(path, merged_file)
-    Mutect2_somatic_indels <-select_indels(Mutect2_somatic)
-    tp_var = define_tp(Mutect2_somatic_indels, pick_gt)
-    return(tp_var)
-}
-
-
-call_fn_indels_gatk <- function(path, merged_file, pick_gt_stdz){
-  #function to output categorized FN indels
-  fn_indels_gatk = final_fn_indels_gatk(path, merged_file, pick_gt_stdz)
-  Mutect2_somatic = load_gatk_vcf(path, merged_file)
-  Mutect2_indels = select_indels(Mutect2_somatic)
-  fn_indels_gatk_categories = categorize_fns_gatk(Mutect2_indels, fn_indels_gatk)
-  
-  return(fn_indels_gatk_categories)
-}
-
-call_fp_indels_gatk <- function(path, merged_file, pick_gt_stdz){
-  #function to output categorized FP indels
-  gt_all = load_gt_report_indels(path, merged_file)$all |> standardize_indels()
-  fp_indels_gatk = final_fp_indels_gatk(path, merged_file, pick_gt_stdz, gt_all)
-  fp_indels_gatk_categories = categorize_fps_gatk(pick_gt_stdz, fp_indels_gatk)
-  
-  return(fp_indels_gatk_categories)
-}
-
-
-
-
 circular_plot_gatk <- function(path, merged_file, caller){
     #Load data
     tp = fread(paste0(path, "/", merged_file, "_", caller, "_indels_TP.tsv"), sep = "\t")
@@ -868,5 +589,3 @@ circular_plot_gatk <- function(path, merged_file, caller){
     return(p)
 }
 
-
-
